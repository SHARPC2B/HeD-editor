<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2013 sp1 (http://www.altova.com) by Bryn Rhodes (Database Consulting Group) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:hl7-org:v3/hed" xmlns:dt="urn:hl7-org:v3/cdsdt" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xhtml="http://www.w3.org/1999/xhtml" targetNamespace="urn:hl7-org:v3/hed" elementFormDefault="qualified">
	<xs:import namespace="urn:hl7-org:v3/cdsdt" schemaLocation="datatypes.xsd"/>
	<!--xs:include schemaLocation="base.xsd"/-->
	<xs:include schemaLocation="extdatatypes.xsd"/>
	<xs:include schemaLocation="expression.xsd"/>
	<!-- 
		AD - Address : ANY
			use : set_PostalAddressUse
			part : List<ADXP>
	-->
	<xs:complexType name="AddressLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type AD with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="part" type="dt:ADXP" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="use" type="dt:set_PostalAddressUse" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		BL - Boolean : ANY
			value : xs:boolean
	-->
	<xs:complexType name="BooleanLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type BL with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:boolean" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		CD - Code : ANY
			code : Code
			codeSystem : Uid
			codeSystemName : xs:string
			displayName : xs:string
			originalText : xs:string
	-->
	<xs:complexType name="CodeLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type CD with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="codeSystem" type="dt:Uid" use="required"/>
				<xs:attribute name="code" type="dt:Code" use="required"/>
				<xs:attribute name="codeSystemName" type="xs:string" use="optional"/>
				<xs:attribute name="displayName" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		CO - CodedOrdinal : ANY
			code : CD
			value : Decimal
	-->
	<xs:complexType name="CodedOrdinalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type CO with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="codeSystem" type="dt:Uid" use="required"/>
				<xs:attribute name="code" type="dt:Code" use="required"/>
				<xs:attribute name="codeSystemName" type="xs:string" use="optional"/>
				<xs:attribute name="displayName" type="xs:string" use="optional"/>
				<xs:attribute name="value" type="dt:Decimal" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		CS - CodeSimple : ANY
			code : xs:string
	-->
	<xs:complexType name="SimpleCodeLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type CS with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="code" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		EN - EntityName : ANY
			use : set_EntityNameUse
			part : List<ENXP>
	-->
	<xs:complexType name="EntityNameLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type EN with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="part" type="dt:ENXP" maxOccurs="unbounded"/>
				</xs:sequence>
				<xs:attribute name="use" type="dt:set_EntityNameUse" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		II - Identifier : ANY
			root : Uid
			extension : xs:string
	-->
	<xs:complexType name="IdentifierLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type II with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="root" type="dt:Uid" use="required"/>
				<xs:attribute name="extension" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		INT - Integer : QTY
			value : xs:int
	-->
	<xs:complexType name="IntegerLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type INT with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:int" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_INT - IntegerInterval : ANY
			low : xs:int
			high : xs:int
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<xs:complexType name="IntegerIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_INT with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="low" type="xs:int"/>
				<xs:attribute name="high" type="xs:int"/>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_PQ - PhysicalQuantityInterval : ANY
			ATTR_PQ_LOW
			ATTR_PQ_HIGH
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<xs:complexType name="PhysicalQuantityIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_PQ with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_PQ_LOW"/>
				<xs:attributeGroup ref="dt:ATTR_PQ_HIGH"/>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_QTY - QuantityInterval : ANY
			low : QTY
			high : QTY
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<!-- 
	<xs:complexType name="QuantityIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_QTY with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="low" type="dt:QTY" minOccurs="0"/>
					<xs:element name="high" type="dt:QTY" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	 -->
	<!--
		IVL_RTO_INT - IntegerRatioInterval : ANY
			ATTR_RTO_LOW
			ATTR_RTO_HIGH
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<xs:complexType name="IntegerRatioIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_RTO_INT with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_RTO_INT_LOW"/>
				<xs:attributeGroup ref="dt:ATTR_RTO_INT_HIGH"/>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_RTO_PQ - PhysicalQuantityRatioInterval : ANY
			ATTR_RTO_LOW
			ATTR_RTO_HIGH
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<xs:complexType name="PhysicalQuantityRatioIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_RTO_PQ with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_RTO_PQ_LOW"/>
				<xs:attributeGroup ref="dt:ATTR_RTO_PQ_HIGH"/>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_REAL - RealInterval : ANY
			low : Decimal
			high : Decimal
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<xs:complexType name="RealIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_REAL with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="low" type="dt:Decimal"/>
				<xs:attribute name="high" type="dt:Decimal"/>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		IVL_TS - TimestampInterval : ANY
			ATTR_TS_LOW
			ATTR_TSHIGH
			lowIsInclusive : xs:boolean
			highIsInclusive : xs:boolean
	-->
	<xs:complexType name="TimestampIntervalLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type IVL_TS with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_TS_LOW"/>
				<xs:attributeGroup ref="dt:ATTR_TS_HIGH"/>
				<xs:attribute name="lowIsInclusive" type="xs:boolean" use="optional"/>
				<xs:attribute name="highIsInclusive" type="xs:boolean" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		PQ - PhysicalQuantity : QTY
			ATTR_PQ
	-->
	<xs:complexType name="PhysicalQuantityLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type PQ with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_PQ"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		REAL - Real : QTY
			value : Decimal
	-->
	<xs:complexType name="RealLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type Real with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="dt:Decimal" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		RTO_INT - Ratio : QTY
			ATTR_RTO_INT
	-->
	<xs:complexType name="IntegerRatioLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type RTO_INT with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_RTO_INT"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		RTO_PQ - Ratio : QTY
			ATTR_RTO_PQ
	-->
	<xs:complexType name="PhysicalQuantityRatioLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type RTO_PQ with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_RTO_PQ"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		ST - String : ANY
			value : xs:string
	-->
	<xs:complexType name="StringLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type ST with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:string" use="required"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		TEL - URL : ANY
			value : xs:anyURI
			use : set_TelecommunicationAddressUse
			capabilities : set_TelecommunicationCapability
			useablePeriodOriginalText : xs:string
	-->
	<xs:complexType name="UrlLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type TEL with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="value" type="xs:anyURI" use="required"/>
				<xs:attribute name="use" type="dt:set_TelecommunicationAddressUse" use="optional"/>
				<xs:attribute name="capabilities" type="dt:set_TelecommunicationCapability" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		TS - Timestamp : QTY
			value : xs:string (regex restricted)
	-->
	<xs:complexType name="TimestampLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type TS with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attributeGroup ref="dt:ATTR_TS"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		PIVL_TS
			value : xs:string (regex restricted)

	-->
	<xs:complexType name="PeriodLiteral">
		<xs:annotation>
			<xs:documentation>
				Returns a value of type PIVL_TS with the given attributes.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="phase" type="dt:IVL_TS" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
                        A prototype of the repeating interval specifying the
                        duration of each occurrence and anchors the periodic
                        interval sequence at a certain point in time.
                     </xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="period" type="dt:PQ" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>
                        A time duration specifying a reciprocal measure of
                        the frequency at which the periodic interval repeats.
                     </xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
				<xs:attributeGroup ref="dt:ATTR_TS"/>
				<xs:attribute name="alignment" type="CalendarCycle" use="optional">
					<xs:annotation>
						<xs:documentation>
                     Specifies if and how the repetitions are aligned to
                     the cycles of the underlying calendar (e.g., to
                     distinguish every 30 days from "the 5th of every
                     month".) A non-aligned periodic interval recurs
                     independently from the calendar. An aligned periodic
                     interval is synchronized with the calendar.
                  </xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="institutionSpecified" type="xs:boolean" use="optional" default="false">
					<xs:annotation>
						<xs:documentation>
                     Indicates whether the exact timing is up to the party
                     executing the schedule (e.g., to distinguish "every 8
                     hours" from "3 times a day".)
                  </xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
			<!--  changed from bl to xs:boolean since bl was removed as a type 
					Aziz Boxwala 
				 -->
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
