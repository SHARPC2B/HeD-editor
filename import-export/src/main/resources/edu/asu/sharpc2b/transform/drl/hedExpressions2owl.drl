
package edu.asu.sharpc2b;

import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.vocab.*;
import uk.ac.manchester.cs.owl.owlapi.*;

import edu.asu.sharpc2b.transform.HeD2OwlHelper;

import org.hl7.knowledgeartifact.r1.*;
import org.hl7.cdsdt.r2.*;

import javax.xml.bind.*;
import java.util.Set;
import java.util.HashSet;

global String tns;
global HeD2OwlHelper helper;



rule "Nary operands"
when
    $nx : NaryExpression( $ops : operands )
    Link( $nx, $ind ; )
    Link( $xp, $op ; exp memberOf $ops )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op ) );
end

rule "Unary operands"
when
    $nx : UnaryExpression( $ops1 : operand )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ;)
then
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
end

rule "BiNary operands"
when
    $nx : BinaryExpression( $ops1 : operands.get( 0 ), $ops2 : operands.get( 1 ) )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
    Link( $ops2, $op2 ; )
then
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $op2 ) );
end

rule "TerNary operands"
when
    $nx : TernaryExpression( $ops1 : operands.get( 0 ), $ops2 : operands.get( 1 ), $ops3 : operands.get( 2 ) )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
    Link( $ops2, $op2 ; )
    Link( $ops3, $op3 ; )
then
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:thirdOperand", $ind, $op3 ) );
end






    rule "Expression org.hl7.knowledgeartifact.r1.IntegerIntervalLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.IntegerIntervalLiteral(  _lowClosed : lowClosed , _high : high , _low : low , _highClosed : highClosed  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:lowClosed", $ind, "" + _lowClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:high", $ind, "" + _high, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:low", $ind, "" + _low, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:highClosed", $ind, "" + _highClosed, "xsd:boolean" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.IntegerLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.IntegerLiteral(  _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value", $ind, "" + _value, "xsd:int" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.PhysicalQuantityIntervalLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.PhysicalQuantityIntervalLiteral(  _lowClosed : lowClosed , _highClosed : highClosed  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:lowClosed", $ind, "" + _lowClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:highClosed", $ind, "" + _highClosed, "xsd:boolean" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.PhysicalQuantityIntervalLiteral_high"
    when
        $xp : org.hl7.knowledgeartifact.r1.PhysicalQuantityIntervalLiteral()
        _high : Object() from $xp.high
        Link( $xp, $ind ; )
        Link( _high, $val ; )
    then
        insert( helper.assertObjectProperty( "a:high_PhysicalQuantity", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.PhysicalQuantityIntervalLiteral_low"
    when
        $xp : org.hl7.knowledgeartifact.r1.PhysicalQuantityIntervalLiteral()
        _low : Object() from $xp.low
        Link( $xp, $ind ; )
        Link( _low, $val ; )
    then
        insert( helper.assertObjectProperty( "a:low_PhysicalQuantity", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.ComplexLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.ComplexLiteral(  _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_string", $ind, "" + _value, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.RatioLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.RatioLiteral(  _numerator : numerator , _denominator : denominator  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:numerator", $ind, "" + _numerator, "xsd:double" );
        
            helper.assertNullSafeDataProperty( drools, "a:denominator", $ind, "" + _denominator, "xsd:double" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.PeriodLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.PeriodLiteral(  _alignment : alignment , _count : count , _isFlexible : isFlexible  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:alignment", $ind, "" + _alignment, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:count", $ind, "" + _count, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:isFlexible", $ind, "" + _isFlexible, "xsd:boolean" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.PeriodLiteral_frequency"
    when
        $xp : org.hl7.knowledgeartifact.r1.PeriodLiteral()
        _frequency : Object() from $xp.frequency
        Link( $xp, $ind ; )
        Link( _frequency, $val ; )
    then
        insert( helper.assertObjectProperty( "a:frequency", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.PeriodLiteral_period"
    when
        $xp : org.hl7.knowledgeartifact.r1.PeriodLiteral()
        _period : Object() from $xp.period
        Link( $xp, $ind ; )
        Link( _period, $val ; )
    then
        insert( helper.assertObjectProperty( "a:period", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.PeriodLiteral_phase"
    when
        $xp : org.hl7.knowledgeartifact.r1.PeriodLiteral()
        _phase : Object() from $xp.phase
        Link( $xp, $ind ; )
        Link( _phase, $val ; )
    then
        insert( helper.assertObjectProperty( "a:phase", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.StringLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.StringLiteral(  _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_string", $ind, "" + _value, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.QuantityIntervalLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.QuantityIntervalLiteral(  _lowClosed : lowClosed , _high : high , _highClosed : highClosed , _low : low  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:lowClosed", $ind, "" + _lowClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:high_double", $ind, "" + _high, "xsd:double" );
        
            helper.assertNullSafeDataProperty( drools, "a:highClosed", $ind, "" + _highClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:low_double", $ind, "" + _low, "xsd:double" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.RealIntervalLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.RealIntervalLiteral(  _lowClosed : lowClosed , _high : high , _highClosed : highClosed , _low : low  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:lowClosed", $ind, "" + _lowClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:high_double", $ind, "" + _high, "xsd:double" );
        
            helper.assertNullSafeDataProperty( drools, "a:highClosed", $ind, "" + _highClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:low_double", $ind, "" + _low, "xsd:double" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.AddressLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.AddressLiteral(  _part : parts[ 0 ]  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:part", $ind, "" + _part, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.CodeLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.CodeLiteral(  _codeSystemName : codeSystemName , _codeSystem : codeSystem , _code : code , _displayName : displayName  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:codeSystemName", $ind, "" + _codeSystemName, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:codeSystem", $ind, "" + _codeSystem, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:code", $ind, "" + _code, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:displayName", $ind, "" + _displayName, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.CodedOrdinalLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.CodedOrdinalLiteral(  _codeSystemName : codeSystemName , _codeSystem : codeSystem , _value : value , _code : code , _displayName : displayName  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:codeSystemName", $ind, "" + _codeSystemName, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:codeSystem", $ind, "" + _codeSystem, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:value_double", $ind, "" + _value, "xsd:double" );
        
            helper.assertNullSafeDataProperty( drools, "a:code", $ind, "" + _code, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:displayName", $ind, "" + _displayName, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.EntityNameLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.EntityNameLiteral(  _part : parts[ 0 ]  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:part", $ind, "" + _part, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Literal"
    when
        $xp : org.hl7.knowledgeartifact.r1.Literal(  _value : value , _valueType : valueType  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_string", $ind, "" + _value, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:valueType", $ind, "" + _valueType, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.PhysicalQuantityLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.PhysicalQuantityLiteral(  _unit : unit , _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:unit", $ind, "" + _unit, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:value_double", $ind, "" + _value, "xsd:double" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.UrlLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.UrlLiteral(  _value : value , _capabilities : capabilities  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_anyURI", $ind, "" + _value, "xsd:anyURI" );
        
            helper.assertNullSafeDataProperty( drools, "a:capabilities", $ind, "" + _capabilities, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.RealLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.RealLiteral(  _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_double", $ind, "" + _value, "xsd:double" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.TimestampLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.TimestampLiteral(  _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_dateTime", $ind, "" + _value, "xsd:dateTime" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.TimestampIntervalLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.TimestampIntervalLiteral(  _lowClosed : lowClosed , _high : high , _highClosed : highClosed , _low : low  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:lowClosed", $ind, "" + _lowClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:high_dateTime", $ind, "" + _high, "xsd:dateTime" );
        
            helper.assertNullSafeDataProperty( drools, "a:highClosed", $ind, "" + _highClosed, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:low_dateTime", $ind, "" + _low, "xsd:dateTime" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.IdentifierLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.IdentifierLiteral(  _extension : extension , _root : root  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:extension", $ind, "" + _extension, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:root", $ind, "" + _root, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.BooleanLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.BooleanLiteral(  _value : value  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:value_boolean", $ind, "" + _value, "xsd:boolean" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.SimpleCodeLiteral"
    when
        $xp : org.hl7.knowledgeartifact.r1.SimpleCodeLiteral(  _code : code  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:code", $ind, "" + _code, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Sort"
    when
        $xp : org.hl7.knowledgeartifact.r1.Sort(  _orderBy : orderBy  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:orderBy", $ind, "" + _orderBy, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Sort_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Sort()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Distinct_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Distinct()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Current"
    when
        $xp : org.hl7.knowledgeartifact.r1.Current(  _scope : scope  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
    end







    rule "Expression org.hl7.knowledgeartifact.r1.DateAdd_numberOfPeriods"
    when
        $xp : org.hl7.knowledgeartifact.r1.DateAdd()
        _numberOfPeriods : Object() from $xp.numberOfPeriods
        Link( $xp, $ind ; )
        Link( _numberOfPeriods, $val ; )
    then
        insert( helper.assertObjectProperty( "a:numberOfPeriods", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.DateAdd_granularity"
    when
        $xp : org.hl7.knowledgeartifact.r1.DateAdd()
        _granularity : Object() from $xp.granularity
        Link( $xp, $ind ; )
        Link( _granularity, $val ; )
    then
        insert( helper.assertObjectProperty( "a:granularity", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.DateAdd_date"
    when
        $xp : org.hl7.knowledgeartifact.r1.DateAdd()
        _date : Object() from $xp.date
        Link( $xp, $ind ; )
        Link( _date, $val ; )
    then
        insert( helper.assertObjectProperty( "a:date", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Date"
    when
        $xp : org.hl7.knowledgeartifact.r1.Date(  _minute : minute , _second : second , _millisecond : millisecond , _month : month , _year : year , _day : day , _hour : hour  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:minute", $ind, "" + _minute, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:second", $ind, "" + _second, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:millisecond", $ind, "" + _millisecond, "xsd:double" );
        
            helper.assertNullSafeDataProperty( drools, "a:month", $ind, "" + _month, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:year", $ind, "" + _year, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:day", $ind, "" + _day, "xsd:int" );
        
            helper.assertNullSafeDataProperty( drools, "a:hour", $ind, "" + _hour, "xsd:int" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.List"
    when
        $xp : org.hl7.knowledgeartifact.r1.List(  _key : key  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:key", $ind, "" + _key, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.List_element"
    when
        $xp : org.hl7.knowledgeartifact.r1.List()
        _element : Object() from $xp.elements
        Link( $xp, $ind ; )
        Link( _element, $val ; )
    then
        insert( helper.assertObjectProperty( "a:element", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Contains_element"
    when
        $xp : org.hl7.knowledgeartifact.r1.Contains()
        _element : Object() from $xp.element
        Link( $xp, $ind ; )
        Link( _element, $val ; )
    then
        insert( helper.assertObjectProperty( "a:element", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Contains_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Contains()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.ValueSet"
    when
        $xp : org.hl7.knowledgeartifact.r1.ValueSet(  _id : id , _authority : authority , _version : version  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:id", $ind, "" + _id, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:authority", $ind, "" + _authority, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:version", $ind, "" + _version, "xsd:string" );
        
    end






    rule "Expression org.hl7.knowledgeartifact.r1.ParameterRef"
    when
        $xp : org.hl7.knowledgeartifact.r1.ParameterRef(  _name : name  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:name", $ind, "" + _name, "xsd:string" );
        
    end







    rule "Expression org.hl7.knowledgeartifact.r1.Split_stringToSplit"
    when
        $xp : org.hl7.knowledgeartifact.r1.Split()
        _stringToSplit : Object() from $xp.stringToSplit
        Link( $xp, $ind ; )
        Link( _stringToSplit, $val ; )
    then
        insert( helper.assertObjectProperty( "a:stringToSplit", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Split_separator"
    when
        $xp : org.hl7.knowledgeartifact.r1.Split()
        _separator : Object() from $xp.separator
        Link( $xp, $ind ; )
        Link( _separator, $val ; )
    then
        insert( helper.assertObjectProperty( "a:separator", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Null"
    when
        $xp : org.hl7.knowledgeartifact.r1.Null(  _valueType : valueType  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:valueType_anyURI", $ind, "" + _valueType, "xsd:anyURI" );
        
    end







    rule "Expression org.hl7.knowledgeartifact.r1.In_element"
    when
        $xp : org.hl7.knowledgeartifact.r1.In()
        _element : Object() from $xp.element
        Link( $xp, $ind ; )
        Link( _element, $val ; )
    then
        insert( helper.assertObjectProperty( "a:element", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.In_collection"
    when
        $xp : org.hl7.knowledgeartifact.r1.In()
        _collection : Object() from $xp.collection
        Link( $xp, $ind ; )
        Link( _collection, $val ; )
    then
        insert( helper.assertObjectProperty( "a:collection", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.First"
    when
        $xp : org.hl7.knowledgeartifact.r1.First(  _orderBy : orderBy  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:orderBy", $ind, "" + _orderBy, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.First_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.First()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Conditional_else"
    when
        $xp : org.hl7.knowledgeartifact.r1.Conditional()
        _else : Object() from $xp.else
        Link( $xp, $ind ; )
        Link( _else, $val ; )
    then
        insert( helper.assertObjectProperty( "a:else", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Conditional_condition"
    when
        $xp : org.hl7.knowledgeartifact.r1.Conditional()
        _condition : Object() from $xp.condition
        Link( $xp, $ind ; )
        Link( _condition, $val ; )
    then
        insert( helper.assertObjectProperty( "a:condition", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Conditional_then"
    when
        $xp : org.hl7.knowledgeartifact.r1.Conditional()
        _then : Object() from $xp.then
        Link( $xp, $ind ; )
        Link( _then, $val ; )
    then
        insert( helper.assertObjectProperty( "a:then", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.DataRequest"
    when
        $xp : org.hl7.knowledgeartifact.r1.DataRequest(  _templateId : templateId , _scope : scope , _isInitial : isInitial , _triggerType : triggerType , _cardinality : cardinality  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:templateId", $ind, "" + _templateId, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:isInitial", $ind, "" + _isInitial, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:triggerType", $ind, "" + _triggerType, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:cardinality", $ind, "" + _cardinality, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.DataRequest_dataType"
    when
        $xp : org.hl7.knowledgeartifact.r1.DataRequest()
        _dataType : Object() from $xp.dataType
        Link( $xp, $ind ; )
        Link( _dataType, $val ; )
    then
        insert( helper.assertObjectProperty( "a:dataType", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.DataRequest_timeOffset"
    when
        $xp : org.hl7.knowledgeartifact.r1.DataRequest()
        _timeOffset : Object() from $xp.timeOffset
        Link( $xp, $ind ; )
        Link( _timeOffset, $val ; )
    then
        insert( helper.assertObjectProperty( "a:timeOffset", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.DataRequest_idProperty"
    when
        $xp : org.hl7.knowledgeartifact.r1.DataRequest()
        _idProperty : Object() from $xp.idProperty
        Link( $xp, $ind ; )
        Link( _idProperty, $val ; )
    then
        insert( helper.assertObjectProperty( "a:idProperty", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest(  _templateId : templateId , _useValueSets : useValueSets , _scope : scope , _isInitial : isInitial , _useSubsumption : useSubsumption , _triggerType : triggerType , _cardinality : cardinality  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:templateId", $ind, "" + _templateId, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:useValueSets", $ind, "" + _useValueSets, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:isInitial", $ind, "" + _isInitial, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:useSubsumption", $ind, "" + _useSubsumption, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:triggerType", $ind, "" + _triggerType, "xsd:string" );
        
            helper.assertNullSafeDataProperty( drools, "a:cardinality", $ind, "" + _cardinality, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_dateRange"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _dateRange : Object() from $xp.dateRange
        Link( $xp, $ind ; )
        Link( _dateRange, $val ; )
    then
        insert( helper.assertObjectProperty( "a:dateRange", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_dataType"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _dataType : Object() from $xp.dataType
        Link( $xp, $ind ; )
        Link( _dataType, $val ; )
    then
        insert( helper.assertObjectProperty( "a:dataType", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_subjectProperty"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _subjectProperty : Object() from $xp.subjectProperty
        Link( $xp, $ind ; )
        Link( _subjectProperty, $val ; )
    then
        insert( helper.assertObjectProperty( "a:subjectProperty", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_subject"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _subject : Object() from $xp.subject
        Link( $xp, $ind ; )
        Link( _subject, $val ; )
    then
        insert( helper.assertObjectProperty( "a:subject", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_dateProperty"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _dateProperty : Object() from $xp.dateProperty
        Link( $xp, $ind ; )
        Link( _dateProperty, $val ; )
    then
        insert( helper.assertObjectProperty( "a:dateProperty", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_timeOffset"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _timeOffset : Object() from $xp.timeOffset
        Link( $xp, $ind ; )
        Link( _timeOffset, $val ; )
    then
        insert( helper.assertObjectProperty( "a:timeOffset", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_codeProperty"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _codeProperty : Object() from $xp.codeProperty
        Link( $xp, $ind ; )
        Link( _codeProperty, $val ; )
    then
        insert( helper.assertObjectProperty( "a:codeProperty", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_codes"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _codes : Object() from $xp.codes
        Link( $xp, $ind ; )
        Link( _codes, $val ; )
    then
        insert( helper.assertObjectProperty( "a:codes", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ClinicalRequest_idProperty"
    when
        $xp : org.hl7.knowledgeartifact.r1.ClinicalRequest()
        _idProperty : Object() from $xp.idProperty
        Link( $xp, $ind ; )
        Link( _idProperty, $val ; )
    then
        insert( helper.assertObjectProperty( "a:idProperty", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Case_else"
    when
        $xp : org.hl7.knowledgeartifact.r1.Case()
        _else : Object() from $xp.else
        Link( $xp, $ind ; )
        Link( _else, $val ; )
    then
        insert( helper.assertObjectProperty( "a:else", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Case_comparand"
    when
        $xp : org.hl7.knowledgeartifact.r1.Case()
        _comparand : Object() from $xp.comparand
        Link( $xp, $ind ; )
        Link( _comparand, $val ; )
    then
        insert( helper.assertObjectProperty( "a:comparand", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Case_caseItem"
    when
        $xp : org.hl7.knowledgeartifact.r1.Case()
        _caseItem : Object() from $xp.caseItems
        Link( $xp, $ind ; )
        Link( _caseItem, $val ; )
    then
        insert( helper.assertObjectProperty( "a:caseItem", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.ForEach"
    when
        $xp : org.hl7.knowledgeartifact.r1.ForEach(  _scope : scope  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.ForEach_element"
    when
        $xp : org.hl7.knowledgeartifact.r1.ForEach()
        _element : Object() from $xp.element
        Link( $xp, $ind ; )
        Link( _element, $val ; )
    then
        insert( helper.assertObjectProperty( "a:element", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ForEach_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.ForEach()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Pos"
    when
        $xp : org.hl7.knowledgeartifact.r1.Pos(  _pattern : pattern  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:pattern", $ind, "" + _pattern, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Pos_string"
    when
        $xp : org.hl7.knowledgeartifact.r1.Pos()
        _string : Object() from $xp.string
        Link( $xp, $ind ; )
        Link( _string, $val ; )
    then
        insert( helper.assertObjectProperty( "a:string", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.IndexOf_element"
    when
        $xp : org.hl7.knowledgeartifact.r1.IndexOf()
        _element : Object() from $xp.element
        Link( $xp, $ind ; )
        Link( _element, $val ; )
    then
        insert( helper.assertObjectProperty( "a:element", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.IndexOf_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.IndexOf()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.ObjectRedefine"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectRedefine(  _scope : scope  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.ObjectRedefine_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectRedefine()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_Object", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ObjectRedefine_property"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectRedefine()
        _property : Object() from $xp.properties
        Link( $xp, $ind ; )
        Link( _property, $val ; )
    then
        insert( helper.assertObjectProperty( "a:property", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Property"
    when
        $xp : org.hl7.knowledgeartifact.r1.Property(  _scope : scope  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Property_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Property()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_Object", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Property_path"
    when
        $xp : org.hl7.knowledgeartifact.r1.Property()
        _path : Object() from $xp.path
        Link( $xp, $ind ; )
        Link( _path, $val ; )
    then
        insert( helper.assertObjectProperty( "a:path", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Within_element"
    when
        $xp : org.hl7.knowledgeartifact.r1.Within()
        _element : Object() from $xp.element
        Link( $xp, $ind ; )
        Link( _element, $val ; )
    then
        insert( helper.assertObjectProperty( "a:element_Ordinal", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Within_interval"
    when
        $xp : org.hl7.knowledgeartifact.r1.Within()
        _interval : Object() from $xp.interval
        Link( $xp, $ind ; )
        Link( _interval, $val ; )
    then
        insert( helper.assertObjectProperty( "a:interval", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.ObjectDescriptor_property"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectDescriptor()
        _property : Object() from $xp.properties
        Link( $xp, $ind ; )
        Link( _property, $val ; )
    then
        insert( helper.assertObjectProperty( "a:property", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ObjectDescriptor_objectType"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectDescriptor()
        _objectType : Object() from $xp.objectType
        Link( $xp, $ind ; )
        Link( _objectType, $val ; )
    then
        insert( helper.assertObjectProperty( "a:objectType", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.SetSubsumes_descendents"
    when
        $xp : org.hl7.knowledgeartifact.r1.SetSubsumes()
        _descendents : Object() from $xp.descendents
        Link( $xp, $ind ; )
        Link( _descendents, $val ; )
    then
        insert( helper.assertObjectProperty( "a:descendents", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.SetSubsumes_ancestors"
    when
        $xp : org.hl7.knowledgeartifact.r1.SetSubsumes()
        _ancestors : Object() from $xp.ancestors
        Link( $xp, $ind ; )
        Link( _ancestors, $val ; )
    then
        insert( helper.assertObjectProperty( "a:ancestors", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Combine_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Combine()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_String", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Combine_separator"
    when
        $xp : org.hl7.knowledgeartifact.r1.Combine()
        _separator : Object() from $xp.separator
        Link( $xp, $ind ; )
        Link( _separator, $val ; )
    then
        insert( helper.assertObjectProperty( "a:separator", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Filter"
    when
        $xp : org.hl7.knowledgeartifact.r1.Filter(  _scope : scope  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:scope", $ind, "" + _scope, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Filter_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Filter()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Filter_condition"
    when
        $xp : org.hl7.knowledgeartifact.r1.Filter()
        _condition : Object() from $xp.condition
        Link( $xp, $ind ; )
        Link( _condition, $val ; )
    then
        insert( helper.assertObjectProperty( "a:condition", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.ExpressionRef"
    when
        $xp : org.hl7.knowledgeartifact.r1.ExpressionRef(  _name : name  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:name", $ind, "" + _name, "xsd:string" );
        
    end







    rule "Expression org.hl7.knowledgeartifact.r1.DateDiff_startDate"
    when
        $xp : org.hl7.knowledgeartifact.r1.DateDiff()
        _startDate : Object() from $xp.startDate
        Link( $xp, $ind ; )
        Link( _startDate, $val ; )
    then
        insert( helper.assertObjectProperty( "a:startDate", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.DateDiff_granularity"
    when
        $xp : org.hl7.knowledgeartifact.r1.DateDiff()
        _granularity : Object() from $xp.granularity
        Link( $xp, $ind ; )
        Link( _granularity, $val ; )
    then
        insert( helper.assertObjectProperty( "a:granularity_String", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.DateDiff_endDate"
    when
        $xp : org.hl7.knowledgeartifact.r1.DateDiff()
        _endDate : Object() from $xp.endDate
        Link( $xp, $ind ; )
        Link( _endDate, $val ; )
    then
        insert( helper.assertObjectProperty( "a:endDate", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Avg"
    when
        $xp : org.hl7.knowledgeartifact.r1.Avg(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Avg_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Avg()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Count"
    when
        $xp : org.hl7.knowledgeartifact.r1.Count(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Count_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Count()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.AnyTrue"
    when
        $xp : org.hl7.knowledgeartifact.r1.AnyTrue(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.AnyTrue_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.AnyTrue()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.AllTrue"
    when
        $xp : org.hl7.knowledgeartifact.r1.AllTrue(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.AllTrue_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.AllTrue()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Min"
    when
        $xp : org.hl7.knowledgeartifact.r1.Min(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Min_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Min()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Sum"
    when
        $xp : org.hl7.knowledgeartifact.r1.Sum(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Sum_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Sum()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Max"
    when
        $xp : org.hl7.knowledgeartifact.r1.Max(  _path : path  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:path_string", $ind, "" + _path, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Max_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Max()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.ObjectExpression_property"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectExpression()
        _property : Object() from $xp.properties
        Link( $xp, $ind ; )
        Link( _property, $val ; )
    then
        insert( helper.assertObjectProperty( "a:property", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.ObjectExpression_objectType"
    when
        $xp : org.hl7.knowledgeartifact.r1.ObjectExpression()
        _objectType : Object() from $xp.objectType
        Link( $xp, $ind ; )
        Link( _objectType, $val ; )
    then
        insert( helper.assertObjectProperty( "a:objectType", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Subsumes_descendent"
    when
        $xp : org.hl7.knowledgeartifact.r1.Subsumes()
        _descendent : Object() from $xp.descendent
        Link( $xp, $ind ; )
        Link( _descendent, $val ; )
    then
        insert( helper.assertObjectProperty( "a:descendent", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Subsumes_ancestor"
    when
        $xp : org.hl7.knowledgeartifact.r1.Subsumes()
        _ancestor : Object() from $xp.ancestor
        Link( $xp, $ind ; )
        Link( _ancestor, $val ; )
    then
        insert( helper.assertObjectProperty( "a:ancestor", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Last"
    when
        $xp : org.hl7.knowledgeartifact.r1.Last(  _orderBy : orderBy  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:orderBy", $ind, "" + _orderBy, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Last_source"
    when
        $xp : org.hl7.knowledgeartifact.r1.Last()
        _source : Object() from $xp.source
        Link( $xp, $ind ; )
        Link( _source, $val ; )
    then
        insert( helper.assertObjectProperty( "a:source_List", $ind, $val ) );
    end






    rule "Expression org.hl7.knowledgeartifact.r1.Substring_startIndex"
    when
        $xp : org.hl7.knowledgeartifact.r1.Substring()
        _startIndex : Object() from $xp.startIndex
        Link( $xp, $ind ; )
        Link( _startIndex, $val ; )
    then
        insert( helper.assertObjectProperty( "a:startIndex", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Substring_length"
    when
        $xp : org.hl7.knowledgeartifact.r1.Substring()
        _length : Object() from $xp.length
        Link( $xp, $ind ; )
        Link( _length, $val ; )
    then
        insert( helper.assertObjectProperty( "a:length", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Substring_stringToSub"
    when
        $xp : org.hl7.knowledgeartifact.r1.Substring()
        _stringToSub : Object() from $xp.stringToSub
        Link( $xp, $ind ; )
        Link( _stringToSub, $val ; )
    then
        insert( helper.assertObjectProperty( "a:stringToSub", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.DatePart"
    when
        $xp : org.hl7.knowledgeartifact.r1.DatePart(  _granularity : granularity  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:granularity_string", $ind, "" + _granularity, "xsd:string" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.DatePart_date"
    when
        $xp : org.hl7.knowledgeartifact.r1.DatePart()
        _date : Object() from $xp.date
        Link( $xp, $ind ; )
        Link( _date, $val ; )
    then
        insert( helper.assertObjectProperty( "a:date", $ind, $val ) );
    end





    rule "Expression org.hl7.knowledgeartifact.r1.Interval"
    when
        $xp : org.hl7.knowledgeartifact.r1.Interval(  _endOpen : endOpen , _beginOpen : beginOpen  )
        Link( $xp, $ind ; )
    then
        
            helper.assertNullSafeDataProperty( drools, "a:endOpen", $ind, "" + _endOpen, "xsd:boolean" );
        
            helper.assertNullSafeDataProperty( drools, "a:beginOpen", $ind, "" + _beginOpen, "xsd:boolean" );
        
    end


    rule "Expression org.hl7.knowledgeartifact.r1.Interval_end"
    when
        $xp : org.hl7.knowledgeartifact.r1.Interval()
        _end : Object() from $xp.end
        Link( $xp, $ind ; )
        Link( _end, $val ; )
    then
        insert( helper.assertObjectProperty( "a:end", $ind, $val ) );
    end

    rule "Expression org.hl7.knowledgeartifact.r1.Interval_begin"
    when
        $xp : org.hl7.knowledgeartifact.r1.Interval()
        _begin : Object() from $xp.begin
        Link( $xp, $ind ; )
        Link( _begin, $val ; )
    then
        insert( helper.assertObjectProperty( "a:begin", $ind, $val ) );
    end


