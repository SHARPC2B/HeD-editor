package edu.asu.sharpc2b;

import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.vocab.*;
import uk.ac.manchester.cs.owl.owlapi.*;

import edu.asu.sharpc2b.transform.HeD2OwlHelper;

import org.hl7.v3.hed.*;

import javax.xml.bind.*;
import java.util.Set;
import java.util.HashSet;

global String tns;
global HeD2OwlHelper helper;


/***********************************************************************************************/
/*  SERVICE
/***********************************************************************************************/

declare Link
    exp : Expression
    ind : OWLNamedIndividual
end

rule "Init"
when
then
    insert( new Link( null, null ) );
end


rule "Build ontology"
salience -999
when
    accumulate( $ax : OWLAxiom( ),
                $set : collectSet( $ax ) )
then
    helper.buildOntology( $set );
end



/***********************************************************************************************/
/*  DOCUMENT
/***********************************************************************************************/


rule "KnowledgeDocument"
when
    $kd : KnowledgeDocument( $ext : externalData )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ex = helper.asIndividual( $ext );
    insert( helper.assertType( kd, "prr-sharp:HeDKnowledgeDocument" ) );
    insert( helper.assertType( ex, "prr:Variable" ) );
    insert( helper.assertObjectProperty( "prr:rulesetVariable", kd, ex ) );
    insert( helper.assertDataProperty( "prr:name", ex, "$contextData"  ) );
end


rule "KnowledgeDocument Rule"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule"  )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual r = helper.asIndividual( $meta );
    insert( helper.assertType( r, "prr:ProductionRule" ) );
    insert( helper.assertObjectProperty( "prr:contains", kd, r  ) );
end

/***********************************************************************************************/
/*  EXTERNAL DATA
/***********************************************************************************************/


rule "KnowledgeDocument Rule Variables"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $defs : externalData.deves )
    $rv : ExpressionDef( this memberOf $defs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rv = helper.asIndividual( "tns:Var_" + $name );
    OWLNamedIndividual type = helper.asIndividual( $type );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $cr.hashCode() );
    OWLNamedIndividual exprInSharp = helper.asIndividual( $cr );
    insert( helper.assertType( rv, "prr:RuleVariable" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleBoundRuleVariable", r, rv  ) );
    insert( helper.assertDataProperty( "prr:name", rv, $name  ) );
    insert( helper.assertObjectProperty( "prr-sharp:elementType", rv, helper.asIndividual( $type.toString() ) ) );
    insert( helper.assertObjectProperty( "prr:variableFilterExpression", rv, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, exprInSharp ) );
end


rule "Input Data Binding"
when
    $kd : KnowledgeDocument( $ext : externalData, $defs : externalData.deves )
    $rv : ExpressionDef( this memberOf $defs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType, $card : cardinality.value,
                           $codePath : codeProperty, $dataPath : dateProperty, $subjectPath : subjectProperty,
                           $codes : codes, $dates : dateRange, $subject : subject )
    Link( $codes, $codeInd ; )
then
    OWLNamedIndividual ext = helper.asIndividual( $ext );
    OWLNamedIndividual iter = helper.asIndividual( $cr );
    OWLNamedIndividual extVar = helper.asIndividual( "tns:ExtVar_" + $cr.hashCode() );
    OWLNamedIndividual innVar = helper.asIndividual( "tns:InnVar_" + $cr.hashCode() );

    insert( helper.assertType( iter, "single".equals( $card ) ? "ops:SingleIteratorExpression" : "ops:AggregateIteratorExpression" ) );

    insert( helper.assertObjectProperty( "ops:source", iter, extVar ) );
    insert( helper.assertObjectProperty( "ops:referredVariable", extVar, ext ) );

    insert( helper.assertType( innVar, "ops:Variable" ) );
    insert( helper.assertObjectProperty( "ops:iterator", iter, innVar ) );
    insert( helper.assertObjectProperty( "ops:type", innVar, helper.asIndividual( $type.toString() ) ) );




    if ( $codes != null || $dates != null || $subject != null ) {
        OWLNamedIndividual andRoot = helper.assertExpression( drools, "and", $cr );
        insert( helper.assertObjectProperty( "ops:filter", iter, andRoot ) );

        if ( $codes != null ) {
            OWLNamedIndividual codeEq = helper.assertExpression( drools, "in", $codePath );
            insert( helper.assertObjectProperty( "ops:hasOperand", andRoot, codeEq ) );

            OWLNamedIndividual leftProp = helper.assertPropertyChain( drools, $codePath, innVar, $type.getNamespaceURI() + "#" );
            insert( helper.assertObjectProperty( "ops:hasOperand", codeEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:hasOperand", codeEq, $codeInd ) );
        }
//        if ( $dates != null ) {
//            OWLNamedIndividual dateEq = helper.assertExpression( drools, "in", $datePath );
//            insert( helper.assertObjectProperty( "ops:hasOperand", andRoot, dateEq ) );
//
//            OWLNamedIndividual leftProp = helper.assertPropertyChain( drools, $datePath, innVar, $type.getNamespaceURI() + "#" );
//            insert( helper.assertObjectProperty( "ops:hasOperand", dateEq, leftProp ) );
//            insert( helper.assertObjectProperty( "ops:hasOperand", dateEq, $dateInd ) );
//        }
    }
end




/***********************************************************************************************/
/*  EXPRESSIONS
/***********************************************************************************************/



rule "ValueSet"
when
    $val : ValueSet( $id : id, $ver : version, $auth : authority )
then
    OWLNamedIndividual val = helper.asIndividual( $val );
    insert( helper.assertType( val, "prr-sharp:ValueSet" ) );
    if ( $id != null ) { insert( helper.assertDataProperty( "meta:artifactId", val, $id ) ); }
    if ( $ver != null ) { insert( helper.assertDataProperty( "meta:versionId", val, $ver ) ); }
    if ( $auth != null ) { insert( helper.assertDataProperty( "dcterms:description", val, $auth ) ); }
    insert( new Link( $val, val ) );
end


rule "Property"
when
    $pro : Property( $path : path, $src : source )
    Link( $src, $semSrc ; )
then
    //TODO
    OWLNamedIndividual ind = helper.assertPropertyChain( drools, $path, $semSrc, "vmr:" );
    insert( new Link( $pro, ind ) );
end


rule "IsEmpty"
when
    $ie : IsEmpty( $xp : operand )
    Link( $xp, $op ; )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "not-exists", $ie );
    insert( helper.assertObjectProperty( "ops:hasOperand", ind, $op ) );
    insert( new Link( $ie, ind ) );
end

rule "IsNotEmpty"
when
    $ie : IsNotEmpty( $xp : operand )
    Link( $xp, $op ; )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "exists", $ie );
    insert( helper.assertObjectProperty( "ops:hasOperand", ind, $op ) );
    insert( new Link( $ie, ind ) );
end


rule "ExpressionRef"
when
    $ref : ExpressionRef( $name : name )
then
    OWLNamedIndividual ind = helper.asIndividual( $ref );
    OWLNamedIndividual var = helper.asIndividual( "tns:Var_" + $name );

    insert( helper.assertType( ind, "ops:VariableExpression" ) );
    insert( helper.assertObjectProperty( "ops:referredVariable", ind, var ) );
    insert( new Link( $ref, ind ) );
end


rule "Or op"
when
    $or : Or( )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "or", $or );
    insert( new Link( $or, ind ) );
end

rule "Nary operands"
when
    $nx : NaryExpression( $ops : operands )
    Link( $nx, $ind ; )
    Link( $xp, $op ; exp memberOf $ops )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op ) );
end

rule "BiNary operands"
when
    $nx : BinaryExpression( $ops : operands )
    Link( $nx, $ind ; )
    Link( $xp, $op ; exp memberOf $ops )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op ) );
end

rule "And op"
when
    $and : And( )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "and", $and );
    insert( new Link( $and, ind ) );
end


rule "GreaterOrEqual"
when
    $geq : GreaterOrEqual( )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "geq", $geq );
    insert( new Link( $geq, ind ) );
end

rule "PQLiteral"
when
    $pq : PhysicalQuantityLiteral( )
then
    OWLNamedIndividual ind = helper.asIndividual( $pq );
    //TODO
    insert( new Link( $pq, ind ) );
end


rule "Str Concat"
when
    $con : Concat( )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "strcat", $con );
    insert( new Link( $con, ind ) );
end

rule "Coalesce"
when
    $coa : Coalesce( )
then
    OWLNamedIndividual ind = helper.assertExpression( drools, "coalesce", $coa );
    insert( new Link( $coa, ind ) );
end

rule "StringLiteral"
when
    $sl : StringLiteral( $val : value )
then
    OWLNamedIndividual ind = helper.asIndividual( $sl );
    insert( helper.assertType( ind, "ops:StringLiteral" ) );
    insert( helper.assertDataProperty( "ops:representation", ind, $val ) );

    insert( new Link( $sl, ind ) );
end









/***********************************************************************************************/
/*  LOCAL VARIABLES
/***********************************************************************************************/


rule "KnowledgeDocument Derived Rule Variables"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $defs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs, $name : name, $xp : expression )
    Link( $xp, $semXp ; )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rv = helper.asIndividual( "tns:Var_" + $name );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $xp.hashCode() );

    insert( helper.assertObjectProperty( "prr:productionRuleBoundRuleVariable", r, rv  ) );
    insert( helper.assertDataProperty( "prr:name", rv, $name  ) );
    insert( helper.assertObjectProperty( "prr:variableInitialExpression", rv, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $semXp ) );
end



/***********************************************************************************************/
/*  CONDITIONS
/***********************************************************************************************/


rule "Rule Conditions"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $cnds : conditions.conditions )
    $rc : Condition( this memberOf $cnds, $xp : logic  )
    Link( $xp, $sharpCond ; )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rc = helper.asIndividual( $rc );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $rc.hashCode() );

    insert( helper.assertType( rc, "prr:RuleCondition" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleCondition", r, rc  ) );
    insert( helper.assertObjectProperty( "prr:conditionRepresentation", rc, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $sharpCond ) );
end




/***********************************************************************************************/
/*  METADATA
/***********************************************************************************************/


rule "KnowledgeDocument Identifiers"
when
    $kd : KnowledgeDocument( $ids : metadata.identifiers.identifiers )
    $id : VersionedIdentifier( this memberOf $ids )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:artifactVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) );
end


rule "KnowledgeDocument Schema Identifiers"
when
    $kd : KnowledgeDocument( $id : metadata.schemaIdentifier )
          VersionedIdentifier( this == $id )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:schemaVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) );
end


rule "KnowledgeDocument Datamodels"
salience 1000
when
    $kd : KnowledgeDocument( $models : metadata.dataModels.modelReferences )
    $mr : ModelReference( this memberOf $models, $ref : referencedModel.value )
then
    helper.registerDataModel( $ref );

    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual mr = helper.asIndividual( $mr );
    OWLNamedIndividual rm = helper.urnAsIndividual( $ref );
    insert( helper.assertType( mr, "meta:DataModelRealization" ) );
    insert( helper.assertObjectProperty( "dcterms:references", kd, mr  ) );
    insert( helper.assertDataProperty( "meta:description", mr, $mr.getDescription().getValue()  ) );
    insert( helper.assertDataProperty( "dcterms:identifier", mr, $ref ) );
    insert( helper.assertObjectProperty( "meta:realizesInformation", mr, rm  ) );
end

rule "KnowledgeDocument Title"
when
    $kd : KnowledgeDocument( $title : metadata.title!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:title", kd, $title ) );
end

rule "KnowledgeDocument Description"
when
    $kd : KnowledgeDocument( $descr : metadata.description!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:description", kd, $descr ) );
end

rule "KnowledgeDocument Documentation"
when
    $kd : KnowledgeDocument( $doc : metadata.documentation )
    $dc : InlineResource( this == $doc, $descr : description.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual dc = helper.asIndividual( $dc );
    insert( helper.assertObjectProperty( "meta:documentation", kd, dc ) );
    insert( helper.assertDataProperty( "meta:content", dc, $dc.getContent().toString() ) );
end

rule "KnowledgeDocument Related Resource"
when
    $kd : KnowledgeDocument( $res : metadata.relatedResources.relatedResources )
    $rx : ResourceRelationshipReference( this memberOf $res, $rel : relationship.value, $related : resources.resources )
    $kr : KnowledgeResource( this memberOf $related )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual kr = helper.asIndividual( $kr );
    insert( helper.assertObjectProperty( "meta:" + $rel.substring(0,1).toLowerCase() + $rel.substring(1), kd, kr ) );
end


rule "KnowledgeResource Identifiers"
when
    $kd : KnowledgeResource( $id : identifiers!.identifier )
          VersionedIdentifier( this == $id )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:artifactVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    if ( $id.getVersion() != null ) { insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) ); }
end


rule "KnowledgeResource Title"
when
    $kd : KnowledgeResource( $title : title!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:title", kd, $title ) );
end

rule "KnowledgeResource Description"
when
    $kd : KnowledgeResource( $descr : description!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:description", kd, $descr ) );
end

rule "KnowledgeResource Citation"
when
    $kd : KnowledgeResource( $cit : citation!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:bibliographicCitation", kd, $cit ) );
end


rule "KnowledgeResource Location"
when
    $kd : KnowledgeResource( $loc : location!.value)
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual lc = helper.asIndividual( $kd.getLocation() );
    insert( helper.assertObjectProperty( "dcterms:spatial", kd, lc  ) );
    insert( helper.assertDataProperty( "meta:urlLocation", lc, $loc ) );
end



rule "KnowledgeDocument Supporting Evidence"
when
    $kd : KnowledgeDocument( $sup : metadata.supportingEvidence.evidences )
    $ev : Evidence( this memberOf $sup, $qual : qualityOfEvidence, $str : strengthOfRecommendation )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    insert( helper.assertType( ev, "meta:Evidence" ) );
    insert( helper.assertObjectProperty( "meta:supportingEvidence", kd, ev  ) );
    if ( $qual != null ) { helper.assertCD( drools, "meta:qualityOfEvidence", ev, $qual ); }
    if ( $qual != null ) { helper.assertCD( drools, "meta:strengthOfRecommendation", ev, $str ); }
end

rule "Evidence Resource"
when
    $ev : Evidence( $res : resources.resources )
    $kr : KnowledgeResource( this memberOf $res )
then
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    OWLNamedIndividual kr = helper.asIndividual( $kr );
    insert( helper.assertObjectProperty( "meta:supportingResource", ev, kr  ) );
end




rule "KnowledgeDocument Applicability"
when
    $kd : KnowledgeDocument( $app : metadata.applicability.coverages )
    $cv : Coverage( this memberOf $app, $focus : focus.value, $descr : description.value, $val : value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual cv = helper.asIndividual( $cv );
    insert( helper.assertType( cv, "meta:ClinicalCoverage" ) );
    insert( helper.assertObjectProperty( "meta:applicability", kd, cv ) );
    insert( helper.assertDataProperty( "meta:coverageType", cv, $focus ) );
    insert( helper.assertDataProperty( "dcterms:description", cv, $descr ) );
    helper.assertCD( drools, "meta:coveredConcept", cv, $val );
end


rule "KnowledgeDocument KeyTerms"
when
    $kd : KnowledgeDocument( $keys : metadata.keyTerms.terms )
    $cd : CD( this memberOf $keys )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    helper.assertCD( drools, "meta:keyTerm", kd, $cd );
end



rule "KnowledgeDocument Status"
when
    $kd : KnowledgeDocument( $status : metadata.status!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "meta:status", kd, $status ) );
end

rule "KnowledgeDocument History"
when
    $kd : KnowledgeDocument( $evs : metadata.eventHistory.artifactLifeCycleEvents )
    $ev : ArtifactLifeCycleEvent( this memberOf $evs, $date : eventDateTime.value, $type : eventType.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "meta:" + $type.substring(0,1).toLowerCase() + $type.substring(1), kd, $date ) );
end


rule "KnowledgeDocument Contributors"
when
    $kd : KnowledgeDocument( $contrs : metadata.contributions.contributions )
    $ct : Contribution( this memberOf $contrs, $role : role.value, $actor : contributor )
    $ac : Party( this == $actor )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertObjectProperty( "dcterms:contributor", kd, ac ) );
end

rule "KnowledgeDocument Publishers"
when
    $kd : KnowledgeDocument( $pubs : metadata.publishers.publishers )
    $ac : Party( this memberOf $pubs )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertObjectProperty( "dcterms:publisher", kd, ac ) );
end

rule "KnowledgeDocument Rights"
when
    $kd : KnowledgeDocument( $rights : metadata.usageTerms.rightsDeclarations )
    $rd : RightsDeclaration( this memberOf $rights )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    insert( helper.assertType( rd, "meta:RightsDeclaration" ) );
    insert( helper.assertObjectProperty( "meta:usageTerms", kd, rd ) );
end

rule "Actor Contact"
when
    $ac : Party( $contacts : contacts.contacts )
          TEL( this memberOf $contacts, $contact : value != null )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertDataProperty( "meta:contactInformation", ac, $contact ) );
end

rule "Actor Address"
when
    $ac : Party( $addrs : addresses.addresses )
          AD( this memberOf $addrs, $parts : parts )
          accumulate( ADXP( this memberOf $parts, $type : type, $val : value != null ),
                      $list : collectList( $type + "=" + $val ) )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertDataProperty( "meta:address", ac, $list.toString() ) );
end


rule "RightsDeclaration Owner"
when
    $rd : RightsDeclaration( $holder : rightsHolder )
    $rh : Party( this == $holder )
then
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    OWLNamedIndividual rh = helper.asIndividual( $rh );
    insert( helper.assertObjectProperty( "dcterms:rightsHolder", rd, rh ) );
end

rule "RightsDeclaration Rights"
when
    $rd : RightsDeclaration( $rights : assertedRights, $val: assertedRights!.value )
then
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    OWLNamedIndividual ar = helper.asIndividual( $rights );
    insert( helper.assertType( ar, "dcterms:RightsStatement" ) );
    insert( helper.assertObjectProperty( "dcterms:accessRights", rd, ar ) );
    insert( helper.assertDataProperty( "dcterms:licenceTerms", ar, $val ) );
end


/***********************************************************************************************/
/*  ACTIONS
/***********************************************************************************************/


rule "Rule Actions"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $acts : actionGroup )
    $ag : ActionGroup( this == $acts )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual ra = helper.asIndividual( $ag );

    insert( helper.assertType( ra, "act:CompositeAction" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleAction", r, ra  ) );
end

rule "Action Group Nesting"
when
    $a1 : ActionGroup( $subs : subElements.simpleActionsAndActionGroupsAndActionGroupReferences )
    $a2 : ActionGroup( this memberOf $subs )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    OWLNamedIndividual a2 = helper.asIndividual( $a2 );

    insert( helper.assertObjectProperty( "act:memberAction", a1, a2  ) );
end

rule "Action Group Nesting Simple"
when
    $a1 : ActionGroup( $subs : subElements.simpleActionsAndActionGroupsAndActionGroupReferences )
    $a2 : AtomicAction( this memberOf $subs )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    OWLNamedIndividual a2 = helper.asIndividual( $a2 );

    insert( helper.assertObjectProperty( "act:memberAction", a1, a2  ) );
end

rule "MessageAction"
when
    $am : MessageAction( $msg : message )
    Link( $msg, $mexpr ; )
then
    OWLNamedIndividual msg = helper.asIndividual( $am );
    insert( helper.assertObjectProperty( "prr-sharp:actionSentence", msg, $mexpr  ) );
end





