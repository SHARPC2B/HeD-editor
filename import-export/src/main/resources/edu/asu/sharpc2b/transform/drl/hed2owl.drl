package edu.asu.sharpc2b;

import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.vocab.*;
import uk.ac.manchester.cs.owl.owlapi.*;

import edu.asu.sharpc2b.transform.HeD2OwlHelper;

import org.hl7.knowledgeartifact.r1.*;
import org.hl7.cdsdt.r2.*;

import javax.xml.bind.*;
import java.util.Set;
import java.util.HashSet;

global String tns;
global HeD2OwlHelper helper;


/***********************************************************************************************/
/*  SERVICE
/***********************************************************************************************/

declare Link
    exp : Object
    ind : OWLNamedIndividual
end

rule "Init"
when
then
    insert( new Link( null, null ) );
end


rule "Build ontology"
salience -999
when
    accumulate( $ax : OWLAxiom( ),
                $set : collectSet( $ax ) )
then
    helper.buildOntology( $set );
end



/***********************************************************************************************/
/*  DOCUMENT
/***********************************************************************************************/


rule "Process KnowledgeDocument"
when
    $kd : KnowledgeDocument( $ext : externalData != null )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ex = helper.asIndividual( $ext );
    insert( helper.assertType( kd, "prr-sharp:HeDKnowledgeDocument" ) );
    insert( helper.assertType( ex, "prr:Variable" ) );
    insert( helper.assertObjectProperty( "prr:rulesetVariable", kd, ex ) );
    insert( helper.assertDataProperty( "prr:name", ex, "$contextData"  ) );
end


rule "KnowledgeDocument Rule"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule"  )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual r = helper.asIndividual( $meta );
    insert( helper.assertType( r, "prr:ProductionRule" ) );
    insert( helper.assertObjectProperty( "prr:contains", kd, r  ) );
end

/***********************************************************************************************/
/*  EXTERNAL DATA
/***********************************************************************************************/


rule "KnowledgeDocument Rule Variables"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $ext : externalData, $defs : externalData.deves, $xprs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType, $initial : isInitial, $descr : description, $card : cardinality.value )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rv = helper.asIndividual( "tns:Var_" + $name );
    OWLNamedIndividual type = helper.asIndividual( $type );
    OWLNamedIndividual expr = helper.asIndividual( "tns:prrExpr_" + $cr.hashCode() );
    OWLNamedIndividual ext = helper.asIndividual( $ext );
    OWLNamedIndividual iter = helper.asIndividual( "tns:Iter_" + $cr.hashCode() );
    OWLNamedIndividual req = helper.asIndividual( $cr );
    OWLNamedIndividual innVar = helper.asIndividual( "tns:InnVar_" + $cr.hashCode() );

    insert( helper.assertType( rv, "ops:Variable" ) );
    insert( helper.assertType( type, "ops:DomainClass" ) );

    insert( helper.assertObjectProperty( "prr:productionRuleBoundRuleVariable", r, rv  ) );
    insert( helper.assertDataProperty( "prr:name", rv, $name  ) );
    insert( helper.assertDataProperty( "skos:notation", type, $type.toString() ) );
    insert( helper.assertObjectProperty( "prr-sharp:elementType", rv, type ) );
    insert( helper.assertObjectProperty( "prr:variableFilterExpression", rv, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, iter ) );

    insert( helper.assertType( iter, "Single".equals( $card ) ? "ops:SingleIteratorExpression" : "ops:AggregateIteratorExpression" ) );
    insert( helper.assertType( ext, "prr:Variable" ) );
    insert( helper.assertType( innVar, "ops:Variable" ) );


    if ( $defs.contains( $rv ) ) {
        insert( helper.assertObjectProperty( "ops:source", iter, req ) );
        insert( helper.assertDataProperty( "prr:name", ext, "$contextData"  ) );
    }

    insert( helper.assertObjectProperty( "ops:iterator", iter, innVar ) );
    //TODO - lowest priority : add source that gets the elements of type datatype

    insert( helper.assertDataProperty( "a:scope", req, "external"  ) );
end





/***********************************************************************************************/
/*  LOCAL VARIABLES
/***********************************************************************************************/


rule "KnowledgeDocument Derived Rule Variables"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $defs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs, $name : name, $xp : expression )
    Link( $xp, $semXp ; )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rv = helper.asIndividual( "tns:Var_" + $name );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $xp.hashCode() );

    insert( helper.assertObjectProperty( "prr:productionRuleBoundRuleVariable", r, rv  ) );
    insert( helper.assertDataProperty( "prr:name", rv, $name  ) );
    insert( helper.assertObjectProperty( "prr:variableFilterExpression", rv, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $semXp ) );
end



/***********************************************************************************************/
/*  CONDITIONS
/***********************************************************************************************/


rule "Rule Conditions"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $cnds : conditions.conditions )
    $rc : Condition( this memberOf $cnds, $xp : logic  )
    Link( $xp, $sharpCond ; )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rc = helper.asIndividual( $rc );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $rc.hashCode() );

    insert( helper.assertType( rc, "prr:RuleCondition" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleCondition", r, rc  ) );
    insert( helper.assertObjectProperty( "prr:conditionRepresentation", rc, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $sharpCond ) );
end




/***********************************************************************************************/
/*  METADATA
/***********************************************************************************************/


rule "KnowledgeDocument Identifiers"
when
    $kd : KnowledgeDocument( $ids : metadata.identifiers.identifiers )
    $id : VersionedIdentifier( this memberOf $ids )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:artifactVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) );
end


rule "KnowledgeDocument Schema Identifiers"
when
    $kd : KnowledgeDocument( $id : metadata.schemaIdentifier )
          VersionedIdentifier( this == $id )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:schemaVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) );
end


rule "KnowledgeDocument Datamodels"
salience 1000
when
    $kd : KnowledgeDocument( $models : metadata.dataModels.modelReferences )
    $mr : ModelReference( this memberOf $models, $ref : referencedModel.value )
then
    helper.registerDataModel( $ref );

    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual mr = helper.asIndividual( $mr );
    OWLNamedIndividual rm = helper.urnAsIndividual( $ref );
    insert( helper.assertType( mr, "meta:DataModelRealization" ) );
    insert( helper.assertObjectProperty( "dcterms:references", kd, mr  ) );
    insert( helper.assertDataProperty( "dcterms:description", mr, $mr.getDescription().getValue()  ) );
    insert( helper.assertDataProperty( "dcterms:identifier", mr, $ref ) );
    insert( helper.assertObjectProperty( "meta:realizesInformation", mr, rm  ) );
end

rule "KnowledgeDocument Title"
when
    $kd : KnowledgeDocument( $title : metadata.title!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:title", kd, $title ) );
end

rule "KnowledgeDocument Description"
when
    $kd : KnowledgeDocument( $descr : metadata.description!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:description", kd, $descr ) );
end

rule "KnowledgeDocument Documentation"
when
    $kd : KnowledgeDocument( $doc : metadata.documentation )
    $dc : InlineResource( this == $doc, $descr : description.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual dc = helper.asIndividual( $dc );
    insert( helper.assertObjectProperty( "meta:documentation", kd, dc ) );
    if ( $dc.getContent() != null ) {
        insert( helper.assertDataProperty( "meta:content", dc, $dc.getContent().toString() ) );
    }
end

rule "KnowledgeDocument Related Resource"
when
    $kd : KnowledgeDocument( $res : metadata.relatedResources.relatedResources )
    $rx : ResourceRelationshipReference( this memberOf $res, $rel : relationship.value, $related : resources.resources )
    $kr : KnowledgeResource( this memberOf $related )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual kr = helper.asIndividual( $kr );
    insert( helper.assertObjectProperty( "meta:" + $rel.substring(0,1).toLowerCase() + $rel.substring(1), kd, kr ) );
end


rule "KnowledgeResource Identifiers"
when
    $kd : KnowledgeResource( $id : identifiers!.identifier )
          VersionedIdentifier( this == $id )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:artifactVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    if ( $id.getVersion() != null ) { insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) ); }
end


rule "KnowledgeResource Title"
when
    $kd : KnowledgeResource( $title : title!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:title", kd, $title ) );
end

rule "KnowledgeResource Description"
when
    $kd : KnowledgeResource( $descr : description!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:description", kd, $descr ) );
end

rule "KnowledgeResource Citation"
when
    $kd : KnowledgeResource( $cit : citation!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:bibliographicCitation", kd, $cit ) );
end


rule "KnowledgeResource Location"
when
    $kd : KnowledgeResource( $loc : location!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual lc = helper.asIndividual( $kd.getLocation() );
    insert( helper.assertType( lc, "meta:Site" ) );
    insert( helper.assertObjectProperty( "dcterms:spatial", kd, lc  ) );
    insert( helper.assertDataProperty( "meta:urlLocation", lc, $loc ) );
end



rule "KnowledgeDocument Supporting Evidence"
when
    $kd : KnowledgeDocument( $sup : metadata!.supportingEvidence!.evidences )
    $ev : Evidence( this memberOf $sup, $qual : qualityOfEvidence, $str : strengthOfRecommendation )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    insert( helper.assertType( ev, "meta:Evidence" ) );
    insert( helper.assertObjectProperty( "meta:supportingEvidence", kd, ev  ) );
    if ( $qual != null ) { helper.assertCD( drools, "meta:qualityOfEvidence", ev, $qual ); }
    if ( $str != null ) { helper.assertCD( drools, "meta:strengthOfRecommendation", ev, $str ); }
end

rule "Evidence Resource"
when
    $ev : Evidence( $res : resources.resources )
    $kr : KnowledgeResource( this memberOf $res )
then
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    OWLNamedIndividual kr = helper.asIndividual( $kr );
    insert( helper.assertObjectProperty( "meta:supportingResource", ev, kr  ) );
end




rule "KnowledgeDocument Applicability"
when
    $kd : KnowledgeDocument( $app : metadata.applicability.coverages )
    $cv : Coverage( this memberOf $app, $focus : focus.value, $descr : description, $val : value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual cv = helper.asIndividual( $cv );
    insert( helper.assertType( cv, "meta:ClinicalCoverage" ) );
    insert( helper.assertObjectProperty( "meta:applicability", kd, cv ) );
    insert( helper.assertDataProperty( "meta:coverageType", cv, $focus ) );
    if ( $descr != null ) {
        insert( helper.assertDataProperty( "dcterms:description", cv, $descr.getValue() ) );
    }
    helper.assertCD( drools, "meta:coveredConcept", cv, $val );
end


rule "KnowledgeDocument KeyTerms"
when
    $kd : KnowledgeDocument( $keys : metadata!.keyTerms!.terms )
    $cd : CD( this memberOf $keys )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    helper.assertCD( drools, "meta:keyTerm", kd, $cd );
end



rule "KnowledgeDocument Status"
when
    $kd : KnowledgeDocument( $status : metadata.status!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "meta:status", kd, $status ) );
end

rule "KnowledgeDocument History"
when
    $kd : KnowledgeDocument( $evs : metadata.eventHistory.artifactLifeCycleEvents )
    $ev : ArtifactLifeCycleEvent( this memberOf $evs, $date : eventDateTime.value, $type : eventType.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty(
                ( "Created".equals( $type ) ? "dcterms:" : "meta:" )
                + $type.substring(0,1).toLowerCase() + $type.substring(1),
            kd,
            $date ) );
end


rule "KnowledgeDocument Contributors"
when
    $kd : KnowledgeDocument( $contrs : metadata.contributions.contributions )
    $ct : Contribution( this memberOf $contrs, $role : role.value, $actor : contributor )
    $ac : Party( this == $actor )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertType( ac, $ac instanceof Person ? "DUL:SocialPerson" : "DUL:Organization" ) );
    if ( $role != null ) {
        insert( helper.assertObjectProperty( "meta:" + $role.toLowerCase(), kd, ac ) );
    }
end

rule "KnowledgeDocument Publishers"
when
    $kd : KnowledgeDocument( $pubs : metadata!.publishers!.publishers )
    $ac : Party( this memberOf $pubs )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertType( ac, $ac instanceof Person ? "DUL:SocialPerson" : "DUL:Organization" ) );
    insert( helper.assertObjectProperty( "dcterms:publisher", kd, ac ) );
end

rule "KnowledgeDocument Rights"
when
    $kd : KnowledgeDocument( $rights : metadata!.usageTerms!.rightsDeclarations )
    $rd : RightsDeclaration( this memberOf $rights )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    insert( helper.assertType( rd, "meta:RightsDeclaration" ) );
    insert( helper.assertObjectProperty( "meta:usageTerms", kd, rd ) );
end

rule "Actor Contact"
when
    $ac : Party( $contacts : contacts!.contacts )
          TEL( this memberOf $contacts, $contact : value != null )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertDataProperty( "meta:contactInformation", ac, $contact ) );
end

rule "Actor Affiliation"
when
    $ac : Person( $affiliation : affiliation )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    OWLNamedIndividual aff = helper.asIndividual( $affiliation );
    insert( helper.assertType( aff, "DUL:Organization" ) );
    insert( helper.assertObjectProperty( "DUL:actsThrough", ac, aff ) );
end

rule "Actor Address"
when
    $ac : Party( $addrs : addresses.addresses )
          AD( this memberOf $addrs, $parts : parts )
          accumulate( ADXP( this memberOf $parts, $type : type, $val : value != null ),
                      $list : collectList( $type + "=" + $val ) )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertDataProperty( "meta:address", ac, $list.toString() ) );
end

rule "Organization Name"
when
    $og : Organization( $name : name )
then
    OWLNamedIndividual ac = helper.asIndividual( $og );
    insert( helper.assertDataProperty( "meta:agentName", ac, $name.toString() ) );
end

rule "Person Name"
when
    $px : Person( $name : name )
          EN( this == $name, $parts : parts )
          accumulate( ENXP( this memberOf $parts, $val : value ),
                      $list : collectList( $val ) )
then
    OWLNamedIndividual ac = helper.asIndividual( $px );
    insert( helper.assertDataProperty( "meta:agentName", ac, $list.toString() ) );
end



rule "RightsDeclaration Owner"
when
    $rd : RightsDeclaration( $holder : rightsHolder )
    $rh : Party( this == $holder )
then
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    OWLNamedIndividual rh = helper.asIndividual( $rh );
    insert( helper.assertObjectProperty( "dcterms:rightsHolder", rd, rh ) );
end

rule "RightsDeclaration Rights"
when
    $rd : RightsDeclaration( $rights : assertedRights, $val: assertedRights!.value )
then
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    OWLNamedIndividual ar = helper.asIndividual( $rights );
    insert( helper.assertType( ar, "dcterms:RightsStatement" ) );
    insert( helper.assertObjectProperty( "dcterms:accessRights", rd, ar ) );
    insert( helper.assertDataProperty( "dcterms:licenceTerms", ar, $val ) );
end










/***********************************************************************************************/
/*  TRIGGERS
/***********************************************************************************************/


rule "Rule Triggers"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $trigs : triggers!.triggers )
    $tr : Trigger( this memberOf $trigs, $type : eventType, $expr : expression )
    Link( $expr, $xp ; )
then
    OWLNamedIndividual trig = helper.asIndividual( $tr );
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual expr = helper.asIndividual( "tns:prrExpr_" + $tr.hashCode() );

    insert( helper.assertType( expr, "prr:Expression" ) );
    insert( helper.assertType( trig, "DataEvent".equals( $type ) ? "prr-sharp:DataRuleTrigger" : "prr-sharp:TemporalRuleTrigger" ) );

    insert( helper.assertObjectProperty( "prr-sharp:productionRuleTrigger", r, trig  ) );
    insert( helper.assertObjectProperty( "prr-sharp:triggerExpression", trig, expr  ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $xp ) );


end



/***********************************************************************************************/
/*  EXPRESSIONS
/***********************************************************************************************/







rule "Expression Type"
when
    $expr : Expression()
then
    OWLNamedIndividual exp = helper.assertExpression( drools, $expr.getClass().getSimpleName(), $expr );
    insert( new Link( $expr, exp ) );
end

rule "Expression Description"
when
    $expr : Expression( $descr : description != null )
then
    OWLNamedIndividual exp = helper.asIndividual( $expr );
    insert( helper.assertDataProperty( "ops:exprDescription", exp, $descr ) );
end

rule "Process ExpressionRef"
when
    $ref : ExpressionRef( $name : name )
    Link( $ref, $exp ; )
then
    OWLNamedIndividual var = helper.asIndividual( "tns:Var_" + $name );
    insert( helper.assertType( var, "ops:Variable" ) );
    insert( helper.assertType( $exp, "ops:VariableExpression" ) );

    insert( helper.assertObjectProperty( "ops:referredVariable", $exp, var ) );
end

rule "Process ObjectExpression Properties"
// not an expr in HeD, so we need to fix it here
when
    $new : ObjectExpression( $props : properties )
    $set : PropertyExpression( this memberOf $props, $exp : value, $name : name )
    Link( $new, $obj ; )
    Link( $exp, $setXp ; )
then
    OWLNamedIndividual setter = helper.asIndividual( $set );

    insert( helper.assertType( setter, "ops:PropertySetExpression" ) );
    insert( helper.assertObjectProperty( "a:property", $obj, setter ) );

    OWLNamedIndividual type = helper.asIndividual( "tns:DomainProperty_" + $name.hashCode() );
    insert( new Link( $name, type ) );
    helper.assertPropertyChain( drools, $name, type, "vmr:" );

    insert( helper.assertObjectProperty( "ops:property", setter, type ) );
    insert( helper.assertObjectProperty( "ops:value", setter, $setXp ) );
end

rule "Process As Type"
salience 100
when
    $as : As( $type : asType )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainClass_" + $type.hashCode() );
    insert( new Link( $type, type ) );
    insert( helper.assertType( type, "ops:DomainClassExpression" ) );
    OWLNamedIndividual cd = helper.asIndividual( "tns:CD_" + new Object().hashCode() );
    insert( helper.assertObjectProperty( "ops:hasCode", type, cd ) );
    insert( helper.assertDataProperty( "skos-ext:code", cd, $type.toString() ) );
end

rule "Process Null Type"
when
    $as : Null( $type : valueType )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainClass_" + $type.hashCode() );
    insert( new Link( $type, type ) );
    insert( helper.assertType( type, "ops:DomainClassExpression" ) );
    OWLNamedIndividual cd = helper.asIndividual( "tns:CD_" + new Object().hashCode() );
    insert( helper.assertObjectProperty( "ops:hasCode", type, cd ) );
    insert( helper.assertDataProperty( "skos-ext:code", cd, $type.toString() ) );
end


rule "Process ObjectExpression Type"
when
    $new : ObjectExpression( $type : objectType )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainClass_" + $type.hashCode() );
    insert( new Link( $type, type ) );
    insert( helper.assertType( type, "ops:DomainClassExpression" ) );
    OWLNamedIndividual cd = helper.asIndividual( "tns:CD_" + new Object().hashCode() );
    insert( helper.assertObjectProperty( "ops:hasCode", type, cd ) );
    insert( helper.assertDataProperty( "skos-ext:code", cd, $type.toString() ) );
end

rule "Expression Property DomainClass "
when
    $xp : Property( $path : path )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainProperty_" + $path.hashCode() );
    insert( new Link( $path, type ) );
    helper.assertPropertyChain( drools, $path, type, "vmr:" );
end

rule "CaseItem Type "
when
    $ci : CaseItem( )
then
    OWLNamedIndividual item = helper.asIndividual( "tns:CaseItem" + $ci.hashCode() );
    insert( helper.assertType( item, "a:CaseItemExpression" ) );
    insert( new Link( $ci, item ) );
end


rule "Clinical Request DomainClass "
when
    $xp : ClinicalRequest( $type : dataType )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainClass_" + $type.hashCode() );
    insert( new Link( $type, type ) );
    OWLNamedIndividual cd = helper.asIndividual( "tns:CD_" + new Object().hashCode() );
    insert( helper.assertType( type, "ops:DomainClassExpression" ) );
    insert( helper.assertObjectProperty( "ops:hasCode", type, cd ) );
    insert( helper.assertDataProperty( "skos-ext:code", cd, $type.toString() ) );
end

rule "Clinical Request Code Property "
when
    $xp : ClinicalRequest( $code : codeProperty != null )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainProperty_" + $code.hashCode() );
    insert( new Link( $code, type ) );
    helper.assertPropertyChain( drools, $code, type, "vmr:" );
end

rule "Clinical Request Date Property "
when
    $xp : ClinicalRequest( $date : dateProperty != null )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainProperty_" + $date.hashCode() );
    insert( new Link( $date, type ) );
    helper.assertPropertyChain( drools, $date, type, "vmr:" );
end

rule "Clinical Request Subject Property "
when
    $xp : ClinicalRequest( $sub : subjectProperty != null )
then
    OWLNamedIndividual type = helper.asIndividual( "tns:DomainProperty_" + $sub.hashCode() );
    insert( new Link( $sub, type ) );
    helper.assertPropertyChain( drools, $sub, type, "vmr:" );
end




/***********************************************************************************************/
/*  LITERALS
/***********************************************************************************************/





    rule "Literal PQ"
    when
        $xp : PQ(  _unit : unit , _value : value  )
    then
        OWLNamedIndividual type = helper.asIndividual( "tns:PQ_" + $xp.hashCode() );
        insert( new Link( $xp, type ) );
            insert( helper.assertType( type, "a:PhysicalQuantityLiteralExpression" ) );
            helper.assertNullSafeDataProperty( drools, "a:unit", type, "" + _unit, "xsd:string" );
            helper.assertNullSafeDataProperty( drools, "a:value_double", type, "" + _value, "xsd:double" );

    end

    declare RTO
    @typesafe( false )
    end

    rule "Literal RTO"
    when
        $xp : RTO(  _num : numerator.value , _den : denominator.value  )
    then
        OWLNamedIndividual type = helper.asIndividual( "tns:RTO_" + $xp.hashCode() );
        insert( new Link( $xp, type ) );
            insert( helper.assertType( type, "a:RatioLiteralExpression" ) );
            helper.assertNullSafeDataProperty( drools, "a:numerator", type, "" + _num, "xsd:double" );
            helper.assertNullSafeDataProperty( drools, "a:denominator", type, "" + _den, "xsd:double" );

    end


    rule "Literal INT"
    when
        $xp : INT( _value : value )
    then
        OWLNamedIndividual type = helper.asIndividual( "tns:INT_" + $xp.hashCode() );
        insert( new Link( $xp, type ) );
            insert( helper.assertType( type, "a:IntegerLiteralExpression" ) );
            helper.assertNullSafeDataProperty( drools, "a:value", type, "" + _value, "xsd:int" );
    end








/***********************************************************************************************/
/*  ACTIONS
/***********************************************************************************************/


rule "Rule Actions"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $acts : actionGroup )
    $ag : ActionGroup( this == $acts )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual ra = helper.asIndividual( $ag );

    insert( helper.assertType( ra, "act:CompositeAction" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleAction", r, ra  ) );
end

rule "Action Group Nesting"
when
    $a1 : ActionGroup( $subs : subElements.simpleActionsAndActionGroupsAndActionGroupReferences )
    $a2 : ActionGroup( this memberOf $subs )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    OWLNamedIndividual a2 = helper.asIndividual( $a2 );

    insert( helper.assertType( a2, "act:CompositeAction" ) );
    insert( helper.assertObjectProperty( "act:memberAction", a1, a2  ) );
end

rule "Action Group Nesting Simple"
when
    $a1 : ActionGroup( $subs : subElements.simpleActionsAndActionGroupsAndActionGroupReferences )
    $a2 : AtomicAction( this memberOf $subs )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    OWLNamedIndividual a2 = helper.asIndividual( $a2 );

    insert( helper.assertObjectProperty( "act:memberAction", a1, a2  ) );
end

rule "Action Group Title"
when
    $a1 : ActionGroup( $title : title!.value )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    insert( helper.assertDataProperty( "dcterms:title", a1, $title  ) );
end

rule "Action Group Description"
when
    $a1 : ActionGroup( $descr : description!.value )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    insert( helper.assertDataProperty( "dcterms:description", a1, $descr  ) );
end

rule "Action Group Selection Behavior"
when
    $a1 : ActionGroup( behaviors != null, $bevs : behaviors.behaviors )
    GroupSelectionBehavior( this memberOf $bevs, $bhv : value )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    insert( helper.assertDataProperty( "act:groupSelection", a1, $bhv  ) );
end


rule "Action Supporting Evidence"
when
    $kd : ActionBase( $sup : supportingEvidence!.evidences )
    $ev : Evidence( this memberOf $sup, $qual : qualityOfEvidence, $str : strengthOfRecommendation )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    insert( helper.assertType( ev, "meta:Evidence" ) );
    insert( helper.assertObjectProperty( "meta:supportingEvidence", kd, ev  ) );
    if ( $qual != null ) { helper.assertCD( drools, "meta:qualityOfEvidence", ev, $qual ); }
    if ( $str != null ) { helper.assertCD( drools, "meta:strengthOfRecommendation", ev, $str ); }
end


rule "Create Action"
when
    $ca : CreateAction( $act : actionSentence )
    Link( $act, $actInd ; )
then
    OWLNamedIndividual ca = helper.asIndividual( $ca );
    OWLNamedIndividual expr = helper.asIndividual( "tns:prrExpr_" + $ca.hashCode() );

    insert( helper.assertType( ca, "act:CreateAction" ) );
    insert( helper.assertType( expr, "prr:Expression" ) );

    insert( helper.assertObjectProperty( "prr:actionExpression", ca, expr  ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $actInd ) );
end

