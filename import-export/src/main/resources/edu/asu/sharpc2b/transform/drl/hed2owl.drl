package edu.asu.sharpc2b;

import org.semanticweb.owlapi.model.*;
import org.semanticweb.owlapi.vocab.*;
import uk.ac.manchester.cs.owl.owlapi.*;

import edu.asu.sharpc2b.transform.HeD2OwlHelper;

import org.hl7.knowledgeartifact.r1.*;
import org.hl7.cdsdt.r2.*;

import javax.xml.bind.*;
import java.util.Set;
import java.util.HashSet;

global String tns;
global HeD2OwlHelper helper;


/***********************************************************************************************/
/*  SERVICE
/***********************************************************************************************/

declare Link
    exp : Expression
    ind : OWLNamedIndividual
end

rule "Init"
when
then
    insert( new Link( null, null ) );
end


rule "Build ontology"
salience -999
when
    accumulate( $ax : OWLAxiom( ),
                $set : collectSet( $ax ) )
then
    helper.buildOntology( $set );
end



/***********************************************************************************************/
/*  DOCUMENT
/***********************************************************************************************/


rule "Process KnowledgeDocument"
when
    $kd : KnowledgeDocument( $ext : externalData != null )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ex = helper.asIndividual( $ext );
    insert( helper.assertType( kd, "prr-sharp:HeDKnowledgeDocument" ) );
    insert( helper.assertType( ex, "prr:Variable" ) );
    insert( helper.assertObjectProperty( "prr:rulesetVariable", kd, ex ) );
    insert( helper.assertDataProperty( "prr:name", ex, "$contextData"  ) );
end


rule "KnowledgeDocument Rule"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule"  )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual r = helper.asIndividual( $meta );
    insert( helper.assertType( r, "prr:ProductionRule" ) );
    insert( helper.assertObjectProperty( "prr:contains", kd, r  ) );
end

/***********************************************************************************************/
/*  EXTERNAL DATA
/***********************************************************************************************/


rule "KnowledgeDocument Rule Variables"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $ext : externalData, $defs : externalData.deves, $xprs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs || this memberOf $xprs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType, $initial : isInitial, $descr : description, $card : cardinality.value )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rv = helper.asIndividual( "tns:Var_" + $name );
    OWLNamedIndividual type = helper.asIndividual( $type );
    OWLNamedIndividual expr = helper.asIndividual( "tns:prrExpr_" + $cr.hashCode() );
    OWLNamedIndividual ext = helper.asIndividual( $ext );
    OWLNamedIndividual iter = helper.asExpressionIndividual( "ClinicalRequest", $cr );
    OWLNamedIndividual extVar = helper.asIndividual( "tns:ExtVar_" + $cr.hashCode() );
    OWLNamedIndividual innVar = helper.asIndividual( "tns:InnVar_" + $cr.hashCode() );

    insert( helper.assertType( rv, "prr:RuleVariable" ) );
    insert( helper.assertType( type, "ops:DomainClass" ) );

    insert( helper.assertObjectProperty( "prr:productionRuleBoundRuleVariable", r, rv  ) );
    insert( helper.assertDataProperty( "prr:name", rv, $name  ) );
    insert( helper.assertDataProperty( "skos:notation", type, $type.toString() ) );
    insert( helper.assertObjectProperty( "prr-sharp:elementType", rv, type ) );
    insert( helper.assertObjectProperty( "prr:variableFilterExpression", rv, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, iter ) );

    insert( helper.assertType( iter, "Single".equals( $card ) ? "ops:SingleIteratorExpression" : "ops:AggregateIteratorExpression" ) );
    insert( helper.assertType( extVar, "ops:VariableExpression" ) );
    insert( helper.assertType( ext, "prr:Variable" ) );
    insert( helper.assertType( innVar, "ops:Variable" ) );


    if ( $defs.contains( $rv ) ) {
        insert( helper.assertObjectProperty( "ops:source", iter, extVar ) );
        insert( helper.assertObjectProperty( "ops:referredVariable", extVar, ext ) );
        insert( helper.assertDataProperty( "prr:name", ext, "$contextData"  ) );
    }

    insert( helper.assertObjectProperty( "ops:iterator", iter, innVar ) );
    //TODO - lowest priority : add source that gets the elements of type datatype

end


rule "Input Data Binding - Codes"
when
    $kd : KnowledgeDocument( $ext : externalData, $defs : externalData.deves, $xprs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs || this memberOf $xprs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType, $card : cardinality.value,
                           $codePath : codeProperty, $dataPath : dateProperty, $subjectPath : subjectProperty,
                           $codes : codes != null, $dates : dateRange, $subject : subject )
    Link( $codes, $codeInd ; )
then
    OWLNamedIndividual iter = helper.asExpressionIndividual( "ClinicalRequest", $cr );
    OWLNamedIndividual innVar = helper.asIndividual( "tns:InnVar_" + $cr.hashCode() );

        OWLNamedIndividual andRoot = helper.assertExpression( drools, "And", $cr );
        insert( helper.assertObjectProperty( "ops:body", iter, andRoot ) );

            //OWLNamedIndividual codeEq = helper.assertExpression( drools, "In", $codePath );
            OWLNamedIndividual codeEq = helper.assertExpression( drools, "Or", $codePath );

            insert( helper.assertObjectProperty( "ops:firstOperand", andRoot, codeEq ) );

            OWLNamedIndividual leftProp = helper.assertPropertyChain( drools, $codePath, innVar, $type.getNamespaceURI() + "#" );

            insert( helper.assertObjectProperty( "ops:hasOperand", codeEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:firstOperand", codeEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:hasOperand", codeEq, $codeInd ) );
            insert( helper.assertObjectProperty( "ops:secondOperand", codeEq, $codeInd ) );
end

rule "Input Data Binding - Dates"
when
    $kd : KnowledgeDocument( $ext : externalData, $defs : externalData.deves, $xprs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs || this memberOf $xprs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType, $card : cardinality.value,
                           $codePath : codeProperty, $datePath : dateProperty, $subjectPath : subjectProperty,
                           $codes : codes, $dates : dateRange != null, $subject : subject )
    Link( $dates, $dateInd ; )
then
    OWLNamedIndividual iter = helper.asExpressionIndividual( "ClinicalRequest", $cr );
    OWLNamedIndividual innVar = helper.asIndividual( "tns:InnVar_" + $cr.hashCode() );

        OWLNamedIndividual andRoot = helper.assertExpression( drools, "And", $cr );
        insert( helper.assertObjectProperty( "ops:body", iter, andRoot ) );

            //OWLNamedIndividual dateEq = helper.assertExpression( drools, "In", $datePath );
            OWLNamedIndividual dateEq = helper.assertExpression( drools, "Or", $datePath );

            insert( helper.assertObjectProperty( "ops:secondOperand", andRoot, dateEq ) );

            OWLNamedIndividual leftProp = helper.assertPropertyChain( drools, $datePath, innVar, $type.getNamespaceURI() + "#" );

            insert( helper.assertObjectProperty( "ops:hasOperand", dateEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:firstOperand", dateEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:hasOperand", dateEq, $dateInd ) );
            insert( helper.assertObjectProperty( "ops:secondOperand", dateEq, $dateInd ) );
end


rule "Input Data Binding - Subject"
when
    $kd : KnowledgeDocument( $ext : externalData, $defs : externalData.deves, $xprs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs || this memberOf $xprs, $name : name, $xp : expression )
    $cr : ClinicalRequest( this == $xp, $type : dataType, $card : cardinality.value,
                           $codePath : codeProperty, $datePath : dateProperty, $subjectPath : subjectProperty,
                           $codes : codes, $dates : dateRange, $subject : subject != null )
    Link( $subject, $subjInd ; )
then
    OWLNamedIndividual iter = helper.asExpressionIndividual( "ClinicalRequest", $cr );
    OWLNamedIndividual innVar = helper.asIndividual( "tns:InnVar_" + $cr.hashCode() );

        OWLNamedIndividual andRoot = helper.assertExpression( drools, "And", $cr );
        insert( helper.assertObjectProperty( "ops:body", iter, andRoot ) );

            //OWLNamedIndividual subjEq = helper.assertExpression( drools, "In", $subjectPath );
            OWLNamedIndividual subjEq = helper.assertExpression( drools, "Or", $subjectPath );

            insert( helper.assertObjectProperty( "ops:thirdOperand", andRoot, subjEq ) );

            OWLNamedIndividual leftProp = helper.assertPropertyChain( drools, $subjectPath, innVar, $type.getNamespaceURI() + "#" );

            insert( helper.assertObjectProperty( "ops:hasOperand", subjEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:firstOperand", subjEq, leftProp ) );
            insert( helper.assertObjectProperty( "ops:hasOperand", subjEq, $subjInd ) );
            insert( helper.assertObjectProperty( "ops:secondOperand", subjEq, $subjInd ) );
end




/***********************************************************************************************/
/*  EXPRESSIONS
/***********************************************************************************************/





rule "Expression Type"
when
    $expr : Expression()
then
    OWLNamedIndividual exp = helper.assertExpression( drools, $expr.getClass().getSimpleName(), $expr );
    insert( new Link( $expr, exp ) );
end


rule "Expression Description"
when
    $expr : Expression( $descr : description != null )
then
    OWLNamedIndividual exp = helper.asIndividual( $expr );
    insert( helper.assertDataProperty( "dcterms:description", exp, $descr ) );
end


rule "Process Property Get"
when
    $pro : Property( $path : path, $src : source != null )
    Link( $pro, $exp ; )
    Link( $src, $semSrc ; )
then
    OWLNamedIndividual ind = helper.assertPropertyChain( drools, $path, $semSrc, "vmr:" );
    insert( helper.assertObjectProperty( "ops:source", $exp, ind ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $exp, $semSrc ) );
end

rule "Process ExpressionRef"
when
    $ref : ExpressionRef( $name : name )
    Link( $ref, $exp ; )
then
    OWLNamedIndividual var = helper.asIndividual( "tns:Var_" + $name );

    insert( helper.assertType( $exp, "ops:VariableExpression" ) );
    insert( helper.assertObjectProperty( "ops:referredVariable", $exp, var ) );
end

rule "Process ObjectExpression Properties"
when
    $new : ObjectExpression( $props : properties )
    $set : PropertyExpression( this memberOf $props, $exp : value, $name : name )
    Link( $new, $obj ; )
    Link( $exp, $setXp ; )
then
    OWLNamedIndividual setter = helper.asIndividual( $set );
    OWLNamedIndividual domProp = helper.asIndividual( "vmr:" + $name );
    OWLNamedIndividual domPropConcept = helper.asIndividual( new CD() );

    insert( helper.assertType( setter, "ops:PropertySetExpression" ) );
    insert( helper.assertType( domProp, "ops:DomainPropertyExpression" ) );
    insert( helper.assertType( domPropConcept, "ops:DomainProperty" ) );

    insert( helper.assertObjectProperty( "ops:extraOperand", $obj, setter ) );

    insert( helper.assertObjectProperty( "ops:firstOperand", setter, $setXp ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", setter, domProp ) );
    insert( helper.assertObjectProperty( "ops:returns", domProp, domPropConcept ) );

    insert( helper.assertDataProperty( "skos:notation", domPropConcept, $name.toString() ) );
end

rule "Process ObjectExpression Type"
when
    $new : ObjectExpression( $type : objectType )
    Link( $new, $obj ; )
then
    OWLNamedIndividual type = helper.asIndividual( $type );
    insert( helper.assertType( type, "ops:DomainClass" ) );
    insert( helper.assertDataProperty( "skos:notation", type, $type.toString() ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $obj, type ) );
end




rule "Nary operands"
when
    $nx : NaryExpression( $ops : operands )
    Link( $nx, $ind ; )
    Link( $xp, $op ; exp memberOf $ops )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op ) );
end

rule "Unary operands"
when
    $nx : UnaryExpression( $ops1 : operand )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ;)
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
end

rule "BiNary operands"
when
    $nx : BinaryExpression( $ops1 : operands.get( 0 ), $ops2 : operands.get( 1 ) )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
    Link( $ops2, $op2 ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $op2 ) );
end

rule "TerNary operands"
when
    $nx : TernaryExpression( $ops1 : operands.get( 0 ), $ops2 : operands.get( 1 ), $ops3 : operands.get( 2 ) )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
    Link( $ops2, $op2 ; )
    Link( $ops3, $op3 ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op3 ) );
    insert( helper.assertObjectProperty( "ops:thirdOperand", $ind, $op3 ) );
end


rule "Process List Expression"
when
    $list : List( $elems : elements )
    $expr : Expression( this memberOf $elems )
    Link( $list, list ; )
    Link( $expr, expr ; )

then
    insert( helper.assertObjectProperty( "ops:hasOperand", list, expr ) );
end


rule "Interval Expr - Begin"
when
    $in : Interval( $b : begin != null )
    Link( $in, $ind ; )
    Link( $b, $bind ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $bind ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $bind ) );
end

rule "Interval Expr - End"
when
    $in : Interval( $e : end != null )
    Link( $in, $ind ; )
    Link( $e, $eind ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $eind ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $eind ) );
end


rule "DateAdd operands"
when
    $nx : DateAdd( $ops1 : date, $ops2 : granularity, $ops3 : numberOfPeriods )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
    Link( $ops2, $op2 ; )
    Link( $ops3, $op3 ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op3 ) );
    insert( helper.assertObjectProperty( "ops:thirdOperand", $ind, $op3 ) );
end

rule "Filter operands"
when
    $nx : Filter( $ops1 : source, $ops2 : condition )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
    Link( $ops2, $op2 ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op2 ) );
    insert( helper.assertObjectProperty( "ops:secondOperand", $ind, $op2 ) );
end

rule "Last operands"
when
    $nx : Last( $ops1 : source )
    Link( $nx, $ind ; )
    Link( $ops1, $op1 ; )
then
    insert( helper.assertObjectProperty( "ops:hasOperand", $ind, $op1 ) );
    insert( helper.assertObjectProperty( "ops:firstOperand", $ind, $op1 ) );
end




/***********************************************************************************************/
/*  LITERALS
/***********************************************************************************************/




rule "Process PQLiteral"
when
    $pq : PhysicalQuantityLiteral( $unit : unit, $value : value )
then
    OWLNamedIndividual ind = helper.asExpressionIndividual( "PhysicalQuantityLiteral", $pq );
    helper.assertLiteralAttribute( drools, ind, "unit", $unit );
    helper.assertLiteralAttribute( drools, ind, "value", $value );

end

rule "Process StringLiteral"
when
    $sl : StringLiteral( $val : value )
then
    OWLNamedIndividual ind = helper.asExpressionIndividual( "StringLiteral", $sl );
    helper.assertLiteralAttribute( drools, ind, "value", $val );
end

rule "Process Integer"
when
    $il : IntegerLiteral( $val : value )
then
    OWLNamedIndividual ind = helper.asExpressionIndividual( "IntegerLiteral", $il );
    helper.assertLiteralAttribute( drools, ind, "value", $val );
end

rule "Process Boolean"
when
    $bl : BooleanLiteral( $val : value )
then
    OWLNamedIndividual ind = helper.asExpressionIndividual( "BooleanLiteral", $bl );
    helper.assertLiteralAttribute( drools, ind, "value", $val );
end

rule "Process CodeLiteral"
when
    $cl : CodeLiteral( $code : code, $codeSystem : codeSystem, $displayName : displayName, $csName : codeSystemName )
then
    OWLNamedIndividual ind = helper.asExpressionIndividual( "CodeLiteral", $cl );
    helper.assertLiteralAttribute( drools, ind, "code", $code );
    helper.assertLiteralAttribute( drools, ind, "codeSystem", $codeSystem );
    helper.assertLiteralAttribute( drools, ind, "codeSystemName", $csName );
    helper.assertLiteralAttribute( drools, ind, "label", $displayName );
end



rule "Process PeriodLiteral"
when
    $cl : PeriodLiteral( $phase : phase, $period : period, $frequency : frequency, $count : count, $align : alignment, $flex : isFlexible )
then
    OWLNamedIndividual ind = helper.asExpressionIndividual( "CodeLiteral", $cl );
    helper.assertLiteralAttribute( drools, ind, "phase", $phase );
    helper.assertLiteralAttribute( drools, ind, "period", $period );
    helper.assertLiteralAttribute( drools, ind, "frequency", $frequency );
    helper.assertLiteralAttribute( drools, ind, "count", $count );
    helper.assertLiteralAttribute( drools, ind, "alignment", $align );
    helper.assertLiteralAttribute( drools, ind, "isFlexible", $flex );
end

rule "Process ValueSet"
when
    $val : ValueSet( $id : id, $ver : version, $auth : authority )
then
    OWLNamedIndividual val = helper.asIndividual( $val );
    insert( helper.assertType( val, "prr-sharp:ValueSet" ) );
    if ( $id != null ) { insert( helper.assertDataProperty( "meta:artifactId", val, $id ) ); }
    if ( $ver != null ) { insert( helper.assertDataProperty( "meta:versionId", val, $ver ) ); }
    if ( $auth != null ) { insert( helper.assertDataProperty( "dcterms:description", val, $auth ) ); }
end







/***********************************************************************************************/
/*  LOCAL VARIABLES
/***********************************************************************************************/


rule "KnowledgeDocument Derived Rule Variables"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $defs : expressions.deves )
    $rv : ExpressionDef( this memberOf $defs, $name : name, $xp : expression )
    Link( $xp, $semXp ; )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rv = helper.asIndividual( "tns:Var_" + $name );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $xp.hashCode() );

    insert( helper.assertObjectProperty( "prr:productionRuleBoundRuleVariable", r, rv  ) );
    insert( helper.assertDataProperty( "prr:name", rv, $name  ) );
    insert( helper.assertObjectProperty( "prr:variableFilterExpression", rv, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $semXp ) );
end



/***********************************************************************************************/
/*  CONDITIONS
/***********************************************************************************************/


rule "Rule Conditions"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $cnds : conditions.conditions )
    $rc : Condition( this memberOf $cnds, $xp : logic  )
    Link( $xp, $sharpCond ; )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual rc = helper.asIndividual( $rc );
    OWLNamedIndividual expr = helper.asIndividual( "tns:Expr_" + $rc.hashCode() );

    insert( helper.assertType( rc, "prr:RuleCondition" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleCondition", r, rc  ) );
    insert( helper.assertObjectProperty( "prr:conditionRepresentation", rc, expr ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $sharpCond ) );
end




/***********************************************************************************************/
/*  METADATA
/***********************************************************************************************/


rule "KnowledgeDocument Identifiers"
when
    $kd : KnowledgeDocument( $ids : metadata.identifiers.identifiers )
    $id : VersionedIdentifier( this memberOf $ids )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:artifactVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) );
end


rule "KnowledgeDocument Schema Identifiers"
when
    $kd : KnowledgeDocument( $id : metadata.schemaIdentifier )
          VersionedIdentifier( this == $id )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:schemaVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) );
end


rule "KnowledgeDocument Datamodels"
salience 1000
when
    $kd : KnowledgeDocument( $models : metadata.dataModels.modelReferences )
    $mr : ModelReference( this memberOf $models, $ref : referencedModel.value )
then
    helper.registerDataModel( $ref );

    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual mr = helper.asIndividual( $mr );
    OWLNamedIndividual rm = helper.urnAsIndividual( $ref );
    insert( helper.assertType( mr, "meta:DataModelRealization" ) );
    insert( helper.assertObjectProperty( "dcterms:references", kd, mr  ) );
    insert( helper.assertDataProperty( "dcterms:description", mr, $mr.getDescription().getValue()  ) );
    insert( helper.assertDataProperty( "dcterms:identifier", mr, $ref ) );
    insert( helper.assertObjectProperty( "meta:realizesInformation", mr, rm  ) );
end

rule "KnowledgeDocument Title"
when
    $kd : KnowledgeDocument( $title : metadata.title!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:title", kd, $title ) );
end

rule "KnowledgeDocument Description"
when
    $kd : KnowledgeDocument( $descr : metadata.description!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:description", kd, $descr ) );
end

rule "KnowledgeDocument Documentation"
when
    $kd : KnowledgeDocument( $doc : metadata.documentation )
    $dc : InlineResource( this == $doc, $descr : description.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual dc = helper.asIndividual( $dc );
    insert( helper.assertObjectProperty( "meta:documentation", kd, dc ) );
    if ( $dc.getContent() != null ) {
        insert( helper.assertDataProperty( "meta:content", dc, $dc.getContent().toString() ) );
    }
end

rule "KnowledgeDocument Related Resource"
when
    $kd : KnowledgeDocument( $res : metadata.relatedResources.relatedResources )
    $rx : ResourceRelationshipReference( this memberOf $res, $rel : relationship.value, $related : resources.resources )
    $kr : KnowledgeResource( this memberOf $related )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual kr = helper.asIndividual( $kr );
    insert( helper.assertObjectProperty( "meta:" + $rel.substring(0,1).toLowerCase() + $rel.substring(1), kd, kr ) );
end


rule "KnowledgeResource Identifiers"
when
    $kd : KnowledgeResource( $id : identifiers!.identifier )
          VersionedIdentifier( this == $id )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual id = helper.asIndividual( $id );
    insert( helper.assertType( id, "meta:VersionedIdentifier" ) );
    insert( helper.assertObjectProperty( "meta:artifactVersion", kd, id  ) );
    insert( helper.assertDataProperty( "meta:artifactId", id, $id.getRoot()  ) );
    if ( $id.getVersion() != null ) { insert( helper.assertDataProperty( "meta:versionId", id, $id.getVersion() ) ); }
end


rule "KnowledgeResource Title"
when
    $kd : KnowledgeResource( $title : title!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:title", kd, $title ) );
end

rule "KnowledgeResource Description"
when
    $kd : KnowledgeResource( $descr : description!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:description", kd, $descr ) );
end

rule "KnowledgeResource Citation"
when
    $kd : KnowledgeResource( $cit : citation!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "dcterms:bibliographicCitation", kd, $cit ) );
end


rule "KnowledgeResource Location"
when
    $kd : KnowledgeResource( $loc : location!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual lc = helper.asIndividual( $kd.getLocation() );
    insert( helper.assertType( lc, "meta:Site" ) );
    insert( helper.assertObjectProperty( "dcterms:spatial", kd, lc  ) );
    insert( helper.assertDataProperty( "meta:urlLocation", lc, $loc ) );
end



rule "KnowledgeDocument Supporting Evidence"
when
    $kd : KnowledgeDocument( $sup : metadata!.supportingEvidence!.evidences )
    $ev : Evidence( this memberOf $sup, $qual : qualityOfEvidence, $str : strengthOfRecommendation )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    insert( helper.assertType( ev, "meta:Evidence" ) );
    insert( helper.assertObjectProperty( "meta:supportingEvidence", kd, ev  ) );
    if ( $qual != null ) { helper.assertCD( drools, "meta:qualityOfEvidence", ev, $qual ); }
    if ( $str != null ) { helper.assertCD( drools, "meta:strengthOfRecommendation", ev, $str ); }
end

rule "Evidence Resource"
when
    $ev : Evidence( $res : resources.resources )
    $kr : KnowledgeResource( this memberOf $res )
then
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    OWLNamedIndividual kr = helper.asIndividual( $kr );
    insert( helper.assertObjectProperty( "meta:supportingResource", ev, kr  ) );
end




rule "KnowledgeDocument Applicability"
when
    $kd : KnowledgeDocument( $app : metadata.applicability.coverages )
    $cv : Coverage( this memberOf $app, $focus : focus.value, $descr : description, $val : value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual cv = helper.asIndividual( $cv );
    insert( helper.assertType( cv, "meta:ClinicalCoverage" ) );
    insert( helper.assertObjectProperty( "meta:applicability", kd, cv ) );
    insert( helper.assertDataProperty( "meta:coverageType", cv, $focus ) );
    if ( $descr != null ) {
        insert( helper.assertDataProperty( "dcterms:description", cv, $descr.getValue() ) );
    }
    helper.assertCD( drools, "meta:coveredConcept", cv, $val );
end


rule "KnowledgeDocument KeyTerms"
when
    $kd : KnowledgeDocument( $keys : metadata!.keyTerms!.terms )
    $cd : CD( this memberOf $keys )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    helper.assertCD( drools, "meta:keyTerm", kd, $cd );
end



rule "KnowledgeDocument Status"
when
    $kd : KnowledgeDocument( $status : metadata.status!.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "meta:status", kd, $status ) );
end

rule "KnowledgeDocument History"
when
    $kd : KnowledgeDocument( $evs : metadata.eventHistory.artifactLifeCycleEvents )
    $ev : ArtifactLifeCycleEvent( this memberOf $evs, $date : eventDateTime.value, $type : eventType.value )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    insert( helper.assertDataProperty( "meta:" + $type.substring(0,1).toLowerCase() + $type.substring(1), kd, $date ) );
end


rule "KnowledgeDocument Contributors"
when
    $kd : KnowledgeDocument( $contrs : metadata.contributions.contributions )
    $ct : Contribution( this memberOf $contrs, $role : role.value, $actor : contributor )
    $ac : Party( this == $actor )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertType( ac, $ac instanceof Person ? "DUL:SocialPerson" : "DUL:Organization" ) );
    if ( $role != null ) {
        insert( helper.assertObjectProperty( "meta:" + $role.toLowerCase(), kd, ac ) );
    }
end

rule "KnowledgeDocument Publishers"
when
    $kd : KnowledgeDocument( $pubs : metadata!.publishers!.publishers )
    $ac : Party( this memberOf $pubs )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertType( ac, $ac instanceof Person ? "DUL:SocialPerson" : "DUL:Organization" ) );
    insert( helper.assertObjectProperty( "dcterms:publisher", kd, ac ) );
end

rule "KnowledgeDocument Rights"
when
    $kd : KnowledgeDocument( $rights : metadata!.usageTerms!.rightsDeclarations )
    $rd : RightsDeclaration( this memberOf $rights )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    insert( helper.assertType( rd, "meta:RightsDeclaration" ) );
    insert( helper.assertObjectProperty( "meta:usageTerms", kd, rd ) );
end

rule "Actor Contact"
when
    $ac : Party( $contacts : contacts!.contacts )
          TEL( this memberOf $contacts, $contact : value != null )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertDataProperty( "meta:contactInformation", ac, $contact ) );
end

rule "Actor Affiliation"
when
    $ac : Person( $affiliation : affiliation )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    OWLNamedIndividual aff = helper.asIndividual( $affiliation );
    insert( helper.assertType( aff, "DUL:Organization" ) );
    insert( helper.assertObjectProperty( "DUL:actsThrough", ac, aff ) );
end

rule "Actor Address"
when
    $ac : Party( $addrs : addresses.addresses )
          AD( this memberOf $addrs, $parts : parts )
          accumulate( ADXP( this memberOf $parts, $type : type, $val : value != null ),
                      $list : collectList( $type + "=" + $val ) )
then
    OWLNamedIndividual ac = helper.asIndividual( $ac );
    insert( helper.assertDataProperty( "meta:address", ac, $list.toString() ) );
end

rule "Organization Name"
when
    $og : Organization( $name : name )
then
    OWLNamedIndividual ac = helper.asIndividual( $og );
    insert( helper.assertDataProperty( "meta:agentName", ac, $name.toString() ) );
end

rule "Person Name"
when
    $px : Person( $name : name )
          EN( this == $name, $parts : parts )
          accumulate( ENXP( this memberOf $parts, $val : value ),
                      $list : collectList( $val ) )
then
    OWLNamedIndividual ac = helper.asIndividual( $px );
    insert( helper.assertDataProperty( "meta:agentName", ac, $list.toString() ) );
end



rule "RightsDeclaration Owner"
when
    $rd : RightsDeclaration( $holder : rightsHolder )
    $rh : Party( this == $holder )
then
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    OWLNamedIndividual rh = helper.asIndividual( $rh );
    insert( helper.assertObjectProperty( "dcterms:rightsHolder", rd, rh ) );
end

rule "RightsDeclaration Rights"
when
    $rd : RightsDeclaration( $rights : assertedRights, $val: assertedRights!.value )
then
    OWLNamedIndividual rd = helper.asIndividual( $rd );
    OWLNamedIndividual ar = helper.asIndividual( $rights );
    insert( helper.assertType( ar, "dcterms:RightsStatement" ) );
    insert( helper.assertObjectProperty( "dcterms:accessRights", rd, ar ) );
    insert( helper.assertDataProperty( "dcterms:licenceTerms", ar, $val ) );
end


/***********************************************************************************************/
/*  ACTIONS
/***********************************************************************************************/


rule "Rule Actions"
when
    $kd : KnowledgeDocument( $meta : metadata.artifactType, metadata.artifactType.value == "Rule",
                             $acts : actionGroup )
    $ag : ActionGroup( this == $acts )
then
    OWLNamedIndividual r = helper.asIndividual( $meta );
    OWLNamedIndividual ra = helper.asIndividual( $ag );

    insert( helper.assertType( ra, "act:CompositeAction" ) );
    insert( helper.assertObjectProperty( "prr:productionRuleAction", r, ra  ) );
end

rule "Action Group Nesting"
when
    $a1 : ActionGroup( $subs : subElements.simpleActionsAndActionGroupsAndActionGroupReferences )
    $a2 : ActionGroup( this memberOf $subs )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    OWLNamedIndividual a2 = helper.asIndividual( $a2 );

    insert( helper.assertType( a2, "act:CompositeAction" ) );
    insert( helper.assertObjectProperty( "act:memberAction", a1, a2  ) );
end

rule "Action Group Nesting Simple"
when
    $a1 : ActionGroup( $subs : subElements.simpleActionsAndActionGroupsAndActionGroupReferences )
    $a2 : AtomicAction( this memberOf $subs )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    OWLNamedIndividual a2 = helper.asIndividual( $a2 );

    insert( helper.assertObjectProperty( "act:memberAction", a1, a2  ) );
end

rule "Action Group Title"
when
    $a1 : ActionGroup( $title : title!.value )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    insert( helper.assertDataProperty( "dcterms:title", a1, $title  ) );
end

rule "Action Group Description"
when
    $a1 : ActionGroup( $descr : description!.value )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    insert( helper.assertDataProperty( "dcterms:description", a1, $descr  ) );
end

rule "Action Group Selection Behavior"
when
    $a1 : ActionGroup( behaviors != null, $bevs : behaviors.behaviors )
    GroupSelectionBehavior( this memberOf $bevs, $bhv : value )
then
    OWLNamedIndividual a1 = helper.asIndividual( $a1 );
    insert( helper.assertDataProperty( "act:groupSelection", a1, $bhv  ) );
end


rule "Action Supporting Evidence"
when
    $kd : ActionBase( $sup : supportingEvidence!.evidences )
    $ev : Evidence( this memberOf $sup, $qual : qualityOfEvidence, $str : strengthOfRecommendation )
then
    OWLNamedIndividual kd = helper.asIndividual( $kd );
    OWLNamedIndividual ev = helper.asIndividual( $ev );
    insert( helper.assertType( ev, "meta:Evidence" ) );
    insert( helper.assertObjectProperty( "meta:supportingEvidence", kd, ev  ) );
    if ( $qual != null ) { helper.assertCD( drools, "meta:qualityOfEvidence", ev, $qual ); }
    if ( $str != null ) { helper.assertCD( drools, "meta:strengthOfRecommendation", ev, $str ); }
end


rule "Create Action"
when
    $ca : CreateAction( $act : actionSentence )
    Link( $act, $actInd ; )
then
    OWLNamedIndividual ca = helper.asIndividual( $ca );
    OWLNamedIndividual expr = helper.asIndividual( "tns:prrExpr_" + $ca.hashCode() );

    insert( helper.assertType( ca, "act:CreateAction" ) );
    insert( helper.assertType( expr, "prr:Expression" ) );

    insert( helper.assertObjectProperty( "prr:actionExpression", ca, expr  ) );
    insert( helper.assertObjectProperty( "prr-sharp:bodyExpression", expr, $actInd ) );
end

