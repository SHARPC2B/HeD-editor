Prefix(:=<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#>)
Prefix(DUL:=<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(IOLite:=<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#>)
Prefix(owl2xml:=<http://www.w3.org/2006/12/owl2-xml#>)


Ontology(<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl>
Import(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl>)
Annotation(owl:versionInfo "In 1.8, all object properties have been aligned to associatedWith, and some comments have been added.
In 1.7, the encodes object property has been modified in order to support any kind of information entity (purely social object or realization), and to give justice to computer science pragmatic equivalence between information objects that are fully encoded for computing, and the actual bits travelling in a machine or network, based on that encoding. The realizes property has been consequenctly declared as a subproperty of encodes.
Also removed redundant owl:someValuesFrom axioms
In 1.6, broadened range of hasRepresentationLanguage
In 1.5, some fixes added wrt to new plugins (Roles.owl, CollectionsLite.owl).
In 1.4, all elements have got English labels. Added the class LinguisticAct, useful to relate Agent(s) when use information objects to express meaning with some CommunicativeFunction (from the theory by Jakobson). Moreover, the relation between formal patterns and information patterns have been enriched. Some bugs fixed."^^xsd:string)
Annotation(owl:versionInfo "1.8"^^xsd:string)
Annotation(rdfs:label "Information Objects ontology"^^xsd:string)
Annotation(rdfs:comment "An ontology of information objects, encodings and realizations, as a plugin to DOLCE-Ultralite (reusing mainly the dul:expresses and dul:realizes relations from it). 
Several patterns are contained inside this ontology:
- encodings of information entities
- kinds of realizations (gestural motions, depictions, digital, multimedia, speech, etc.)
- combinatorial relations between information objects
- relations between formal expressions and generalized expressions (lexicalizations, formalizations)
- relations between formal expressions and their assignments in formal semantics
- relations between information objects and schemata (data structures, KOS, etc.)
- authorship
- kinds of linguistic objects
- copies, reproductions, etc.
- cultural combination of information objects (reuse, mixing, metaphorical blending)"^^xsd:string)

Declaration(Class(DUL:Action))
Declaration(Class(DUL:Agent))
Declaration(Class(DUL:Community))
Declaration(Class(DUL:Contract))
Declaration(Class(DUL:Description))
Declaration(Class(DUL:Entity))
Declaration(Class(DUL:FormalEntity))
Declaration(Class(DUL:InformationEntity))
Declaration(Class(DUL:InformationObject))
Declaration(Class(DUL:InformationRealization))
Declaration(Class(DUL:PhysicalAgent))
Declaration(Class(DUL:PhysicalArtifact))
Declaration(Class(DUL:Plan))
Declaration(Class(DUL:PlanExecution))
Declaration(Class(DUL:Process))
Declaration(Class(DUL:Role))
Declaration(Class(DUL:Situation))
Declaration(Class(DUL:SocialObject))
Declaration(Class(:DataStructure))
AnnotationAssertion(rdfs:label :DataStructure "Data structure"@en)
AnnotationAssertion(rdfs:comment :DataStructure "Any data structure, including databases, schemas, lexica, knowledge organizations systems, etc."^^xsd:string)
AnnotationAssertion(rdfs:label :DataStructure "Struttura di dati"@it)
SubClassOf(:DataStructure DUL:InformationObject)
Declaration(Class(:Datum))
AnnotationAssertion(rdfs:label :Datum "Dato"@it)
AnnotationAssertion(rdfs:comment :Datum "From WordNet: 'an item of factual information derived from measurement or research'"^^xsd:string)
AnnotationAssertion(rdfs:label :Datum "Datum"@en)
SubClassOf(:Datum DUL:InformationObject)
Declaration(Class(:DigitalResource))
AnnotationAssertion(rdfs:label :DigitalResource "Digital resource"@en)
AnnotationAssertion(rdfs:label :DigitalResource "Risorsa digitale"@it)
AnnotationAssertion(rdfs:comment :DigitalResource "Any resource that can be computed, e.g. a file, a piece of (implemented) software. This assumes an encoding allowing the computation (e.g. html+http protocol)."^^xsd:string)
SubClassOf(:DigitalResource DUL:InformationRealization)
Declaration(Class(:FormalExpression))
AnnotationAssertion(rdfs:label :FormalExpression "Formal expression"@en)
AnnotationAssertion(rdfs:comment :FormalExpression "Any information object represented in a FormalLanguage, usually having a formal interpretation by a dul:FormalEntity, and used to formally represent any Entity"^^xsd:string)
AnnotationAssertion(rdfs:label :FormalExpression "Espressione formale"@it)
SubClassOf(:FormalExpression DUL:InformationObject)
SubClassOf(:FormalExpression ObjectSomeValuesFrom(:isFormalTermFor DUL:InformationObject))
DisjointClasses(:FormalExpression :KOS)
Declaration(Class(:KOS))
AnnotationAssertion(rdfs:label :KOS "Sistema di organizzazione della conoscenza"@it)
AnnotationAssertion(rdfs:label :KOS "Knowledge organization system"@en)
AnnotationAssertion(rdfs:comment :KOS "Knowledge Organization Systems: thesauri, terminologies, classification schemes, subject hierarchies, etc."^^xsd:string)
SubClassOf(:KOS :DataStructure)
DisjointClasses(:KOS :FormalExpression)
Declaration(Class(:Lexicon))
AnnotationAssertion(rdfs:label :Lexicon "Lexicon"@en)
AnnotationAssertion(rdfs:label :Lexicon "Lessico"@it)
AnnotationAssertion(rdfs:comment :Lexicon "A collection of lexical items (terms, entries, ...) that are witnessed to have a linguistic relevance."^^xsd:string)
SubClassOf(:Lexicon :KOS)
Declaration(Class(:MultimediaObject))
AnnotationAssertion(rdfs:label :MultimediaObject "Oggetto multimediale"@it)
AnnotationAssertion(rdfs:label :MultimediaObject "Multimedia object"@en)
AnnotationAssertion(rdfs:comment :MultimediaObject "An information realization that realizes heterogeneous information objects. Examples include audiovisual performances, web pages, etc."^^xsd:string)
SubClassOf(:MultimediaObject DUL:InformationRealization)
SubClassOf(:MultimediaObject ObjectMinCardinality(2 DUL:realizes))
Declaration(Class(:Thesaurus))
AnnotationAssertion(rdfs:label :Thesaurus "Tesauro"@it)
AnnotationAssertion(rdfs:label :Thesaurus "Thesaurus"@en)
AnnotationAssertion(rdfs:comment :Thesaurus "A collection of categories organized according to a specified syntax, typically used to create a controlled terminology in a domain. A useful rdfs encoding of a typical thesaurus syntax is the SKOS schema."^^xsd:string)
SubClassOf(:Thesaurus :KOS)
Declaration(Class(:WebPage))
AnnotationAssertion(rdfs:label :WebPage "Web page"@en)
SubClassOf(:WebPage :DigitalResource)
SubClassOf(:WebPage :MultimediaObject)
Declaration(Class(owl:Thing))
Declaration(ObjectProperty(DUL:associatedWith))
Declaration(ObjectProperty(DUL:describes))
Declaration(ObjectProperty(DUL:expresses))
Declaration(ObjectProperty(DUL:hasComponent))
Declaration(ObjectProperty(DUL:hasPart))
Declaration(ObjectProperty(DUL:hasParticipant))
Declaration(ObjectProperty(DUL:includesObject))
Declaration(ObjectProperty(DUL:isAbout))
Declaration(ObjectProperty(DUL:isComponentOf))
Declaration(ObjectProperty(DUL:isConceptualizedBy))
Declaration(ObjectProperty(DUL:isSettingFor))
Declaration(ObjectProperty(DUL:realizes))
SubObjectPropertyOf(DUL:realizes :encodes)
Declaration(ObjectProperty(DUL:satisfies))
Declaration(ObjectProperty(:encodes))
AnnotationAssertion(rdfs:comment :encodes "Any relation between two information entities, with the first used as an alternative encoding of the second. This encoding can preserve all or part of the informational structure. For example, an XML encoding of a plain text file, a digital scanning of a physical paper document, a reproduction of a painting, etc.
The encoding can be so precise and close to the medium of realization, that distinguishing the maximally encoded object from its realization is superfluous (as in many cases of computer science information entities). For this reason, the relation holds for either dul:InformationObject(s) or dul:InformationRealization(s).
Since the relation holds for either dul:InformationObject(s) or dul:InformationRealization(s), dul:realizes is a subproperty of it."^^xsd:string)
SubObjectPropertyOf(:encodes DUL:associatedWith)
ObjectPropertyDomain(:encodes DUL:InformationEntity)
ObjectPropertyRange(:encodes DUL:InformationEntity)
Declaration(ObjectProperty(:formallyRepresents))
AnnotationAssertion(rdfs:comment :formallyRepresents "The relation between formal expressions, and anything that they are supposed to represent.
E.g., 'the predicate 'MariachiInTijuana' formallyRepresents the dul:Collection of all mariachis in Tijuana'; 'the equivalence relation '<=>' formallyRepresents the Concept of two entities having the same properties', 'the constant 'John' formallyRepresents the dul:NaturalPerson 'John'.
Notice that a FormalExpression isAssignmentOf (is formally interpreted by) instances of dul:FormalEntity.

formallyRepresents is a particular case of 'dul:isAbout', holding only for formal expressions. 
Anyway, a formal expression that  dul:expresses a dul:SocialObject is also possible, but treats formal expressions as any other kind of dul:InformationObject that express a 'social' or 'cognitive' semantics, not a formal one."^^xsd:string)
AnnotationAssertion(rdfs:label :formallyRepresents "rappresenta formalmente"@it)
AnnotationAssertion(rdfs:label :formallyRepresents "formally represents"@en)
SubObjectPropertyOf(:formallyRepresents DUL:isAbout)
ObjectPropertyDomain(:formallyRepresents :FormalExpression)
ObjectPropertyRange(:formallyRepresents DUL:Entity)
Declaration(ObjectProperty(:hasAuthor))
AnnotationAssertion(rdfs:label :hasAuthor "has author"@en)
AnnotationAssertion(rdfs:label :hasAuthor "ha come autore"@it)
SubObjectPropertyOf(:hasAuthor DUL:associatedWith)
ObjectPropertyDomain(:hasAuthor DUL:InformationEntity)
ObjectPropertyRange(:hasAuthor DUL:Agent)
Declaration(ObjectProperty(:hasGrounding))
AnnotationAssertion(rdfs:label :hasGrounding "has grounding"@en)
AnnotationAssertion(rdfs:comment :hasGrounding "A formal entity is grounded in some other entity when it is assumed as the (formal, extensional) interpretation of it, for example, the set Dog can be grounded in the collection of all actual dogs (or in some of them that the modeller intends).")
SubObjectPropertyOf(:hasGrounding DUL:associatedWith)
ObjectPropertyDomain(:hasGrounding DUL:FormalEntity)
ObjectPropertyRange(:hasGrounding DUL:Entity)
Declaration(ObjectProperty(:hasRepresentationLanguage))
AnnotationAssertion(rdfs:label :hasRepresentationLanguage "has representation language"@en)
AnnotationAssertion(rdfs:label :hasRepresentationLanguage "ha linguaggio di rappresentazione"@it)
SubObjectPropertyOf(:hasRepresentationLanguage DUL:associatedWith)
ObjectPropertyDomain(:hasRepresentationLanguage DUL:InformationEntity)
Declaration(ObjectProperty(:hasSchema))
AnnotationAssertion(rdfs:label :hasSchema "has schema"@en)
AnnotationAssertion(rdfs:comment :hasSchema "A relation between social objects and schemata that organize them. For example, a Tag hasSchema a Folksonomy, a Lexeme hasSchema a Lexicon, etc."^^xsd:string)
AnnotationAssertion(rdfs:label :hasSchema "ha schema"@it)
SubObjectPropertyOf(:hasSchema DUL:associatedWith)
ObjectPropertyDomain(:hasSchema DUL:SocialObject)
ObjectPropertyRange(:hasSchema :DataStructure)
Declaration(ObjectProperty(:isAssignmentOf))
AnnotationAssertion(rdfs:comment :isAssignmentOf "The relation between a FormalExpression, and an Entity (a FormalEntity in case of classes, relations, etc.) that it is supposed to be the reference of the symbol (FormalExpression) that the Entity is an intepretation of. 
In other words, this property expresses the 'formal interpretation' function, by which a logician 'assigns' an Entity to a FormalExpression. 
For each type of formal expressions defined in a logical language, an assignment assumption should be indicated, for example, owl:Class should be restricted to: isAssignmentOf allValuesFrom Class. In addition, differently from the general relation formallyRepresents, isAssignmentOf is functional (and its inverse is inverse functional), in order to encode the Tarskian correspondence assumption.
E.g., the Set of 'all mariachis in Tijuana' isAssignedTo the predicate (FormalExpression) 'TijuanaMariachi' (that isFormalTermFor a Term e.g. 'the mariachis in Tijuana')."^^xsd:string)
AnnotationAssertion(rdfs:label :isAssignmentOf "is formally interpreted as"@en)
AnnotationAssertion(rdfs:label :isAssignmentOf "è interpretata formalmente come"@it)
AnnotationAssertion(rdfs:label :isAssignmentOf "è assegnazione di"@it)
SubObjectPropertyOf(:isAssignmentOf :formallyRepresents)
FunctionalObjectProperty(:isAssignmentOf)
ObjectPropertyDomain(:isAssignmentOf :FormalExpression)
ObjectPropertyRange(:isAssignmentOf DUL:Entity)
Declaration(ObjectProperty(:isCopyOf))
AnnotationAssertion(rdfs:label :isCopyOf "è copia di"@it)
AnnotationAssertion(rdfs:label :isCopyOf "is copy of"@en)
AnnotationAssertion(rdfs:comment :isCopyOf "The original information realization of some copy. Differently from reproductions, copies are not planned to have notable differences from the original. Master copies, author-signed paintings, etc. are examples of originals."^^xsd:string)
SubObjectPropertyOf(:isCopyOf DUL:associatedWith)
ObjectPropertyDomain(:isCopyOf DUL:InformationRealization)
ObjectPropertyRange(:isCopyOf DUL:InformationRealization)
Declaration(ObjectProperty(:isFormalTermFor))
AnnotationAssertion(rdfs:label :isFormalTermFor "è termine formale per"@it)
AnnotationAssertion(rdfs:comment :isFormalTermFor "The relation between an InformationObject and a FormalExpression (constant, formula, term, sentence, proposition, axiom, etc.) that it is supposed to be given formal interpretation to formalize the InformationObject.
Notice that FormalExpression(s) only are formal terms for InformationObject(s), not for Concept(s) or for other SocialObject(s). On their turn, information object can 'express' (see) SocialObject(s).
E.g., the predicate (FormalExpression) 'TijuanaMariachi' isFormalTermFor the Term 'the mariachis in Tijuana' (that expresses the Collection of all mariachis in Tijuana); the Term 'equivalence relation' (that expresses the Concept of 'two entities having the same properties') hasFormalTerm the '<=>' symbol."^^xsd:string)
AnnotationAssertion(rdfs:label :isFormalTermFor "is formal term for"@en)
SubObjectPropertyOf(:isFormalTermFor DUL:expresses)
SubObjectPropertyOf(:isFormalTermFor :encodes)
ObjectPropertyDomain(:isFormalTermFor :FormalExpression)
ObjectPropertyRange(:isFormalTermFor DUL:InformationObject)
Declaration(ObjectProperty(:lexicalizes))
AnnotationAssertion(rdfs:comment :lexicalizes "A relation between linguistic objects and other information objects (including other linguistic objects).
For example, 'dog' can lexicalize a picture of a dog, a linguistic description of a dog, or the logical class: 'Dog'.
This relation is a subPropertyOf encodes .
In case of FormalExpression(s), it is not the inverse of isFormalTermFor: formal expressions can be said to 'be formal terms' for a LinguisticObject(s), while, independently, linguistic objects can be said to 'lexicalize' formal expressions. The difference is mainly pragmatic: one can take e.g. the word Dog, and decide to have a logical class 'Dog' for it. Someone else can see the logical class 'Dog', and decide to lexicalize it with the words dog, chien, cane, etc. While the relation seems similar, the pragmatic of using them is very different."^^xsd:string)
AnnotationAssertion(rdfs:label :lexicalizes "lessicalizza"@it)
AnnotationAssertion(rdfs:label :lexicalizes "lexicalizes"@en)
SubObjectPropertyOf(:lexicalizes DUL:expresses)
SubObjectPropertyOf(:lexicalizes :encodes)
ObjectPropertyDomain(:lexicalizes DUL:InformationEntity)
ObjectPropertyRange(:lexicalizes DUL:InformationObject)
Declaration(ObjectProperty(:reuses))
AnnotationAssertion(rdfs:comment :reuses "Any relation between information entities, where the first one reuses (includes, transforms, reengineers, etc.) the second one."^^xsd:string)
SubObjectPropertyOf(:reuses DUL:associatedWith)
ObjectPropertyDomain(:reuses DUL:InformationEntity)
ObjectPropertyRange(:reuses DUL:InformationEntity)
)
