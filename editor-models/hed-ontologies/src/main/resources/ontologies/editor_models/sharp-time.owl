Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(time:=<http://asu.edu/sharpc2b/sharp-time#>)


Ontology(<http://asu.edu/sharpc2b/sharp-time>
Import(<http://www.ifomis.org/bfo/1.1>)

Declaration(Class(time:DateTime))
AnnotationAssertion(rdfs:comment time:DateTime "A DateTime is a TemporalInstant defined by an equivalent XSDDateTime.  The semantics of this are such that the 'instant' occurs precisely at the time indicated by XSDDateTime, in contrast to other approaches that might say, for instance, that 5:00:00PM is the interval from 5:00:00.00 to 5:00:00.99.  "@en)
SubClassOf(time:DateTime <http://www.ifomis.org/bfo/1.1#TemporalInstant>)
SubClassOf(time:DateTime DataExactCardinality(1 time:XSDDateTime xsd:dateTime))
Declaration(Class(time:DateTimePattern))
AnnotationAssertion(rdfs:comment time:DateTimePattern "Unspecified time parts of a smaller granularity than the smallest specified time part are assumed to be zero.  So, \"hours: 4\" means 4:00:00.000 AM, and does _not_ match 4:00:01.000 AM or any other time.  The DateTimePattern is only used to specify the start times of the segments of a RegularTemporalInterval; use hasIntervalDuration to indicate an interval starting at the specified start times (indicated by the DateTimePattern) and extending from each point for the Duration indicated by hasIntervalDuration."@en)
AnnotationAssertion(rdfs:comment time:DateTimePattern "A partial specification of a DateTime which leads to an array of potential matching full DateTimes.  For example, specifying \"hour: 4\" will match 4 AM every day; specifying \"month:3\" would match all of March each year.  You can also specify more than one time part, i.e. \"dayOfMonth: 1; hour: 4; minute: 30\" which matches 4:30 AM on the 1st of every month."@en)
SubClassOf(time:DateTimePattern DataMaxCardinality(1 time:dayOfMonth xsd:nonNegativeInteger))
SubClassOf(time:DateTimePattern DataMaxCardinality(1 time:hour xsd:nonNegativeInteger))
SubClassOf(time:DateTimePattern DataMaxCardinality(1 time:minute xsd:nonNegativeInteger))
SubClassOf(time:DateTimePattern DataMaxCardinality(1 time:month xsd:nonNegativeInteger))
SubClassOf(time:DateTimePattern DataMaxCardinality(1 time:second xsd:nonNegativeInteger))
SubClassOf(time:DateTimePattern DataMaxCardinality(1 time:year xsd:nonNegativeInteger))
Declaration(Class(time:DateTimePatternRegularTemporalInterval))
AnnotationAssertion(rdfs:comment time:DateTimePatternRegularTemporalInterval "A RegularTemporalInterval defined using a DateTimePattern, a duration, and an optional boundary of type time:ProperInterval."@en)
SubClassOf(time:DateTimePatternRegularTemporalInterval time:RegularTemporalInterval)
DisjointClasses(time:DateTimePatternRegularTemporalInterval time:StartTimeDurationTemporalInterval)
Declaration(Class(time:Duration))
AnnotationAssertion(rdfs:comment time:Duration "Some length of time.  Each duration describes an infinite set of span:TemporalInterval where the beginning and end times vary but the difference between them is fixed.  "@en)
SubClassOf(time:Duration DataMaxCardinality(1 time:days xsd:decimal))
SubClassOf(time:Duration DataMaxCardinality(1 time:hours xsd:decimal))
SubClassOf(time:Duration DataMaxCardinality(1 time:minutes xsd:decimal))
SubClassOf(time:Duration DataMaxCardinality(1 time:months xsd:nonNegativeInteger))
SubClassOf(time:Duration DataMaxCardinality(1 time:seconds xsd:decimal))
SubClassOf(time:Duration DataMaxCardinality(1 time:weeks xsd:decimal))
SubClassOf(time:Duration DataMaxCardinality(1 time:years xsd:nonNegativeInteger))
Declaration(Class(time:IrregularTemporalInterval))
AnnotationAssertion(rdfs:comment time:IrregularTemporalInterval "An arbitrary interval composed of one or more span:TemporalInterval.  "@en)
SubClassOf(time:IrregularTemporalInterval <http://www.ifomis.org/bfo/1.1#ScatteredTemporalRegion>)
SubClassOf(time:IrregularTemporalInterval ObjectSomeValuesFrom(time:hasIntervalPart <http://www.ifomis.org/bfo/1.1#ConnectedTemporalRegion>))
Declaration(Class(time:ProperInterval))
AnnotationAssertion(rdfs:comment time:ProperInterval "A ProperInterval is an interval whose beginning and end are not the same.  Beginning or end may be undefined (but not both), in which case an infinite interval is assumed.  Alternatively, a ProperInterval may be defined by a beginning time or end time plus a duration."@en)
SubClassOf(time:ProperInterval ObjectIntersectionOf(<http://www.ifomis.org/bfo/1.1#TemporalInterval> ObjectMinCardinality(0 time:hasBeginning <http://www.ifomis.org/bfo/1.1#TemporalInstant>) ObjectMinCardinality(0 time:hasEnd <http://www.ifomis.org/bfo/1.1#TemporalInstant>)))
Declaration(Class(time:RegularTemporalInterval))
AnnotationAssertion(rdfs:comment time:RegularTemporalInterval "A discontinuous time interval whose parts can be specified in the form of a repeating pattern.  Examples include \"Every Tuesday\", \"The first day of each month\", \"Every December 1st\", or \"Every 8 days beginning 4/21/2013 and lasting until 3/14/2014\""@en)
SubClassOf(time:RegularTemporalInterval <http://www.ifomis.org/bfo/1.1#ScatteredTemporalRegion>)
Declaration(Class(time:StartTimeDurationTemporalInterval))
AnnotationAssertion(rdfs:comment time:StartTimeDurationTemporalInterval "A RegularTemporalInterval defined by the start time of the first interval segment, a duration indicating the length of time between the start of each interval segment, and a duration indicating the length of each interval segment.  This is done using the hasSubInterval relation to express the first interval as a time:ProperInterval, and the hasRepeatDelay relation to indicate the delay between interval parts.  May also have a boundary defined by a time:ProperInterval."@en)
SubClassOf(time:StartTimeDurationTemporalInterval time:RegularTemporalInterval)
DisjointClasses(time:StartTimeDurationTemporalInterval time:DateTimePatternRegularTemporalInterval)
Declaration(ObjectProperty(time:hasBeginning))
FunctionalObjectProperty(time:hasBeginning)
ObjectPropertyDomain(time:hasBeginning time:ProperInterval)
ObjectPropertyRange(time:hasBeginning <http://www.ifomis.org/bfo/1.1#TemporalInstant>)
Declaration(ObjectProperty(time:hasBoundary))
ObjectPropertyDomain(time:hasBoundary time:DateTimePatternRegularTemporalInterval)
ObjectPropertyRange(time:hasBoundary <http://www.ifomis.org/bfo/1.1#TemporalInterval>)
Declaration(ObjectProperty(time:hasDateTimePattern))
ObjectPropertyDomain(time:hasDateTimePattern time:RegularTemporalInterval)
ObjectPropertyRange(time:hasDateTimePattern time:DateTimePattern)
Declaration(ObjectProperty(time:hasDuration))
FunctionalObjectProperty(time:hasDuration)
ObjectPropertyDomain(time:hasDuration <http://www.ifomis.org/bfo/1.1#TemporalInterval>)
ObjectPropertyRange(time:hasDuration time:Duration)
Declaration(ObjectProperty(time:hasEnd))
FunctionalObjectProperty(time:hasEnd)
ObjectPropertyDomain(time:hasEnd time:ProperInterval)
ObjectPropertyRange(time:hasEnd <http://www.ifomis.org/bfo/1.1#TemporalInstant>)
Declaration(ObjectProperty(time:hasIntervalPart))
ObjectPropertyDomain(time:hasIntervalPart time:IrregularTemporalInterval)
ObjectPropertyRange(time:hasIntervalPart <http://www.ifomis.org/bfo/1.1#ConnectedTemporalRegion>)
Declaration(ObjectProperty(time:hasRepeatDelay))
ObjectPropertyDomain(time:hasRepeatDelay time:RegularTemporalInterval)
ObjectPropertyRange(time:hasRepeatDelay time:DateTime)
Declaration(ObjectProperty(time:hasSubInterval))
ObjectPropertyDomain(time:hasSubInterval time:RegularTemporalInterval)
ObjectPropertyRange(time:hasSubInterval <http://www.ifomis.org/bfo/1.1#TemporalInterval>)
Declaration(DataProperty(time:XSDDateTime))
SubDataPropertyOf(time:XSDDateTime owl:topDataProperty)
DataPropertyDomain(time:XSDDateTime time:DateTime)
DataPropertyRange(time:XSDDateTime xsd:dateTime)
Declaration(DataProperty(time:dayOfMonth))
SubDataPropertyOf(time:dayOfMonth time:hasDateTimePart)
DataPropertyDomain(time:dayOfMonth time:DateTimePattern)
DataPropertyRange(time:dayOfMonth xsd:integer)
Declaration(DataProperty(time:days))
SubDataPropertyOf(time:days time:hasDurationPart)
DataPropertyDomain(time:days time:Duration)
DataPropertyRange(time:days xsd:decimal)
Declaration(DataProperty(time:hasDateTimePart))
SubDataPropertyOf(time:hasDateTimePart owl:topDataProperty)
DataPropertyDomain(time:hasDateTimePart time:DateTimePattern)
DataPropertyRange(time:hasDateTimePart xsd:integer)
Declaration(DataProperty(time:hasDurationPart))
SubDataPropertyOf(time:hasDurationPart owl:topDataProperty)
DataPropertyDomain(time:hasDurationPart time:Duration)
DataPropertyRange(time:hasDurationPart xsd:integer)
Declaration(DataProperty(time:hour))
SubDataPropertyOf(time:hour time:hasDateTimePart)
DataPropertyDomain(time:hour time:DateTimePattern)
DataPropertyRange(time:hour xsd:integer)
Declaration(DataProperty(time:hours))
SubDataPropertyOf(time:hours time:hasDurationPart)
DataPropertyDomain(time:hours time:Duration)
DataPropertyRange(time:hours xsd:decimal)
Declaration(DataProperty(time:minute))
SubDataPropertyOf(time:minute time:hasDateTimePart)
DataPropertyDomain(time:minute time:DateTimePattern)
DataPropertyRange(time:minute xsd:integer)
Declaration(DataProperty(time:minutes))
SubDataPropertyOf(time:minutes time:hasDurationPart)
DataPropertyDomain(time:minutes time:Duration)
DataPropertyRange(time:minutes xsd:decimal)
Declaration(DataProperty(time:month))
SubDataPropertyOf(time:month time:hasDateTimePart)
DataPropertyDomain(time:month time:DateTimePattern)
DataPropertyRange(time:month xsd:integer)
Declaration(DataProperty(time:months))
AnnotationAssertion(rdfs:comment time:months "Must be xsd:nonNegativeInteger because xsd:Decimal does not make sense for months, which have variable length (i.e. there is no accepted definition for 2.34 months)."@en)
SubDataPropertyOf(time:months time:hasDurationPart)
DataPropertyDomain(time:months time:Duration)
DataPropertyRange(time:months xsd:integer)
Declaration(DataProperty(time:second))
SubDataPropertyOf(time:second time:hasDateTimePart)
DataPropertyDomain(time:second time:DateTimePattern)
DataPropertyRange(time:second xsd:integer)
Declaration(DataProperty(time:seconds))
SubDataPropertyOf(time:seconds time:hasDurationPart)
DataPropertyDomain(time:seconds time:Duration)
DataPropertyRange(time:seconds xsd:decimal)
Declaration(DataProperty(time:weeks))
SubDataPropertyOf(time:weeks time:hasDurationPart)
DataPropertyDomain(time:weeks time:Duration)
DataPropertyRange(time:weeks xsd:decimal)
Declaration(DataProperty(time:year))
SubDataPropertyOf(time:year time:hasDateTimePart)
DataPropertyDomain(time:year time:DateTimePattern)
DataPropertyRange(time:year xsd:integer)
Declaration(DataProperty(time:years))
AnnotationAssertion(rdfs:comment time:years "Must be xsd:nonNegativeInteger because xsd:Decimal does not make sense for years, which have variable length (due to leap years)."@en)
SubDataPropertyOf(time:years time:hasDurationPart)
DataPropertyDomain(time:years time:Duration)
DataPropertyRange(time:years xsd:integer)
)
