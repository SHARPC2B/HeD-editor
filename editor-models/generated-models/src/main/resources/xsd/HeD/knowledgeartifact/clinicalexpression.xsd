<?xml version="1.0" encoding="utf-8"?>
<!-- edited with XMLSpy v2013 sp1 (http://www.altova.com) by Bryn Rhodes (Database Consulting Group) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="urn:hl7-org:knowledgeartifact:r1" xmlns:dt="urn:hl7-org:cdsdt:r2" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xhtml="http://www.w3.org/1999/xhtml" targetNamespace="urn:hl7-org:knowledgeartifact:r1" elementFormDefault="qualified">
	<xs:annotation>
		<xs:documentation>
			This file defines the RequestBase extensions that introduce clinically relevant dependencies such as terminology, relevant time, and value set considerations.
		</xs:documentation>
	</xs:annotation>
	<xs:import namespace="urn:hl7-org:cdsdt:r2" schemaLocation="../common/datatypes.xsd"/>
	<xs:include schemaLocation="literalexpression.xsd"/>
	<xs:include schemaLocation="expression.xsd"/>
	<xs:include schemaLocation="enum/eventtype.xsd"/>
	<xs:include schemaLocation="enum/dataeventtype.xsd"/>
	<xs:simpleType name="RequestCardinality">
		<xs:annotation>
			<xs:documentation>
				RequestCardinality defines the expected cardinality of the request, single
				or multiple.

				If a request results in a cardinality higher than expected, a run-time
				exception should be thrown.
			</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Single"/>
			<xs:enumeration value="Multiple"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="RequestBase" abstract="true">
		<xs:annotation>
			<xs:documentation>
				The request expression defines the data that will be used by the artifact.

				The result of a request is defined to return the same data for subsequent invocations
				within the same evaluation request. This means in particular that patient data updates made
				during the evaluation request are not visible to the artifact. In effect, the patient data
				is a snapshot of the data as of the start of the evaluation. This ensures strict deterministic
				and functional behavior of the artifact, and allows the implementation engine freedom to
				cache intermediate results in order to improve performance.

				The dataType attribute specifies the type of clinical data being requested.

				The templateId attribute specifies an optional template to be used. If specified, the request
				is defined to return only objects that conform to the template.

				The idProperty attribute specifies which property of the model contains the Id for the clinical
				statement.

				The triggerType attribute optionally specifies whether this request should only include
				data that was accessed or updated as a result of some event that is triggering the evaluation
				of the artifact. This attribute is only valid on a request that is specified as the request
				for a data changed event trigger.

				The isInitial attribute determines whether the request is part of the initial data requirements
				for the artifact.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="timeOffset" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="scope" type="xs:string" use="optional"/>
				<xs:attribute name="cardinality" type="RequestCardinality" use="required"/>
				<xs:attribute name="dataType" type="xs:QName" use="required"/>
				<xs:attribute name="templateId" type="xs:string" use="optional"/>
				<xs:attribute name="idProperty" type="xs:string" use="optional"/>
				<xs:attribute name="triggerType" type="DataEventType" use="optional"/>
				<xs:attribute name="isInitial" type="xs:boolean" use="optional" default="true"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DataRequest">
		<xs:complexContent>
			<xs:extension base="RequestBase"/>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ClinicalRequest">
		<xs:annotation>
			<xs:documentation>
				The clinical request expression defines clinical data that will be used by the artifact.

				The codes element optionally allows a set of codes to be provided. The codes list restricts 
				the set of clinical statements returned to only those clinical statements that matched some 
				code in the set.

				The dateRange element optionally allows a date range to be provided. The clinical statements 
				returned would be only those clinical statements whose date fell within the range specified.

				The codeProperty attribute optionally specifies which property of the model contains the Code 
				or Codes for the clinical statement.

				The dateProperty attribute optionally specifies which property of the model contains the 
				clinically relevant date for the clinical statement.

				These properties (codeProperty and dateProperty) could potentially be specified elsewhere, 
				rather than on each Request expression, but allowing them at the request expression level 
				gives the most flexibility.

				The useValueSets attribute determines whether references to value sets in the Codes element 
				will be expanded, or left as value set references for the purposes of communicating across 
				the data boundary.

				The useSubsumption attribute determines whether subsumption should be used to determine
				whether or not a given data item should be included in the result.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="RequestBase">
				<xs:sequence>
					<xs:element name="codes" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="dateRange" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="subject" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
				<xs:attribute name="codeProperty" type="xs:string" use="optional"/>
				<xs:attribute name="dateProperty" type="xs:string" use="optional"/>
				<xs:attribute name="subjectProperty" type="xs:string" use="optional"/>
				<xs:attribute name="useValueSets" type="xs:boolean" use="optional" default="false"/>
				<xs:attribute name="useSubsumption" type="xs:boolean" use="optional" default="false"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- 
		TODO: This needs to be expanded, we need to know how to reference a value set.
		id and version is assumed for now, but we need a clear mechanism for referring
		to a value set.

		There is some discussion about using the CTS HL7 standard to inform the design
		of these operators.
	-->
	<xs:complexType name="ValueSet">
		<xs:annotation>
			<xs:documentation>
				Returns a list of codes whose elements are defined by the
				given value set authority for the given value set id and version.

				If version is an asterisk (*), the current version of the value
				set is returned.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:attribute name="id" type="xs:string" use="required"/>
				<xs:attribute name="version" type="xs:string" use="optional"/>
				<xs:attribute name="authority" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="InValueSet">
		<xs:annotation>
			<xs:documentation>
				Returns true if the given code, or list of codes, is in the
				given value set.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="UnaryExpression">
				<xs:attribute name="id" type="xs:string" use="required"/>
				<xs:attribute name="version" type="xs:string" use="optional"/>
				<xs:attribute name="authority" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- Subsumption Operators -->
	<xs:complexType name="Subsumes">
		<xs:annotation>
			<xs:documentation>
				This operator returns true if the operands were of the same code system, 
				and the ancestor operand subsumed the descendant operand in the hierarchy of 
				the code system. If the codes are the same code, the operator returns true.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="ancestor" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="descendent" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="SetSubsumes">
		<xs:annotation>
			<xs:documentation>
				This operator returns the list of descendants that were subsumed by some code 
				in the list of ancestors.
			</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="Expression">
				<xs:sequence>
					<xs:element name="ancestors" type="Expression" minOccurs="0" maxOccurs="1"/>
					<xs:element name="descendents" type="Expression" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!-- TODO: SubsumedSet operator? Given a code, returns the set of codes for which Subsumes would return true? -->
</xs:schema>
