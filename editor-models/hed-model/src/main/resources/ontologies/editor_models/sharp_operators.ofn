Prefix(a:=<http://asu.edu/sharpc2b/ops-set#>)
Prefix(dc2:=<http://purl.org/NET/dc_owl2dl#>)
Prefix(dul:=<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>)
Prefix(lmm:=<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#>)
Prefix(ops:=<http://asu.edu/sharpc2b/ops#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(prr:=<http://asu.edu/sharpc2b/prr#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(opsb:=<http://asu.edu/sharpc2b/opsb#>)
Prefix(opsc:=<http://asu.edu/sharpc2b/opsc#>)
Prefix(opsd:=<http://asu.edu/sharpc2b/opsd#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(shops:=<http://asu.edu/sharpc2b/shops#>)
Prefix(IOLite:=<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#>)
Prefix(dc2dul:=<http://asu.edu/sharpc2b/dc2dul#>)
Prefix(actions:=<http://asu.edu/sharpc2b/actions#>)
Prefix(skoslmm:=<http://asu.edu/sharpc2b/skoslmm#>)
Prefix(metadata:=<http://asu.edu/sharpc2b/metadata#>)
Prefix(skos-ext:=<http://asu.edu/sharpc2b/skos-ext#>)
Prefix(prr-sharp:=<http://asu.edu/sharpc2b/prr-sharp#>)
Prefix(sharp-master:=<http://asu.edu/sharpc2b/sharp-master#>)


Ontology(<http://asu.edu/sharpc2b/ops-set>
Import(<http://asu.edu/sharpc2b/ops>)

Declaration(Class(ops:AddressLiteral))
Declaration(Class(ops:BooleanLiteral))
Declaration(Class(ops:CodeLiteral))
Declaration(Class(ops:CodedOrdinalLiteral))
Declaration(Class(ops:ComplexLiteral))
Declaration(Class(ops:EntityNameLiteral))
Declaration(Class(ops:IdentifierLiteral))
Declaration(Class(ops:IntegerIntervalLiteral))
Declaration(Class(ops:IntegerLiteral))
Declaration(Class(ops:Literal))
Declaration(Class(ops:PeriodLiteral))
Declaration(Class(ops:PhysicalQuantityIntervalLiteral))
Declaration(Class(ops:PhysicalQuantityLiteral))
Declaration(Class(ops:QuantityIntervalLiteral))
Declaration(Class(ops:RatioLiteral))
Declaration(Class(ops:RealIntervalLiteral))
Declaration(Class(ops:RealLiteral))
Declaration(Class(ops:SimpleCodeLiteral))
Declaration(Class(ops:StringLiteral))
Declaration(Class(ops:TimestampIntervalLiteral))
Declaration(Class(ops:TimestampLiteral))
Declaration(Class(ops:UrlLiteral))
Declaration(NamedIndividual(a:AbsInteger))
Declaration(NamedIndividual(a:AbsIntegerCode))
Declaration(NamedIndividual(a:AbsReal))
Declaration(NamedIndividual(a:AbsRealCode))
Declaration(NamedIndividual(a:AcosInteger))
Declaration(NamedIndividual(a:AcosIntegerCode))
Declaration(NamedIndividual(a:AcosReal))
Declaration(NamedIndividual(a:AcosRealCode))
Declaration(NamedIndividual(a:AddInteger))
Declaration(NamedIndividual(a:AddIntegerCode))
Declaration(NamedIndividual(a:AddReal))
Declaration(NamedIndividual(a:AddRealCode))
Declaration(NamedIndividual(a:After))
Declaration(NamedIndividual(a:AfterCode))
Declaration(NamedIndividual(a:AllFalse))
Declaration(NamedIndividual(a:AllFalseCode))
Declaration(NamedIndividual(a:AllTrue))
Declaration(NamedIndividual(a:AllTrueCode))
Declaration(NamedIndividual(a:And))
Declaration(NamedIndividual(a:AndCode))
Declaration(NamedIndividual(a:AnyTrue))
Declaration(NamedIndividual(a:AnyTrueCode))
Declaration(NamedIndividual(a:AsinInteger))
Declaration(NamedIndividual(a:AsinIntegerCode))
Declaration(NamedIndividual(a:AsinReal))
Declaration(NamedIndividual(a:AsinRealCode))
Declaration(NamedIndividual(a:AtanInteger))
Declaration(NamedIndividual(a:AtanIntegerCode))
Declaration(NamedIndividual(a:AtanReal))
Declaration(NamedIndividual(a:AtanRealCode))
Declaration(NamedIndividual(a:AvgInteger))
Declaration(NamedIndividual(a:AvgIntegerCode))
Declaration(NamedIndividual(a:AvgReal))
Declaration(NamedIndividual(a:AvgRealCode))
Declaration(NamedIndividual(a:AvgTimeDuration))
Declaration(NamedIndividual(a:AvgTimeDurationCode))
Declaration(NamedIndividual(a:Before))
Declaration(NamedIndividual(a:BeforeCode))
Declaration(NamedIndividual(a:Begin))
Declaration(NamedIndividual(a:BeginCode))
Declaration(NamedIndividual(a:Ceiling))
Declaration(NamedIndividual(a:CeilingCode))
Declaration(NamedIndividual(a:Coalesce))
Declaration(NamedIndividual(a:CoalesceCode))
Declaration(NamedIndividual(a:Combine))
Declaration(NamedIndividual(a:CombineCode))
Declaration(NamedIndividual(a:Concat))
Declaration(NamedIndividual(a:ConcatCode))
Declaration(NamedIndividual(a:Conditional))
Declaration(NamedIndividual(a:ConditionalCode))
Declaration(NamedIndividual(a:ContainsInterval))
Declaration(NamedIndividual(a:ContainsIntervalCode))
Declaration(NamedIndividual(a:ContainsList))
Declaration(NamedIndividual(a:ContainsListCode))
Declaration(NamedIndividual(a:Convert))
Declaration(NamedIndividual(a:ConvertCode))
Declaration(NamedIndividual(a:CosInteger))
Declaration(NamedIndividual(a:CosIntegerCode))
Declaration(NamedIndividual(a:CosReal))
Declaration(NamedIndividual(a:CosRealCode))
Declaration(NamedIndividual(a:Count))
Declaration(NamedIndividual(a:CountCode))
Declaration(NamedIndividual(a:DateAdd))
Declaration(NamedIndividual(a:DateAddCode))
Declaration(NamedIndividual(a:DateDiff))
Declaration(NamedIndividual(a:DateDiffCode))
Declaration(NamedIndividual(a:DatePart))
Declaration(NamedIndividual(a:DatePartCode))
Declaration(NamedIndividual(a:DifferenceInterval))
Declaration(NamedIndividual(a:DifferenceIntervalCode))
Declaration(NamedIndividual(a:DifferenceList))
Declaration(NamedIndividual(a:DifferenceListCode))
Declaration(NamedIndividual(a:DivideInteger))
Declaration(NamedIndividual(a:DivideIntegerCode))
Declaration(NamedIndividual(a:DivideReal))
Declaration(NamedIndividual(a:DivideRealCode))
Declaration(NamedIndividual(a:Earliest))
Declaration(NamedIndividual(a:EarliestCode))
Declaration(NamedIndividual(a:End))
Declaration(NamedIndividual(a:EndCode))
Declaration(NamedIndividual(a:EqualBoolean))
Declaration(NamedIndividual(a:EqualBooleanCode))
Declaration(NamedIndividual(a:EqualInterval))
Declaration(NamedIndividual(a:EqualIntervalCode))
Declaration(NamedIndividual(a:EqualList))
Declaration(NamedIndividual(a:EqualListCode))
Declaration(NamedIndividual(a:EqualObject))
Declaration(NamedIndividual(a:EqualObjectCode))
Declaration(NamedIndividual(a:EqualScalar))
Declaration(NamedIndividual(a:EqualScalarCode))
Declaration(NamedIndividual(a:EqualString))
Declaration(NamedIndividual(a:EqualStringCode))
Declaration(NamedIndividual(a:Exist))
Declaration(NamedIndividual(a:ExistCode))
Declaration(NamedIndividual(a:ExpInteger))
Declaration(NamedIndividual(a:ExpIntegerCode))
Declaration(NamedIndividual(a:ExpReal))
Declaration(NamedIndividual(a:ExpRealCode))
Declaration(NamedIndividual(a:ExtractCharacters))
Declaration(NamedIndividual(a:ExtractCharactersCode))
Declaration(NamedIndividual(a:Filter))
Declaration(NamedIndividual(a:FilterCode))
Declaration(NamedIndividual(a:First))
Declaration(NamedIndividual(a:FirstCode))
Declaration(NamedIndividual(a:Flatten))
Declaration(NamedIndividual(a:FlattenCode))
Declaration(NamedIndividual(a:Floor))
Declaration(NamedIndividual(a:FloorCode))
Declaration(NamedIndividual(a:ForEach))
Declaration(NamedIndividual(a:ForEachCode))
Declaration(NamedIndividual(a:Greater))
Declaration(NamedIndividual(a:GreaterCode))
Declaration(NamedIndividual(a:GreaterOrEqual))
Declaration(NamedIndividual(a:GreaterOrEqualCode))
Declaration(NamedIndividual(a:IfNull))
Declaration(NamedIndividual(a:IfNullCode))
Declaration(NamedIndividual(a:InAny))
Declaration(NamedIndividual(a:InAnyCode))
Declaration(NamedIndividual(a:InList))
Declaration(NamedIndividual(a:InListCode))
Declaration(NamedIndividual(a:IndexEarliest))
Declaration(NamedIndividual(a:IndexEarliestCode))
Declaration(NamedIndividual(a:IndexLatest))
Declaration(NamedIndividual(a:IndexLatestCode))
Declaration(NamedIndividual(a:IndexMax))
Declaration(NamedIndividual(a:IndexMaxCode))
Declaration(NamedIndividual(a:IndexMin))
Declaration(NamedIndividual(a:IndexMinCode))
Declaration(NamedIndividual(a:IndexOf))
Declaration(NamedIndividual(a:IndexOfCode))
Declaration(NamedIndividual(a:IndexerList))
Declaration(NamedIndividual(a:IndexerListCode))
Declaration(NamedIndividual(a:IndexerString))
Declaration(NamedIndividual(a:IndexerStringCode))
Declaration(NamedIndividual(a:IntersectInterval))
Declaration(NamedIndividual(a:IntersectIntervalCode))
Declaration(NamedIndividual(a:IntersectList))
Declaration(NamedIndividual(a:IntersectListCode))
Declaration(NamedIndividual(a:Interval))
Declaration(NamedIndividual(a:IntervalCode))
Declaration(NamedIndividual(a:IsEmptyCollection))
Declaration(NamedIndividual(a:IsEmptyCollectionCode))
Declaration(NamedIndividual(a:IsEmptyList))
Declaration(NamedIndividual(a:IsEmptyListCode))
Declaration(NamedIndividual(a:IsNotEmpty))
Declaration(NamedIndividual(a:IsNotEmptyCode))
Declaration(NamedIndividual(a:IsNull))
Declaration(NamedIndividual(a:IsNullCode))
Declaration(NamedIndividual(a:Last))
Declaration(NamedIndividual(a:LastCode))
Declaration(NamedIndividual(a:Latest))
Declaration(NamedIndividual(a:LatestCode))
Declaration(NamedIndividual(a:LengthInterval))
Declaration(NamedIndividual(a:LengthIntervalCode))
Declaration(NamedIndividual(a:LengthString))
Declaration(NamedIndividual(a:LengthStringCode))
Declaration(NamedIndividual(a:Less))
Declaration(NamedIndividual(a:LessCode))
Declaration(NamedIndividual(a:LessOrEqual))
Declaration(NamedIndividual(a:LessOrEqualCode))
Declaration(NamedIndividual(a:List))
Declaration(NamedIndividual(a:ListCode))
Declaration(NamedIndividual(a:Ln))
Declaration(NamedIndividual(a:LnCode))
Declaration(NamedIndividual(a:Log))
Declaration(NamedIndividual(a:Log10))
Declaration(NamedIndividual(a:Log10Code))
Declaration(NamedIndividual(a:LogCode))
Declaration(NamedIndividual(a:Lower))
Declaration(NamedIndividual(a:LowerCode))
Declaration(NamedIndividual(a:Max))
Declaration(NamedIndividual(a:MaxCode))
Declaration(NamedIndividual(a:MaxInteger))
Declaration(NamedIndividual(a:MaxIntegerCode))
Declaration(NamedIndividual(a:MaxReal))
Declaration(NamedIndividual(a:MaxRealCode))
Declaration(NamedIndividual(a:Median))
Declaration(NamedIndividual(a:MedianCode))
Declaration(NamedIndividual(a:Meets))
Declaration(NamedIndividual(a:MeetsCode))
Declaration(NamedIndividual(a:Min))
Declaration(NamedIndividual(a:MinCode))
Declaration(NamedIndividual(a:MinInteger))
Declaration(NamedIndividual(a:MinIntegerCode))
Declaration(NamedIndividual(a:MinReal))
Declaration(NamedIndividual(a:MinRealCode))
Declaration(NamedIndividual(a:ModuloInteger))
Declaration(NamedIndividual(a:ModuloIntegerCode))
Declaration(NamedIndividual(a:ModuloReal))
Declaration(NamedIndividual(a:ModuloRealCode))
Declaration(NamedIndividual(a:MultiplyInteger))
Declaration(NamedIndividual(a:MultiplyIntegerCode))
Declaration(NamedIndividual(a:MultiplyReal))
Declaration(NamedIndividual(a:MultiplyRealCode))
Declaration(NamedIndividual(a:NegateInteger))
Declaration(NamedIndividual(a:NegateIntegerCode))
Declaration(NamedIndividual(a:NegateReal))
Declaration(NamedIndividual(a:NegateRealCode))
Declaration(NamedIndividual(a:Not))
Declaration(NamedIndividual(a:NotCode))
Declaration(NamedIndividual(a:NotEqual))
Declaration(NamedIndividual(a:NotEqualCode))
Declaration(NamedIndividual(a:ObjectRedefine))
Declaration(NamedIndividual(a:ObjectRedefineCode))
Declaration(NamedIndividual(a:Or))
Declaration(NamedIndividual(a:OrCode))
Declaration(NamedIndividual(a:Overlaps))
Declaration(NamedIndividual(a:OverlapsCode))
Declaration(NamedIndividual(a:Pos))
Declaration(NamedIndividual(a:PosCode))
Declaration(NamedIndividual(a:PowerInteger))
Declaration(NamedIndividual(a:PowerIntegerCode))
Declaration(NamedIndividual(a:PowerReal))
Declaration(NamedIndividual(a:PowerRealCode))
Declaration(NamedIndividual(a:Pred))
Declaration(NamedIndividual(a:PredCode))
Declaration(NamedIndividual(a:ProperContainsInterval))
Declaration(NamedIndividual(a:ProperContainsIntervalCode))
Declaration(NamedIndividual(a:ProperContainsList))
Declaration(NamedIndividual(a:ProperContainsListCode))
Declaration(NamedIndividual(a:ProperInInterval))
Declaration(NamedIndividual(a:ProperInIntervalCode))
Declaration(NamedIndividual(a:ProperInList))
Declaration(NamedIndividual(a:ProperInListCode))
Declaration(NamedIndividual(a:Reverse))
Declaration(NamedIndividual(a:ReverseCode))
Declaration(NamedIndividual(a:Round))
Declaration(NamedIndividual(a:RoundCode))
Declaration(NamedIndividual(a:RoundReal))
Declaration(NamedIndividual(a:RoundRealCode))
Declaration(NamedIndividual(a:SeqTo))
Declaration(NamedIndividual(a:SeqToCode))
Declaration(NamedIndividual(a:SinInteger))
Declaration(NamedIndividual(a:SinIntegerCode))
Declaration(NamedIndividual(a:SinReal))
Declaration(NamedIndividual(a:SinRealCode))
Declaration(NamedIndividual(a:Sort))
Declaration(NamedIndividual(a:SortCode))
Declaration(NamedIndividual(a:Split))
Declaration(NamedIndividual(a:SplitCode))
Declaration(NamedIndividual(a:SqrtInteger))
Declaration(NamedIndividual(a:SqrtIntegerCode))
Declaration(NamedIndividual(a:SqrtReal))
Declaration(NamedIndividual(a:SqrtRealCode))
Declaration(NamedIndividual(a:StdDev))
Declaration(NamedIndividual(a:StdDevCode))
Declaration(NamedIndividual(a:String))
Declaration(NamedIndividual(a:StringCode))
Declaration(NamedIndividual(a:Substring))
Declaration(NamedIndividual(a:SubstringCode))
Declaration(NamedIndividual(a:SubtractInteger))
Declaration(NamedIndividual(a:SubtractIntegerCode))
Declaration(NamedIndividual(a:SubtractReal))
Declaration(NamedIndividual(a:SubtractRealCode))
Declaration(NamedIndividual(a:Succ))
Declaration(NamedIndividual(a:SuccCode))
Declaration(NamedIndividual(a:SumInteger))
Declaration(NamedIndividual(a:SumIntegerCode))
Declaration(NamedIndividual(a:SumReal))
Declaration(NamedIndividual(a:SumRealCode))
Declaration(NamedIndividual(a:TanInteger))
Declaration(NamedIndividual(a:TanIntegerCode))
Declaration(NamedIndividual(a:TanReal))
Declaration(NamedIndividual(a:TanRealCode))
Declaration(NamedIndividual(a:ToString))
Declaration(NamedIndividual(a:ToStringCode))
Declaration(NamedIndividual(a:Trim))
Declaration(NamedIndividual(a:TrimCode))
Declaration(NamedIndividual(a:TrimLeft))
Declaration(NamedIndividual(a:TrimLeftCode))
Declaration(NamedIndividual(a:TrimRight))
Declaration(NamedIndividual(a:TrimRightCode))
Declaration(NamedIndividual(a:TruncatedDivide))
Declaration(NamedIndividual(a:TruncatedDivideCode))
Declaration(NamedIndividual(a:UnionInterval))
Declaration(NamedIndividual(a:UnionIntervalCode))
Declaration(NamedIndividual(a:UnionList))
Declaration(NamedIndividual(a:UnionListCode))
Declaration(NamedIndividual(a:Upper))
Declaration(NamedIndividual(a:UpperCode))
Declaration(NamedIndividual(a:Variance))
Declaration(NamedIndividual(a:VarianceCode))
Declaration(NamedIndividual(a:WithinAny))
Declaration(NamedIndividual(a:WithinAnyCode))
Declaration(NamedIndividual(a:WithinInterval))
Declaration(NamedIndividual(a:WithinIntervalCode))
Declaration(NamedIndividual(a:Xor))
Declaration(NamedIndividual(a:XorCode))
SubClassOf(ops:AddressLiteral ops:PrimitiveExpression)
SubClassOf(ops:AddressLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "part"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:AddressLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "use"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:BooleanLiteral ops:PrimitiveExpression)
SubClassOf(ops:BooleanLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:CodeLiteral ops:PrimitiveExpression)
SubClassOf(ops:CodeLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "code"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodeLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "codeSystem"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodeLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "codeSystemName"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodeLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "displayName"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodedOrdinalLiteral ops:PrimitiveExpression)
SubClassOf(ops:CodedOrdinalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "code"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodedOrdinalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "codeSystem"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodedOrdinalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "codeSystemName"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodedOrdinalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "displayName"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:CodedOrdinalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:double"^^xsd:string))))
SubClassOf(ops:ComplexLiteral ops:PrimitiveExpression)
SubClassOf(ops:ComplexLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:EntityNameLiteral ops:PrimitiveExpression)
SubClassOf(ops:EntityNameLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "part"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:EntityNameLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "use"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:IdentifierLiteral ops:PrimitiveExpression)
SubClassOf(ops:IdentifierLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "extension"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:IdentifierLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "root"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:IntegerIntervalLiteral ops:PrimitiveExpression)
SubClassOf(ops:IntegerIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "high"^^xsd:string) DataHasValue(ops:attributeType "xsd:int"^^xsd:string))))
SubClassOf(ops:IntegerIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "highClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:IntegerIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "low"^^xsd:string) DataHasValue(ops:attributeType "xsd:int"^^xsd:string))))
SubClassOf(ops:IntegerIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "lowClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:IntegerLiteral ops:PrimitiveExpression)
SubClassOf(ops:IntegerLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:int"^^xsd:string))))
SubClassOf(ops:Literal ops:PrimitiveExpression)
SubClassOf(ops:Literal ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:Literal ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "valueType"^^xsd:string) DataHasValue(ops:attributeType "xsd:anyURI"^^xsd:string))))
SubClassOf(ops:PeriodLiteral ops:PrimitiveExpression)
SubClassOf(ops:PeriodLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "alignment"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PeriodLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "count"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PeriodLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "frequency"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PeriodLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "isFlexible"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:PeriodLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "period"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PeriodLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "phase"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PhysicalQuantityIntervalLiteral ops:PrimitiveExpression)
SubClassOf(ops:PhysicalQuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "high"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PhysicalQuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "highClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:PhysicalQuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "low"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PhysicalQuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "lowClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:PhysicalQuantityLiteral ops:PrimitiveExpression)
SubClassOf(ops:PhysicalQuantityLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "unit"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:PhysicalQuantityLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:double"^^xsd:string))))
SubClassOf(ops:QuantityIntervalLiteral ops:PrimitiveExpression)
SubClassOf(ops:QuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "high"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:QuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "highClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:QuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "low"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:QuantityIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "lowClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:RatioLiteral ops:PrimitiveExpression)
SubClassOf(ops:RatioLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "denominator"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:RatioLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "numerator"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:RealIntervalLiteral ops:PrimitiveExpression)
SubClassOf(ops:RealIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "high"^^xsd:string) DataHasValue(ops:attributeType "xsd:double"^^xsd:string))))
SubClassOf(ops:RealIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "highClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:RealIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "low"^^xsd:string) DataHasValue(ops:attributeType "xsd:double"^^xsd:string))))
SubClassOf(ops:RealIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "lowClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:RealLiteral ops:PrimitiveExpression)
SubClassOf(ops:RealLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:double"^^xsd:string))))
SubClassOf(ops:SimpleCodeLiteral ops:PrimitiveExpression)
SubClassOf(ops:SimpleCodeLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "code"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:StringLiteral ops:PrimitiveExpression)
SubClassOf(ops:StringLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:TimestampIntervalLiteral ops:PrimitiveExpression)
SubClassOf(ops:TimestampIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "high"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:TimestampIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "highClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:TimestampIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "low"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:TimestampIntervalLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "lowClosed"^^xsd:string) DataHasValue(ops:attributeType "xsd:boolean"^^xsd:string))))
SubClassOf(ops:TimestampLiteral ops:PrimitiveExpression)
SubClassOf(ops:TimestampLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:dateTimeStamp"^^xsd:string))))
SubClassOf(ops:UrlLiteral ops:PrimitiveExpression)
SubClassOf(ops:UrlLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "capabilities"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:UrlLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "use"^^xsd:string) DataHasValue(ops:attributeType "xsd:string"^^xsd:string))))
SubClassOf(ops:UrlLiteral ObjectSomeValuesFrom(ops:hasAttribute ObjectIntersectionOf(ops:Attribute DataHasValue(ops:attributeName "value"^^xsd:string) DataHasValue(ops:attributeType "xsd:anyURI"^^xsd:string))))
EquivalentClasses(a:AbsIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AbsInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AbsIntegerExpression ops:IntegerExpression)
SubClassOf(a:AbsIntegerExpression ops:OperatorExpression)
SubClassOf(a:AbsIntegerExpression ops:UnaryExpression)
SubClassOf(a:AbsIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:AbsIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AbsInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AbsRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AbsReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AbsRealExpression ops:OperatorExpression)
SubClassOf(a:AbsRealExpression ops:RealExpression)
SubClassOf(a:AbsRealExpression ops:UnaryExpression)
SubClassOf(a:AbsRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:AbsRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AbsReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AcosIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AcosInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AcosIntegerExpression ops:OperatorExpression)
SubClassOf(a:AcosIntegerExpression ops:RealExpression)
SubClassOf(a:AcosIntegerExpression ops:UnaryExpression)
SubClassOf(a:AcosIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:AcosIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AcosInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AcosRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AcosReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AcosRealExpression ops:OperatorExpression)
SubClassOf(a:AcosRealExpression ops:RealExpression)
SubClassOf(a:AcosRealExpression ops:UnaryExpression)
SubClassOf(a:AcosRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:AcosRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AcosReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AddIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AddInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:AddIntegerExpression ops:BinaryExpression)
SubClassOf(a:AddIntegerExpression ops:IntegerExpression)
SubClassOf(a:AddIntegerExpression ops:OperatorExpression)
SubClassOf(a:AddIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:AddIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AddInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:AddIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:AddRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AddReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:AddRealExpression ops:BinaryExpression)
SubClassOf(a:AddRealExpression ops:OperatorExpression)
SubClassOf(a:AddRealExpression ops:RealExpression)
SubClassOf(a:AddRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:AddRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AddReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:AddRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:AfterExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "After"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:AfterExpression ops:BinaryExpression)
SubClassOf(a:AfterExpression ops:BooleanExpression)
SubClassOf(a:AfterExpression ops:OperatorExpression)
SubClassOf(a:AfterExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:AfterExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "After"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:AfterExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:AllFalseExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AllFalse"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AllFalseExpression ops:BooleanExpression)
SubClassOf(a:AllFalseExpression ops:NAryExpression)
SubClassOf(a:AllFalseExpression ops:OperatorExpression)
SubClassOf(a:AllFalseExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AllFalseExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AllFalse"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AllTrueExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AllTrue"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AllTrueExpression ops:BooleanExpression)
SubClassOf(a:AllTrueExpression ops:NAryExpression)
SubClassOf(a:AllTrueExpression ops:OperatorExpression)
SubClassOf(a:AllTrueExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AllTrueExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AllTrue"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AndExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "And"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AndExpression ops:BooleanExpression)
SubClassOf(a:AndExpression ops:NAryExpression)
SubClassOf(a:AndExpression ops:OperatorExpression)
SubClassOf(a:AndExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AndExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "And"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AnyTrueExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AnyTrue"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AnyTrueExpression ops:BooleanExpression)
SubClassOf(a:AnyTrueExpression ops:NAryExpression)
SubClassOf(a:AnyTrueExpression ops:OperatorExpression)
SubClassOf(a:AnyTrueExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AnyTrueExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AnyTrue"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AsinIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AsinInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AsinIntegerExpression ops:OperatorExpression)
SubClassOf(a:AsinIntegerExpression ops:RealExpression)
SubClassOf(a:AsinIntegerExpression ops:UnaryExpression)
SubClassOf(a:AsinIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:AsinIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AsinInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AsinRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AsinReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AsinRealExpression ops:OperatorExpression)
SubClassOf(a:AsinRealExpression ops:RealExpression)
SubClassOf(a:AsinRealExpression ops:UnaryExpression)
SubClassOf(a:AsinRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:AsinRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AsinReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AtanIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AtanInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AtanIntegerExpression ops:OperatorExpression)
SubClassOf(a:AtanIntegerExpression ops:RealExpression)
SubClassOf(a:AtanIntegerExpression ops:UnaryExpression)
SubClassOf(a:AtanIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:AtanIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AtanInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AtanRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AtanReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:AtanRealExpression ops:OperatorExpression)
SubClassOf(a:AtanRealExpression ops:RealExpression)
SubClassOf(a:AtanRealExpression ops:UnaryExpression)
SubClassOf(a:AtanRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:AtanRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AtanReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AvgIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AvgInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AvgIntegerExpression ops:NAryExpression)
SubClassOf(a:AvgIntegerExpression ops:OperatorExpression)
SubClassOf(a:AvgIntegerExpression ops:RealExpression)
SubClassOf(a:AvgIntegerExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AvgIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AvgInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AvgRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AvgReal"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AvgRealExpression ops:NAryExpression)
SubClassOf(a:AvgRealExpression ops:OperatorExpression)
SubClassOf(a:AvgRealExpression ops:RealExpression)
SubClassOf(a:AvgRealExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AvgRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AvgReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:AvgTimeDurationExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AvgTimeDuration"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:AvgTimeDurationExpression ops:NAryExpression)
SubClassOf(a:AvgTimeDurationExpression ops:OperatorExpression)
SubClassOf(a:AvgTimeDurationExpression ops:TimeDurationExpression)
SubClassOf(a:AvgTimeDurationExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:AvgTimeDurationExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "AvgTimeDuration"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:BeforeExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Before"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:BeforeExpression ops:BinaryExpression)
SubClassOf(a:BeforeExpression ops:BooleanExpression)
SubClassOf(a:BeforeExpression ops:OperatorExpression)
SubClassOf(a:BeforeExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:BeforeExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Before"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:BeforeExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:BeginExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Begin"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:BeginExpression ops:OperatorExpression)
SubClassOf(a:BeginExpression ops:UnaryExpression)
SubClassOf(a:BeginExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:BeginExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Begin"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:CeilingExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Ceiling"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:CeilingExpression ops:IntegerExpression)
SubClassOf(a:CeilingExpression ops:OperatorExpression)
SubClassOf(a:CeilingExpression ops:UnaryExpression)
SubClassOf(a:CeilingExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:CeilingExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Ceiling"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:CoalesceExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Coalesce"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:CoalesceExpression ops:NAryExpression)
SubClassOf(a:CoalesceExpression ops:OperatorExpression)
SubClassOf(a:CoalesceExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:CoalesceExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Coalesce"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:CombineExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Combine"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(a:CombineExpression ops:BinaryExpression)
SubClassOf(a:CombineExpression ops:OperatorExpression)
SubClassOf(a:CombineExpression ops:StringExpression)
SubClassOf(a:CombineExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:CombineExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Combine"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:CombineExpression ObjectAllValuesFrom(ops:secondOperand ops:StringExpression))
EquivalentClasses(a:ConcatExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Concat"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:ConcatExpression ops:NAryExpression)
SubClassOf(a:ConcatExpression ops:OperatorExpression)
SubClassOf(a:ConcatExpression ops:StringExpression)
SubClassOf(a:ConcatExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:ConcatExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Concat"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ConditionalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Conditional"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:OperatorExpression)))
SubClassOf(a:ConditionalExpression ops:OperatorExpression)
SubClassOf(a:ConditionalExpression ops:TernaryExpression)
SubClassOf(a:ConditionalExpression ObjectAllValuesFrom(ops:firstOperand ops:BooleanExpression))
SubClassOf(a:ConditionalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Conditional"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ConditionalExpression ObjectAllValuesFrom(ops:secondOperand ops:OperatorExpression))
SubClassOf(a:ConditionalExpression ObjectAllValuesFrom(ops:thirdOperand ops:OperatorExpression))
EquivalentClasses(a:ContainsIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ContainsInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:ContainsIntervalExpression ops:BinaryExpression)
SubClassOf(a:ContainsIntervalExpression ops:BooleanExpression)
SubClassOf(a:ContainsIntervalExpression ops:OperatorExpression)
SubClassOf(a:ContainsIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:ContainsIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ContainsInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ContainsIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:ContainsListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ContainsList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:ContainsListExpression ops:BinaryExpression)
SubClassOf(a:ContainsListExpression ops:BooleanExpression)
SubClassOf(a:ContainsListExpression ops:OperatorExpression)
SubClassOf(a:ContainsListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:ContainsListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ContainsList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ContainsListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:ConvertExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Convert"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:ConvertExpression ops:OperatorExpression)
SubClassOf(a:ConvertExpression ops:UnaryExpression)
SubClassOf(a:ConvertExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:ConvertExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Convert"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:CosIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "CosInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:CosIntegerExpression ops:OperatorExpression)
SubClassOf(a:CosIntegerExpression ops:RealExpression)
SubClassOf(a:CosIntegerExpression ops:UnaryExpression)
SubClassOf(a:CosIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:CosIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "CosInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:CosRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "CosReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:CosRealExpression ops:OperatorExpression)
SubClassOf(a:CosRealExpression ops:RealExpression)
SubClassOf(a:CosRealExpression ops:UnaryExpression)
SubClassOf(a:CosRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:CosRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "CosReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:CountExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Count"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:CountExpression ops:IntegerExpression)
SubClassOf(a:CountExpression ops:NAryExpression)
SubClassOf(a:CountExpression ops:OperatorExpression)
SubClassOf(a:CountExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:CountExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Count"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:DateAddExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DateAdd"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:DateGranularityExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:RealExpression)))
SubClassOf(a:DateAddExpression ops:OperatorExpression)
SubClassOf(a:DateAddExpression ops:TernaryExpression)
SubClassOf(a:DateAddExpression ops:TimestampExpression)
SubClassOf(a:DateAddExpression ObjectAllValuesFrom(ops:firstOperand ops:TimestampExpression))
SubClassOf(a:DateAddExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DateAdd"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DateAddExpression ObjectAllValuesFrom(ops:secondOperand ops:DateGranularityExpression))
SubClassOf(a:DateAddExpression ObjectAllValuesFrom(ops:thirdOperand ops:RealExpression))
EquivalentClasses(a:DateDiffExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DateDiff"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:DateGranularityExpression)))
SubClassOf(a:DateDiffExpression ops:OperatorExpression)
SubClassOf(a:DateDiffExpression ops:RealExpression)
SubClassOf(a:DateDiffExpression ops:TernaryExpression)
SubClassOf(a:DateDiffExpression ObjectAllValuesFrom(ops:firstOperand ops:TimestampExpression))
SubClassOf(a:DateDiffExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DateDiff"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DateDiffExpression ObjectAllValuesFrom(ops:secondOperand ops:TimestampExpression))
SubClassOf(a:DateDiffExpression ObjectAllValuesFrom(ops:thirdOperand ops:DateGranularityExpression))
EquivalentClasses(a:DatePartExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DatePart"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:DateGranularityExpression)))
SubClassOf(a:DatePartExpression ops:BinaryExpression)
SubClassOf(a:DatePartExpression ops:OperatorExpression)
SubClassOf(a:DatePartExpression ops:RealExpression)
SubClassOf(a:DatePartExpression ObjectAllValuesFrom(ops:firstOperand ops:TimestampExpression))
SubClassOf(a:DatePartExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DatePart"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DatePartExpression ObjectAllValuesFrom(ops:secondOperand ops:DateGranularityExpression))
EquivalentClasses(a:DifferenceIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DifferenceInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:DifferenceIntervalExpression ops:BinaryExpression)
SubClassOf(a:DifferenceIntervalExpression ops:IntervalExpression)
SubClassOf(a:DifferenceIntervalExpression ops:OperatorExpression)
SubClassOf(a:DifferenceIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:DifferenceIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DifferenceInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DifferenceIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:DifferenceListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DifferenceList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:DifferenceListExpression ops:BinaryExpression)
SubClassOf(a:DifferenceListExpression ops:ListExpression)
SubClassOf(a:DifferenceListExpression ops:OperatorExpression)
SubClassOf(a:DifferenceListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:DifferenceListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DifferenceList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DifferenceListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:DivideIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DivideInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:DivideIntegerExpression ops:BinaryExpression)
SubClassOf(a:DivideIntegerExpression ops:OperatorExpression)
SubClassOf(a:DivideIntegerExpression ops:RealExpression)
SubClassOf(a:DivideIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:DivideIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DivideInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DivideIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:DivideRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DivideReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:DivideRealExpression ops:BinaryExpression)
SubClassOf(a:DivideRealExpression ops:OperatorExpression)
SubClassOf(a:DivideRealExpression ops:RealExpression)
SubClassOf(a:DivideRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:DivideRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "DivideReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:DivideRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:EarliestExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Earliest"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:EarliestExpression ops:NAryExpression)
SubClassOf(a:EarliestExpression ops:OperatorExpression)
SubClassOf(a:EarliestExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:EarliestExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Earliest"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:EndExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "End"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:EndExpression ops:OperatorExpression)
SubClassOf(a:EndExpression ops:UnaryExpression)
SubClassOf(a:EndExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:EndExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "End"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:EqualBooleanExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualBoolean"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:BooleanExpression)))
SubClassOf(a:EqualBooleanExpression ops:BinaryExpression)
SubClassOf(a:EqualBooleanExpression ops:BooleanExpression)
SubClassOf(a:EqualBooleanExpression ops:OperatorExpression)
SubClassOf(a:EqualBooleanExpression ObjectAllValuesFrom(ops:firstOperand ops:BooleanExpression))
SubClassOf(a:EqualBooleanExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualBoolean"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:EqualBooleanExpression ObjectAllValuesFrom(ops:secondOperand ops:BooleanExpression))
EquivalentClasses(a:EqualIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:EqualIntervalExpression ops:BinaryExpression)
SubClassOf(a:EqualIntervalExpression ops:BooleanExpression)
SubClassOf(a:EqualIntervalExpression ops:OperatorExpression)
SubClassOf(a:EqualIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:EqualIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:EqualIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:EqualListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:EqualListExpression ops:BinaryExpression)
SubClassOf(a:EqualListExpression ops:BooleanExpression)
SubClassOf(a:EqualListExpression ops:ListExpression)
SubClassOf(a:EqualListExpression ops:OperatorExpression)
SubClassOf(a:EqualListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:EqualListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:EqualListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:EqualObjectExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ObjectExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualObject"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ObjectExpression)))
SubClassOf(a:EqualObjectExpression ops:BinaryExpression)
SubClassOf(a:EqualObjectExpression ops:BooleanExpression)
SubClassOf(a:EqualObjectExpression ops:OperatorExpression)
SubClassOf(a:EqualObjectExpression ObjectAllValuesFrom(ops:firstOperand ops:ObjectExpression))
SubClassOf(a:EqualObjectExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualObject"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:EqualObjectExpression ObjectAllValuesFrom(ops:secondOperand ops:ObjectExpression))
EquivalentClasses(a:EqualScalarExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualScalar"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(a:EqualScalarExpression ops:BinaryExpression)
SubClassOf(a:EqualScalarExpression ops:BooleanExpression)
SubClassOf(a:EqualScalarExpression ops:OperatorExpression)
SubClassOf(a:EqualScalarExpression ObjectAllValuesFrom(ops:firstOperand ops:ScalarExpression))
SubClassOf(a:EqualScalarExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualScalar"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:EqualScalarExpression ObjectAllValuesFrom(ops:secondOperand ops:ScalarExpression))
EquivalentClasses(a:EqualStringExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualString"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(a:EqualStringExpression ops:BinaryExpression)
SubClassOf(a:EqualStringExpression ops:BooleanExpression)
SubClassOf(a:EqualStringExpression ops:OperatorExpression)
SubClassOf(a:EqualStringExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:EqualStringExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "EqualString"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:EqualStringExpression ObjectAllValuesFrom(ops:secondOperand ops:StringExpression))
EquivalentClasses(a:ExistExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Exist"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:ExistExpression ops:BooleanExpression)
SubClassOf(a:ExistExpression ops:NAryExpression)
SubClassOf(a:ExistExpression ops:OperatorExpression)
SubClassOf(a:ExistExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:ExistExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Exist"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ExpIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ExpInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:ExpIntegerExpression ops:OperatorExpression)
SubClassOf(a:ExpIntegerExpression ops:RealExpression)
SubClassOf(a:ExpIntegerExpression ops:UnaryExpression)
SubClassOf(a:ExpIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:ExpIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ExpInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ExpRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ExpReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:ExpRealExpression ops:OperatorExpression)
SubClassOf(a:ExpRealExpression ops:RealExpression)
SubClassOf(a:ExpRealExpression ops:UnaryExpression)
SubClassOf(a:ExpRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:ExpRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ExpReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ExtractCharactersExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ExtractCharacters"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:ExtractCharactersExpression ops:ListExpression)
SubClassOf(a:ExtractCharactersExpression ops:NAryExpression)
SubClassOf(a:ExtractCharactersExpression ops:OperatorExpression)
SubClassOf(a:ExtractCharactersExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:ExtractCharactersExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ExtractCharacters"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:FilterExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Filter"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:BooleanExpression)))
SubClassOf(a:FilterExpression ops:BinaryExpression)
SubClassOf(a:FilterExpression ops:ListExpression)
SubClassOf(a:FilterExpression ops:OperatorExpression)
SubClassOf(a:FilterExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:FilterExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Filter"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:FilterExpression ObjectAllValuesFrom(ops:secondOperand ops:BooleanExpression))
EquivalentClasses(a:FirstExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "First"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:FirstExpression ops:OperatorExpression)
SubClassOf(a:FirstExpression ops:UnaryExpression)
SubClassOf(a:FirstExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:FirstExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "First"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:FlattenExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Flatten"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:FlattenExpression ops:ListExpression)
SubClassOf(a:FlattenExpression ops:NAryExpression)
SubClassOf(a:FlattenExpression ops:OperatorExpression)
SubClassOf(a:FlattenExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:FlattenExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Flatten"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:FloorExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Floor"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:FloorExpression ops:IntegerExpression)
SubClassOf(a:FloorExpression ops:OperatorExpression)
SubClassOf(a:FloorExpression ops:UnaryExpression)
SubClassOf(a:FloorExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:FloorExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Floor"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ForEachExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ForEach"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:OperatorExpression)))
SubClassOf(a:ForEachExpression ops:BinaryExpression)
SubClassOf(a:ForEachExpression ops:ListExpression)
SubClassOf(a:ForEachExpression ops:OperatorExpression)
SubClassOf(a:ForEachExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:ForEachExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ForEach"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ForEachExpression ObjectAllValuesFrom(ops:secondOperand ops:OperatorExpression))
EquivalentClasses(a:GreaterExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Greater"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(a:GreaterExpression ops:BinaryExpression)
SubClassOf(a:GreaterExpression ops:BooleanExpression)
SubClassOf(a:GreaterExpression ops:OperatorExpression)
SubClassOf(a:GreaterExpression ObjectAllValuesFrom(ops:firstOperand ops:ScalarExpression))
SubClassOf(a:GreaterExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Greater"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:GreaterExpression ObjectAllValuesFrom(ops:secondOperand ops:ScalarExpression))
EquivalentClasses(a:GreaterOrEqualExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "GreaterOrEqual"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(a:GreaterOrEqualExpression ops:BinaryExpression)
SubClassOf(a:GreaterOrEqualExpression ops:BooleanExpression)
SubClassOf(a:GreaterOrEqualExpression ops:OperatorExpression)
SubClassOf(a:GreaterOrEqualExpression ObjectAllValuesFrom(ops:firstOperand ops:ScalarExpression))
SubClassOf(a:GreaterOrEqualExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "GreaterOrEqual"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:GreaterOrEqualExpression ObjectAllValuesFrom(ops:secondOperand ops:ScalarExpression))
EquivalentClasses(a:IfNullExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IfNull"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:OperatorExpression)))
SubClassOf(a:IfNullExpression ops:BinaryExpression)
SubClassOf(a:IfNullExpression ops:OperatorExpression)
SubClassOf(a:IfNullExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:IfNullExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IfNull"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IfNullExpression ObjectAllValuesFrom(ops:secondOperand ops:OperatorExpression))
EquivalentClasses(a:InAnyExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "InAny"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:InAnyExpression ops:BinaryExpression)
SubClassOf(a:InAnyExpression ops:BooleanExpression)
SubClassOf(a:InAnyExpression ops:OperatorExpression)
SubClassOf(a:InAnyExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:InAnyExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "InAny"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:InAnyExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:InListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "InList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:InListExpression ops:BinaryExpression)
SubClassOf(a:InListExpression ops:BooleanExpression)
SubClassOf(a:InListExpression ops:OperatorExpression)
SubClassOf(a:InListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:InListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "InList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:InListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:IndexEarliestExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexEarliest"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:IndexEarliestExpression ops:NAryExpression)
SubClassOf(a:IndexEarliestExpression ops:OperatorExpression)
SubClassOf(a:IndexEarliestExpression ops:RealExpression)
SubClassOf(a:IndexEarliestExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:IndexEarliestExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexEarliest"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IndexLatestExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexLatest"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:IndexLatestExpression ops:NAryExpression)
SubClassOf(a:IndexLatestExpression ops:OperatorExpression)
SubClassOf(a:IndexLatestExpression ops:RealExpression)
SubClassOf(a:IndexLatestExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:IndexLatestExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexLatest"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IndexMaxExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexMax"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:IndexMaxExpression ops:NAryExpression)
SubClassOf(a:IndexMaxExpression ops:OperatorExpression)
SubClassOf(a:IndexMaxExpression ops:RealExpression)
SubClassOf(a:IndexMaxExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:IndexMaxExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexMax"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IndexMinExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexMin"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:IndexMinExpression ops:NAryExpression)
SubClassOf(a:IndexMinExpression ops:OperatorExpression)
SubClassOf(a:IndexMinExpression ops:RealExpression)
SubClassOf(a:IndexMinExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:IndexMinExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexMin"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IndexOfExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexOf"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:OperatorExpression)))
SubClassOf(a:IndexOfExpression ops:BinaryExpression)
SubClassOf(a:IndexOfExpression ops:IntegerExpression)
SubClassOf(a:IndexOfExpression ops:OperatorExpression)
SubClassOf(a:IndexOfExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:IndexOfExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexOf"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IndexOfExpression ObjectAllValuesFrom(ops:secondOperand ops:OperatorExpression))
EquivalentClasses(a:IndexerListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexerList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:IndexerListExpression ops:BinaryExpression)
SubClassOf(a:IndexerListExpression ops:OperatorExpression)
SubClassOf(a:IndexerListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:IndexerListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexerList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IndexerListExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:IndexerStringExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexerString"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:IndexerStringExpression ops:BinaryExpression)
SubClassOf(a:IndexerStringExpression ops:OperatorExpression)
SubClassOf(a:IndexerStringExpression ops:StringExpression)
SubClassOf(a:IndexerStringExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:IndexerStringExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IndexerString"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IndexerStringExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:IntersectIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IntersectInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:IntersectIntervalExpression ops:BinaryExpression)
SubClassOf(a:IntersectIntervalExpression ops:IntervalExpression)
SubClassOf(a:IntersectIntervalExpression ops:OperatorExpression)
SubClassOf(a:IntersectIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:IntersectIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IntersectInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IntersectIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:IntersectListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IntersectList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:IntersectListExpression ops:BinaryExpression)
SubClassOf(a:IntersectListExpression ops:ListExpression)
SubClassOf(a:IntersectListExpression ops:OperatorExpression)
SubClassOf(a:IntersectListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:IntersectListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IntersectList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IntersectListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:IntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Interval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:OperatorExpression)))
SubClassOf(a:IntervalExpression ops:BinaryExpression)
SubClassOf(a:IntervalExpression ops:IntervalExpression)
SubClassOf(a:IntervalExpression ops:OperatorExpression)
SubClassOf(a:IntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:IntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Interval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:IntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:OperatorExpression))
EquivalentClasses(a:IsEmptyCollectionExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:CollectionExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsEmptyCollection"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:IsEmptyCollectionExpression ops:BooleanExpression)
SubClassOf(a:IsEmptyCollectionExpression ops:OperatorExpression)
SubClassOf(a:IsEmptyCollectionExpression ops:UnaryExpression)
SubClassOf(a:IsEmptyCollectionExpression ObjectAllValuesFrom(ops:firstOperand ops:CollectionExpression))
SubClassOf(a:IsEmptyCollectionExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsEmptyCollection"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IsEmptyListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsEmptyList"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:IsEmptyListExpression ops:BooleanExpression)
SubClassOf(a:IsEmptyListExpression ops:OperatorExpression)
SubClassOf(a:IsEmptyListExpression ops:UnaryExpression)
SubClassOf(a:IsEmptyListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:IsEmptyListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsEmptyList"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IsNotEmptyExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsNotEmpty"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:IsNotEmptyExpression ops:BooleanExpression)
SubClassOf(a:IsNotEmptyExpression ops:OperatorExpression)
SubClassOf(a:IsNotEmptyExpression ops:UnaryExpression)
SubClassOf(a:IsNotEmptyExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:IsNotEmptyExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsNotEmpty"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:IsNullExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsNull"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:IsNullExpression ops:BooleanExpression)
SubClassOf(a:IsNullExpression ops:OperatorExpression)
SubClassOf(a:IsNullExpression ops:UnaryExpression)
SubClassOf(a:IsNullExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:IsNullExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "IsNull"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:LastExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Last"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:LastExpression ops:OperatorExpression)
SubClassOf(a:LastExpression ops:UnaryExpression)
SubClassOf(a:LastExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:LastExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Last"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:LatestExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Latest"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:LatestExpression ops:NAryExpression)
SubClassOf(a:LatestExpression ops:OperatorExpression)
SubClassOf(a:LatestExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:LatestExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Latest"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:LengthIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "LengthInterval"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:LengthIntervalExpression ops:IntegerExpression)
SubClassOf(a:LengthIntervalExpression ops:OperatorExpression)
SubClassOf(a:LengthIntervalExpression ops:UnaryExpression)
SubClassOf(a:LengthIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:LengthIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "LengthInterval"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:LengthStringExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "LengthString"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:LengthStringExpression ops:IntegerExpression)
SubClassOf(a:LengthStringExpression ops:OperatorExpression)
SubClassOf(a:LengthStringExpression ops:RealExpression)
SubClassOf(a:LengthStringExpression ops:UnaryExpression)
SubClassOf(a:LengthStringExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:LengthStringExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "LengthString"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:LessExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Less"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(a:LessExpression ops:BinaryExpression)
SubClassOf(a:LessExpression ops:BooleanExpression)
SubClassOf(a:LessExpression ops:OperatorExpression)
SubClassOf(a:LessExpression ObjectAllValuesFrom(ops:firstOperand ops:ScalarExpression))
SubClassOf(a:LessExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Less"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:LessExpression ObjectAllValuesFrom(ops:secondOperand ops:ScalarExpression))
EquivalentClasses(a:LessOrEqualExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "LessOrEqual"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(a:LessOrEqualExpression ops:BinaryExpression)
SubClassOf(a:LessOrEqualExpression ops:BooleanExpression)
SubClassOf(a:LessOrEqualExpression ops:OperatorExpression)
SubClassOf(a:LessOrEqualExpression ObjectAllValuesFrom(ops:firstOperand ops:ScalarExpression))
SubClassOf(a:LessOrEqualExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "LessOrEqual"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:LessOrEqualExpression ObjectAllValuesFrom(ops:secondOperand ops:ScalarExpression))
EquivalentClasses(a:ListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "List"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:ListExpression ops:ListExpression)
SubClassOf(a:ListExpression ops:NAryExpression)
SubClassOf(a:ListExpression ops:OperatorExpression)
SubClassOf(a:ListExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:ListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "List"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:LnExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Ln"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:LnExpression ops:OperatorExpression)
SubClassOf(a:LnExpression ops:RealExpression)
SubClassOf(a:LnExpression ops:UnaryExpression)
SubClassOf(a:LnExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:LnExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Ln"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:Log10Expression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Log10"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:Log10Expression ops:BinaryExpression)
SubClassOf(a:Log10Expression ops:OperatorExpression)
SubClassOf(a:Log10Expression ops:RealExpression)
SubClassOf(a:Log10Expression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:Log10Expression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Log10"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:Log10Expression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:LogExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Log"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:LogExpression ops:BinaryExpression)
SubClassOf(a:LogExpression ops:OperatorExpression)
SubClassOf(a:LogExpression ops:RealExpression)
SubClassOf(a:LogExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:LogExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Log"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:LogExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:LowerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Lower"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:LowerExpression ops:OperatorExpression)
SubClassOf(a:LowerExpression ops:StringExpression)
SubClassOf(a:LowerExpression ops:UnaryExpression)
SubClassOf(a:LowerExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:LowerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Lower"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:MaxExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Max"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:MaxExpression ops:NAryExpression)
SubClassOf(a:MaxExpression ops:OperatorExpression)
SubClassOf(a:MaxExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:MaxExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Max"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:MaxIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MaxInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:MaxIntegerExpression ops:BinaryExpression)
SubClassOf(a:MaxIntegerExpression ops:IntegerExpression)
SubClassOf(a:MaxIntegerExpression ops:OperatorExpression)
SubClassOf(a:MaxIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:MaxIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MaxInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MaxIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:MaxRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MaxReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:MaxRealExpression ops:BinaryExpression)
SubClassOf(a:MaxRealExpression ops:OperatorExpression)
SubClassOf(a:MaxRealExpression ops:RealExpression)
SubClassOf(a:MaxRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:MaxRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MaxReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MaxRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:MedianExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Median"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:MedianExpression ops:NAryExpression)
SubClassOf(a:MedianExpression ops:OperatorExpression)
SubClassOf(a:MedianExpression ops:RealExpression)
SubClassOf(a:MedianExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:MedianExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Median"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:MeetsExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Meets"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:MeetsExpression ops:BinaryExpression)
SubClassOf(a:MeetsExpression ops:BooleanExpression)
SubClassOf(a:MeetsExpression ops:OperatorExpression)
SubClassOf(a:MeetsExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:MeetsExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Meets"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MeetsExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:MinExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Min"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:MinExpression ops:NAryExpression)
SubClassOf(a:MinExpression ops:OperatorExpression)
SubClassOf(a:MinExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:MinExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Min"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:MinIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MinInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:MinIntegerExpression ops:BinaryExpression)
SubClassOf(a:MinIntegerExpression ops:IntegerExpression)
SubClassOf(a:MinIntegerExpression ops:OperatorExpression)
SubClassOf(a:MinIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:MinIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MinInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MinIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:MinRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MinReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:MinRealExpression ops:BinaryExpression)
SubClassOf(a:MinRealExpression ops:OperatorExpression)
SubClassOf(a:MinRealExpression ops:RealExpression)
SubClassOf(a:MinRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:MinRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MinReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MinRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:ModuloIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ModuloInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:ModuloIntegerExpression ops:BinaryExpression)
SubClassOf(a:ModuloIntegerExpression ops:IntegerExpression)
SubClassOf(a:ModuloIntegerExpression ops:OperatorExpression)
SubClassOf(a:ModuloIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:ModuloIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ModuloInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ModuloIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:ModuloRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ModuloReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:ModuloRealExpression ops:BinaryExpression)
SubClassOf(a:ModuloRealExpression ops:OperatorExpression)
SubClassOf(a:ModuloRealExpression ops:RealExpression)
SubClassOf(a:ModuloRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:ModuloRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ModuloReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ModuloRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:MultiplyIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MultiplyInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:MultiplyIntegerExpression ops:BinaryExpression)
SubClassOf(a:MultiplyIntegerExpression ops:IntegerExpression)
SubClassOf(a:MultiplyIntegerExpression ops:OperatorExpression)
SubClassOf(a:MultiplyIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:MultiplyIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MultiplyInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MultiplyIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:MultiplyRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MultiplyReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:MultiplyRealExpression ops:BinaryExpression)
SubClassOf(a:MultiplyRealExpression ops:OperatorExpression)
SubClassOf(a:MultiplyRealExpression ops:RealExpression)
SubClassOf(a:MultiplyRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:MultiplyRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "MultiplyReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:MultiplyRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:NegateIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "NegateInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:NegateIntegerExpression ops:IntegerExpression)
SubClassOf(a:NegateIntegerExpression ops:OperatorExpression)
SubClassOf(a:NegateIntegerExpression ops:UnaryExpression)
SubClassOf(a:NegateIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:NegateIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "NegateInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:NegateRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "NegateReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:NegateRealExpression ops:OperatorExpression)
SubClassOf(a:NegateRealExpression ops:RealExpression)
SubClassOf(a:NegateRealExpression ops:UnaryExpression)
SubClassOf(a:NegateRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:NegateRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "NegateReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:NotEqualExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "NotEqual"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:OperatorExpression)))
SubClassOf(a:NotEqualExpression ops:BinaryExpression)
SubClassOf(a:NotEqualExpression ops:BooleanExpression)
SubClassOf(a:NotEqualExpression ops:OperatorExpression)
SubClassOf(a:NotEqualExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:NotEqualExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "NotEqual"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:NotEqualExpression ObjectAllValuesFrom(ops:secondOperand ops:OperatorExpression))
EquivalentClasses(a:NotExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Not"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:NotExpression ops:BooleanExpression)
SubClassOf(a:NotExpression ops:OperatorExpression)
SubClassOf(a:NotExpression ops:UnaryExpression)
SubClassOf(a:NotExpression ObjectAllValuesFrom(ops:firstOperand ops:BooleanExpression))
SubClassOf(a:NotExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Not"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ObjectRedefineExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ObjectExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ObjectRedefine"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:ObjectRedefineExpression ops:ObjectExpression)
SubClassOf(a:ObjectRedefineExpression ops:OperatorExpression)
SubClassOf(a:ObjectRedefineExpression ops:UnaryExpression)
SubClassOf(a:ObjectRedefineExpression ObjectAllValuesFrom(ops:firstOperand ops:ObjectExpression))
SubClassOf(a:ObjectRedefineExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ObjectRedefine"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:OrExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Or"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:OrExpression ops:BooleanExpression)
SubClassOf(a:OrExpression ops:NAryExpression)
SubClassOf(a:OrExpression ops:OperatorExpression)
SubClassOf(a:OrExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:OrExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Or"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:OverlapsExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Overlaps"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:OverlapsExpression ops:BinaryExpression)
SubClassOf(a:OverlapsExpression ops:BooleanExpression)
SubClassOf(a:OverlapsExpression ops:OperatorExpression)
SubClassOf(a:OverlapsExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:OverlapsExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Overlaps"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:OverlapsExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:PosExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Pos"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(a:PosExpression ops:BinaryExpression)
SubClassOf(a:PosExpression ops:IntegerExpression)
SubClassOf(a:PosExpression ops:OperatorExpression)
SubClassOf(a:PosExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:PosExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Pos"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:PosExpression ObjectAllValuesFrom(ops:secondOperand ops:StringExpression))
EquivalentClasses(a:PowerIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "PowerInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:PowerIntegerExpression ops:BinaryExpression)
SubClassOf(a:PowerIntegerExpression ops:IntegerExpression)
SubClassOf(a:PowerIntegerExpression ops:OperatorExpression)
SubClassOf(a:PowerIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:PowerIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "PowerInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:PowerIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:PowerRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "PowerReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:PowerRealExpression ops:BinaryExpression)
SubClassOf(a:PowerRealExpression ops:OperatorExpression)
SubClassOf(a:PowerRealExpression ops:RealExpression)
SubClassOf(a:PowerRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:PowerRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "PowerReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:PowerRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:PredExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Pred"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:PredExpression ops:IntegerExpression)
SubClassOf(a:PredExpression ops:OperatorExpression)
SubClassOf(a:PredExpression ops:UnaryExpression)
SubClassOf(a:PredExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:PredExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Pred"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ProperContainsIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperContainsInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:ProperContainsIntervalExpression ops:BinaryExpression)
SubClassOf(a:ProperContainsIntervalExpression ops:BooleanExpression)
SubClassOf(a:ProperContainsIntervalExpression ops:OperatorExpression)
SubClassOf(a:ProperContainsIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:ProperContainsIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperContainsInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ProperContainsIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:ProperContainsListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperContainsList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:ProperContainsListExpression ops:BinaryExpression)
SubClassOf(a:ProperContainsListExpression ops:BooleanExpression)
SubClassOf(a:ProperContainsListExpression ops:OperatorExpression)
SubClassOf(a:ProperContainsListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:ProperContainsListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperContainsList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ProperContainsListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:ProperInIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperInInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:ProperInIntervalExpression ops:BinaryExpression)
SubClassOf(a:ProperInIntervalExpression ops:BooleanExpression)
SubClassOf(a:ProperInIntervalExpression ops:OperatorExpression)
SubClassOf(a:ProperInIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:ProperInIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperInInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ProperInIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:ProperInListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperInList"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(a:ProperInListExpression ops:BinaryExpression)
SubClassOf(a:ProperInListExpression ops:BooleanExpression)
SubClassOf(a:ProperInListExpression ops:OperatorExpression)
SubClassOf(a:ProperInListExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:ProperInListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ProperInList"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:ProperInListExpression ObjectAllValuesFrom(ops:secondOperand ops:ListExpression))
EquivalentClasses(a:ReverseExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Reverse"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:ReverseExpression ops:ListExpression)
SubClassOf(a:ReverseExpression ops:NAryExpression)
SubClassOf(a:ReverseExpression ops:OperatorExpression)
SubClassOf(a:ReverseExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:ReverseExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Reverse"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:RoundExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Round"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:RoundExpression ops:BinaryExpression)
SubClassOf(a:RoundExpression ops:OperatorExpression)
SubClassOf(a:RoundExpression ops:RealExpression)
SubClassOf(a:RoundExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:RoundExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Round"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:RoundExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:RoundRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "RoundReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:RoundRealExpression ops:IntegerExpression)
SubClassOf(a:RoundRealExpression ops:OperatorExpression)
SubClassOf(a:RoundRealExpression ops:RealExpression)
SubClassOf(a:RoundRealExpression ops:UnaryExpression)
SubClassOf(a:RoundRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:RoundRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "RoundReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SeqToExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SeqTo"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:SeqToExpression ops:BinaryExpression)
SubClassOf(a:SeqToExpression ops:ListExpression)
SubClassOf(a:SeqToExpression ops:OperatorExpression)
SubClassOf(a:SeqToExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:SeqToExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SeqTo"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:SeqToExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:SinIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SinInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:SinIntegerExpression ops:OperatorExpression)
SubClassOf(a:SinIntegerExpression ops:RealExpression)
SubClassOf(a:SinIntegerExpression ops:UnaryExpression)
SubClassOf(a:SinIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:SinIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SinInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SinRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SinReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:SinRealExpression ops:OperatorExpression)
SubClassOf(a:SinRealExpression ops:RealExpression)
SubClassOf(a:SinRealExpression ops:UnaryExpression)
SubClassOf(a:SinRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:SinRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SinReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SortExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Sort"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:SortExpression ops:ListExpression)
SubClassOf(a:SortExpression ops:OperatorExpression)
SubClassOf(a:SortExpression ops:UnaryExpression)
SubClassOf(a:SortExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:SortExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Sort"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SplitExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Split"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(a:SplitExpression ops:BinaryExpression)
SubClassOf(a:SplitExpression ops:ListExpression)
SubClassOf(a:SplitExpression ops:OperatorExpression)
SubClassOf(a:SplitExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:SplitExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Split"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:SplitExpression ObjectAllValuesFrom(ops:secondOperand ops:StringExpression))
EquivalentClasses(a:SqrtIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SqrtInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:SqrtIntegerExpression ops:IntegerExpression)
SubClassOf(a:SqrtIntegerExpression ops:OperatorExpression)
SubClassOf(a:SqrtIntegerExpression ops:RealExpression)
SubClassOf(a:SqrtIntegerExpression ops:UnaryExpression)
SubClassOf(a:SqrtIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:SqrtIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SqrtInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SqrtRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SqrtReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:SqrtRealExpression ops:OperatorExpression)
SubClassOf(a:SqrtRealExpression ops:RealExpression)
SubClassOf(a:SqrtRealExpression ops:UnaryExpression)
SubClassOf(a:SqrtRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:SqrtRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SqrtReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:StdDevExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "StdDev"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:StdDevExpression ops:NAryExpression)
SubClassOf(a:StdDevExpression ops:NumberExpression)
SubClassOf(a:StdDevExpression ops:OperatorExpression)
SubClassOf(a:StdDevExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:StdDevExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "StdDev"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:StringExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "String"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:StringExpression ops:OperatorExpression)
SubClassOf(a:StringExpression ops:StringExpression)
SubClassOf(a:StringExpression ops:UnaryExpression)
SubClassOf(a:StringExpression ObjectAllValuesFrom(ops:firstOperand ops:ListExpression))
SubClassOf(a:StringExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "String"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SubstringExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Substring"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:IntegerExpression)))
SubClassOf(a:SubstringExpression ops:OperatorExpression)
SubClassOf(a:SubstringExpression ops:StringExpression)
SubClassOf(a:SubstringExpression ops:TernaryExpression)
SubClassOf(a:SubstringExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:SubstringExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Substring"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:SubstringExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
SubClassOf(a:SubstringExpression ObjectAllValuesFrom(ops:thirdOperand ops:IntegerExpression))
EquivalentClasses(a:SubtractIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SubtractInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:SubtractIntegerExpression ops:BinaryExpression)
SubClassOf(a:SubtractIntegerExpression ops:IntegerExpression)
SubClassOf(a:SubtractIntegerExpression ops:OperatorExpression)
SubClassOf(a:SubtractIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:SubtractIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SubtractInteger"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:SubtractIntegerExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:SubtractRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SubtractReal"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(a:SubtractRealExpression ops:BinaryExpression)
SubClassOf(a:SubtractRealExpression ops:OperatorExpression)
SubClassOf(a:SubtractRealExpression ops:RealExpression)
SubClassOf(a:SubtractRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:SubtractRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SubtractReal"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:SubtractRealExpression ObjectAllValuesFrom(ops:secondOperand ops:RealExpression))
EquivalentClasses(a:SuccExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Succ"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:SuccExpression ops:IntegerExpression)
SubClassOf(a:SuccExpression ops:OperatorExpression)
SubClassOf(a:SuccExpression ops:UnaryExpression)
SubClassOf(a:SuccExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:SuccExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Succ"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SumIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SumInteger"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:SumIntegerExpression ops:IntegerExpression)
SubClassOf(a:SumIntegerExpression ops:NAryExpression)
SubClassOf(a:SumIntegerExpression ops:OperatorExpression)
SubClassOf(a:SumIntegerExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:SumIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SumInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:SumRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SumReal"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:SumRealExpression ops:NAryExpression)
SubClassOf(a:SumRealExpression ops:OperatorExpression)
SubClassOf(a:SumRealExpression ops:RealExpression)
SubClassOf(a:SumRealExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:SumRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "SumReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:TanIntegerExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TanInteger"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:TanIntegerExpression ops:OperatorExpression)
SubClassOf(a:TanIntegerExpression ops:RealExpression)
SubClassOf(a:TanIntegerExpression ops:UnaryExpression)
SubClassOf(a:TanIntegerExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:TanIntegerExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TanInteger"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:TanRealExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TanReal"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:TanRealExpression ops:OperatorExpression)
SubClassOf(a:TanRealExpression ops:RealExpression)
SubClassOf(a:TanRealExpression ops:UnaryExpression)
SubClassOf(a:TanRealExpression ObjectAllValuesFrom(ops:firstOperand ops:RealExpression))
SubClassOf(a:TanRealExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TanReal"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:ToStringExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ToString"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:ToStringExpression ops:OperatorExpression)
SubClassOf(a:ToStringExpression ops:StringExpression)
SubClassOf(a:ToStringExpression ops:UnaryExpression)
SubClassOf(a:ToStringExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:ToStringExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "ToString"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:TrimExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Trim"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:TrimExpression ops:OperatorExpression)
SubClassOf(a:TrimExpression ops:StringExpression)
SubClassOf(a:TrimExpression ops:UnaryExpression)
SubClassOf(a:TrimExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:TrimExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Trim"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:TrimLeftExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TrimLeft"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:TrimLeftExpression ops:OperatorExpression)
SubClassOf(a:TrimLeftExpression ops:StringExpression)
SubClassOf(a:TrimLeftExpression ops:UnaryExpression)
SubClassOf(a:TrimLeftExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:TrimLeftExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TrimLeft"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:TrimRightExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TrimRight"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:TrimRightExpression ops:OperatorExpression)
SubClassOf(a:TrimRightExpression ops:StringExpression)
SubClassOf(a:TrimRightExpression ops:UnaryExpression)
SubClassOf(a:TrimRightExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:TrimRightExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TrimRight"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:TruncatedDivideExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TruncatedDivide"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(a:TruncatedDivideExpression ops:BinaryExpression)
SubClassOf(a:TruncatedDivideExpression ops:IntegerExpression)
SubClassOf(a:TruncatedDivideExpression ops:OperatorExpression)
SubClassOf(a:TruncatedDivideExpression ObjectAllValuesFrom(ops:firstOperand ops:IntegerExpression))
SubClassOf(a:TruncatedDivideExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "TruncatedDivide"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:TruncatedDivideExpression ObjectAllValuesFrom(ops:secondOperand ops:IntegerExpression))
EquivalentClasses(a:UnionIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "UnionInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:UnionIntervalExpression ops:IntervalExpression)
SubClassOf(a:UnionIntervalExpression ops:NAryExpression)
SubClassOf(a:UnionIntervalExpression ops:OperatorExpression)
SubClassOf(a:UnionIntervalExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:UnionIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "UnionInterval"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:UnionListExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "UnionList"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:UnionListExpression ops:ListExpression)
SubClassOf(a:UnionListExpression ops:NAryExpression)
SubClassOf(a:UnionListExpression ops:OperatorExpression)
SubClassOf(a:UnionListExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:UnionListExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "UnionList"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:UpperExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Upper"^^xsd:string) ops:OperatorConceptCode))))
SubClassOf(a:UpperExpression ops:OperatorExpression)
SubClassOf(a:UpperExpression ops:StringExpression)
SubClassOf(a:UpperExpression ops:UnaryExpression)
SubClassOf(a:UpperExpression ObjectAllValuesFrom(ops:firstOperand ops:StringExpression))
SubClassOf(a:UpperExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Upper"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:VarianceExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Variance"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:VarianceExpression ops:NAryExpression)
SubClassOf(a:VarianceExpression ops:NumberExpression)
SubClassOf(a:VarianceExpression ops:OperatorExpression)
SubClassOf(a:VarianceExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:VarianceExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Variance"^^xsd:string) ops:OperatorConceptCode)))
EquivalentClasses(a:WithinAnyExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:OperatorExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "WithinAny"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:WithinAnyExpression ops:BinaryExpression)
SubClassOf(a:WithinAnyExpression ops:BooleanExpression)
SubClassOf(a:WithinAnyExpression ops:OperatorExpression)
SubClassOf(a:WithinAnyExpression ObjectAllValuesFrom(ops:firstOperand ops:OperatorExpression))
SubClassOf(a:WithinAnyExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "WithinAny"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:WithinAnyExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:WithinIntervalExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "WithinInterval"^^xsd:string) ops:OperatorConceptCode)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(a:WithinIntervalExpression ops:BinaryExpression)
SubClassOf(a:WithinIntervalExpression ops:BooleanExpression)
SubClassOf(a:WithinIntervalExpression ops:OperatorExpression)
SubClassOf(a:WithinIntervalExpression ObjectAllValuesFrom(ops:firstOperand ops:IntervalExpression))
SubClassOf(a:WithinIntervalExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "WithinInterval"^^xsd:string) ops:OperatorConceptCode)))
SubClassOf(a:WithinIntervalExpression ObjectAllValuesFrom(ops:secondOperand ops:IntervalExpression))
EquivalentClasses(a:XorExpression ObjectIntersectionOf(ops:OperatorExpression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Xor"^^xsd:string) ops:OperatorConceptCode)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(a:XorExpression ops:BooleanExpression)
SubClassOf(a:XorExpression ops:NAryExpression)
SubClassOf(a:XorExpression ops:OperatorExpression)
SubClassOf(a:XorExpression ObjectAllValuesFrom(ops:hasOperand ops:ListExpression))
SubClassOf(a:XorExpression ObjectAllValuesFrom(ops:opCode ObjectIntersectionOf(DataHasValue(skos:notation "Xor"^^xsd:string) ops:OperatorConceptCode)))
ClassAssertion(ops:UnaryOperatorConcept a:AbsInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:AbsInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AbsInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AbsInteger a:AbsIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:AbsIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AbsIntegerCode a:AbsInteger)
DataPropertyAssertion(skos-ext:code a:AbsIntegerCode "Abs"^^xsd:string)
DataPropertyAssertion(skos:notation a:AbsIntegerCode "Abs"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AbsReal)
ObjectPropertyAssertion(ops:evaluatesAs a:AbsReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AbsReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AbsReal a:AbsRealCode)
ClassAssertion(ops:OperatorConceptCode a:AbsRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AbsRealCode a:AbsReal)
DataPropertyAssertion(skos-ext:code a:AbsRealCode "Abs"^^xsd:string)
DataPropertyAssertion(skos:notation a:AbsRealCode "Abs"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AcosInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:AcosInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AcosInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AcosInteger a:AcosIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:AcosIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AcosIntegerCode a:AcosInteger)
DataPropertyAssertion(skos-ext:code a:AcosIntegerCode "Acos"^^xsd:string)
DataPropertyAssertion(skos:notation a:AcosIntegerCode "Acos"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AcosReal)
ObjectPropertyAssertion(ops:evaluatesAs a:AcosReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AcosReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AcosReal a:AcosRealCode)
ClassAssertion(ops:OperatorConceptCode a:AcosRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AcosRealCode a:AcosReal)
DataPropertyAssertion(skos-ext:code a:AcosRealCode "Acos"^^xsd:string)
DataPropertyAssertion(skos:notation a:AcosRealCode "Acos"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:AddInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:AddInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AddInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:AddInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AddInteger a:AddIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:AddIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AddIntegerCode a:AddInteger)
DataPropertyAssertion(skos-ext:code a:AddIntegerCode "Add"^^xsd:string)
DataPropertyAssertion(skos:notation a:AddIntegerCode "Add"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:AddReal)
ObjectPropertyAssertion(ops:evaluatesAs a:AddReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AddReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:AddReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AddReal a:AddRealCode)
ClassAssertion(ops:OperatorConceptCode a:AddRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AddRealCode a:AddReal)
DataPropertyAssertion(skos-ext:code a:AddRealCode "Add"^^xsd:string)
DataPropertyAssertion(skos:notation a:AddRealCode "Add"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:After)
ObjectPropertyAssertion(ops:evaluatesAs a:After ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:After ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:After ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:After a:AfterCode)
ClassAssertion(ops:OperatorConceptCode a:AfterCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AfterCode a:After)
DataPropertyAssertion(skos-ext:code a:AfterCode "After"^^xsd:string)
DataPropertyAssertion(skos:notation a:AfterCode "After"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:AllFalse)
ObjectPropertyAssertion(ops:evaluatesAs a:AllFalse ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:AllFalse ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AllFalse a:AllFalseCode)
ClassAssertion(ops:OperatorConceptCode a:AllFalseCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AllFalseCode a:AllFalse)
DataPropertyAssertion(skos-ext:code a:AllFalseCode "AllFalse"^^xsd:string)
DataPropertyAssertion(skos:notation a:AllFalseCode "AllFalse"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:AllTrue)
ObjectPropertyAssertion(ops:evaluatesAs a:AllTrue ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:AllTrue ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AllTrue a:AllTrueCode)
ClassAssertion(ops:OperatorConceptCode a:AllTrueCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AllTrueCode a:AllTrue)
DataPropertyAssertion(skos-ext:code a:AllTrueCode "AllTrue"^^xsd:string)
DataPropertyAssertion(skos:notation a:AllTrueCode "AllTrue"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:And)
ObjectPropertyAssertion(ops:evaluatesAs a:And ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:And ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:And a:AndCode)
ClassAssertion(ops:OperatorConceptCode a:AndCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AndCode a:And)
DataPropertyAssertion(skos-ext:code a:AndCode "And"^^xsd:string)
DataPropertyAssertion(skos:notation a:AndCode "And"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:AnyTrue)
ObjectPropertyAssertion(ops:evaluatesAs a:AnyTrue ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:AnyTrue ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AnyTrue a:AnyTrueCode)
ClassAssertion(ops:OperatorConceptCode a:AnyTrueCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AnyTrueCode a:AnyTrue)
DataPropertyAssertion(skos-ext:code a:AnyTrueCode "AnyTrue"^^xsd:string)
DataPropertyAssertion(skos:notation a:AnyTrueCode "AnyTrue"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AsinInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:AsinInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AsinInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AsinInteger a:AsinIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:AsinIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AsinIntegerCode a:AsinInteger)
DataPropertyAssertion(skos-ext:code a:AsinIntegerCode "Asin"^^xsd:string)
DataPropertyAssertion(skos:notation a:AsinIntegerCode "Asin"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AsinReal)
ObjectPropertyAssertion(ops:evaluatesAs a:AsinReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AsinReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AsinReal a:AsinRealCode)
ClassAssertion(ops:OperatorConceptCode a:AsinRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AsinRealCode a:AsinReal)
DataPropertyAssertion(skos-ext:code a:AsinRealCode "Asin"^^xsd:string)
DataPropertyAssertion(skos:notation a:AsinRealCode "Asin"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AtanInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:AtanInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AtanInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AtanInteger a:AtanIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:AtanIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AtanIntegerCode a:AtanInteger)
DataPropertyAssertion(skos-ext:code a:AtanIntegerCode "Atan"^^xsd:string)
DataPropertyAssertion(skos:notation a:AtanIntegerCode "Atan"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:AtanReal)
ObjectPropertyAssertion(ops:evaluatesAs a:AtanReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:AtanReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AtanReal a:AtanRealCode)
ClassAssertion(ops:OperatorConceptCode a:AtanRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AtanRealCode a:AtanReal)
DataPropertyAssertion(skos-ext:code a:AtanRealCode "Atan"^^xsd:string)
DataPropertyAssertion(skos:notation a:AtanRealCode "Atan"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:AvgInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:AvgInteger ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:AvgInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AvgInteger a:AvgIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:AvgIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AvgIntegerCode a:AvgInteger)
DataPropertyAssertion(skos-ext:code a:AvgIntegerCode "Avg"^^xsd:string)
DataPropertyAssertion(skos:notation a:AvgIntegerCode "Avg"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:AvgReal)
ObjectPropertyAssertion(ops:evaluatesAs a:AvgReal ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:AvgReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AvgReal a:AvgRealCode)
ClassAssertion(ops:OperatorConceptCode a:AvgRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AvgRealCode a:AvgReal)
DataPropertyAssertion(skos-ext:code a:AvgRealCode "Avg"^^xsd:string)
DataPropertyAssertion(skos:notation a:AvgRealCode "Avg"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:AvgTimeDuration)
ObjectPropertyAssertion(ops:evaluatesAs a:AvgTimeDuration ops:timeDurationType)
ObjectPropertyAssertion(ops:hasOperandType a:AvgTimeDuration ops:timeDurationType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:AvgTimeDuration a:AvgTimeDurationCode)
ClassAssertion(ops:OperatorConceptCode a:AvgTimeDurationCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:AvgTimeDurationCode a:AvgTimeDuration)
DataPropertyAssertion(skos-ext:code a:AvgTimeDurationCode "Avg"^^xsd:string)
DataPropertyAssertion(skos:notation a:AvgTimeDurationCode "Avg"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Before)
ObjectPropertyAssertion(ops:evaluatesAs a:Before ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Before ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Before ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Before a:BeforeCode)
ClassAssertion(ops:OperatorConceptCode a:BeforeCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:BeforeCode a:Before)
DataPropertyAssertion(skos-ext:code a:BeforeCode "Before"^^xsd:string)
DataPropertyAssertion(skos:notation a:BeforeCode "Before"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Begin)
ObjectPropertyAssertion(ops:evaluatesAs a:Begin ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Begin ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Begin a:BeginCode)
ClassAssertion(ops:OperatorConceptCode a:BeginCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:BeginCode a:Begin)
DataPropertyAssertion(skos-ext:code a:BeginCode "Begin"^^xsd:string)
DataPropertyAssertion(skos:notation a:BeginCode "Begin"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Ceiling)
ObjectPropertyAssertion(ops:evaluatesAs a:Ceiling ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Ceiling ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Ceiling a:CeilingCode)
ClassAssertion(ops:OperatorConceptCode a:CeilingCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:CeilingCode a:Ceiling)
DataPropertyAssertion(skos-ext:code a:CeilingCode "Ceiling"^^xsd:string)
DataPropertyAssertion(skos:notation a:CeilingCode "Ceiling"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Coalesce)
ObjectPropertyAssertion(ops:evaluatesAs a:Coalesce ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType a:Coalesce ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Coalesce a:CoalesceCode)
ClassAssertion(ops:OperatorConceptCode a:CoalesceCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:CoalesceCode a:Coalesce)
DataPropertyAssertion(skos-ext:code a:CoalesceCode "Coalesce"^^xsd:string)
DataPropertyAssertion(skos:notation a:CoalesceCode "Coalesce"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Combine)
ObjectPropertyAssertion(ops:evaluatesAs a:Combine ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Combine ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Combine ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Combine a:CombineCode)
ClassAssertion(ops:OperatorConceptCode a:CombineCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:CombineCode a:Combine)
DataPropertyAssertion(skos-ext:code a:CombineCode "Combine"^^xsd:string)
DataPropertyAssertion(skos:notation a:CombineCode "Combine"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Concat)
ObjectPropertyAssertion(ops:evaluatesAs a:Concat ops:stringType)
ObjectPropertyAssertion(ops:hasOperandType a:Concat ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Concat a:ConcatCode)
ClassAssertion(ops:OperatorConceptCode a:ConcatCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ConcatCode a:Concat)
DataPropertyAssertion(skos-ext:code a:ConcatCode "Concat"^^xsd:string)
DataPropertyAssertion(skos:notation a:ConcatCode "Concat"^^xsd:string)
ClassAssertion(ops:TernaryOperatorConcept a:Conditional)
ObjectPropertyAssertion(ops:evaluatesAs a:Conditional ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Conditional ops:booleanType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Conditional ops:anyType)
ObjectPropertyAssertion(ops:hasThirdOperandType a:Conditional ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Conditional a:ConditionalCode)
ClassAssertion(ops:OperatorConceptCode a:ConditionalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ConditionalCode a:Conditional)
DataPropertyAssertion(skos-ext:code a:ConditionalCode "Conditional"^^xsd:string)
DataPropertyAssertion(skos:notation a:ConditionalCode "Conditional"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ContainsInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:ContainsInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ContainsInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ContainsInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ContainsInterval a:ContainsIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:ContainsIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ContainsIntervalCode a:ContainsInterval)
DataPropertyAssertion(skos-ext:code a:ContainsIntervalCode "Contains"^^xsd:string)
DataPropertyAssertion(skos:notation a:ContainsIntervalCode "Contains"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ContainsList)
ObjectPropertyAssertion(ops:evaluatesAs a:ContainsList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ContainsList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ContainsList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ContainsList a:ContainsListCode)
ClassAssertion(ops:OperatorConceptCode a:ContainsListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ContainsListCode a:ContainsList)
DataPropertyAssertion(skos-ext:code a:ContainsListCode "Contains"^^xsd:string)
DataPropertyAssertion(skos:notation a:ContainsListCode "Contains"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Convert)
ObjectPropertyAssertion(ops:evaluatesAs a:Convert ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Convert ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Convert a:ConvertCode)
ClassAssertion(ops:OperatorConceptCode a:ConvertCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ConvertCode a:Convert)
DataPropertyAssertion(skos-ext:code a:ConvertCode "Convert"^^xsd:string)
DataPropertyAssertion(skos:notation a:ConvertCode "Convert"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:CosInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:CosInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:CosInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:CosInteger a:CosIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:CosIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:CosIntegerCode a:CosInteger)
DataPropertyAssertion(skos-ext:code a:CosIntegerCode "Cos"^^xsd:string)
DataPropertyAssertion(skos:notation a:CosIntegerCode "Cos"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:CosReal)
ObjectPropertyAssertion(ops:evaluatesAs a:CosReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:CosReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:CosReal a:CosRealCode)
ClassAssertion(ops:OperatorConceptCode a:CosRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:CosRealCode a:CosReal)
DataPropertyAssertion(skos-ext:code a:CosRealCode "Cos"^^xsd:string)
DataPropertyAssertion(skos:notation a:CosRealCode "Cos"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Count)
ObjectPropertyAssertion(ops:evaluatesAs a:Count ops:intType)
ObjectPropertyAssertion(ops:hasOperandType a:Count ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Count a:CountCode)
ClassAssertion(ops:OperatorConceptCode a:CountCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:CountCode a:Count)
DataPropertyAssertion(skos-ext:code a:CountCode "Count"^^xsd:string)
DataPropertyAssertion(skos:notation a:CountCode "Count"^^xsd:string)
ClassAssertion(ops:TernaryOperatorConcept a:DateAdd)
ObjectPropertyAssertion(ops:evaluatesAs a:DateAdd ops:timestampType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DateAdd ops:timestampType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DateAdd ops:dateGranularityType)
ObjectPropertyAssertion(ops:hasThirdOperandType a:DateAdd ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DateAdd a:DateAddCode)
ClassAssertion(ops:OperatorConceptCode a:DateAddCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DateAddCode a:DateAdd)
DataPropertyAssertion(skos-ext:code a:DateAddCode "DateAdd"^^xsd:string)
DataPropertyAssertion(skos:notation a:DateAddCode "DateAdd"^^xsd:string)
ClassAssertion(ops:TernaryOperatorConcept a:DateDiff)
ObjectPropertyAssertion(ops:evaluatesAs a:DateDiff ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DateDiff ops:timestampType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DateDiff ops:timestampType)
ObjectPropertyAssertion(ops:hasThirdOperandType a:DateDiff ops:dateGranularityType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DateDiff a:DateDiffCode)
ClassAssertion(ops:OperatorConceptCode a:DateDiffCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DateDiffCode a:DateDiff)
DataPropertyAssertion(skos-ext:code a:DateDiffCode "DateDiff"^^xsd:string)
DataPropertyAssertion(skos:notation a:DateDiffCode "DateDiff"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:DatePart)
ObjectPropertyAssertion(ops:evaluatesAs a:DatePart ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DatePart ops:timestampType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DatePart ops:dateGranularityType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DatePart a:DatePartCode)
ClassAssertion(ops:OperatorConceptCode a:DatePartCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DatePartCode a:DatePart)
DataPropertyAssertion(skos-ext:code a:DatePartCode "DatePart"^^xsd:string)
DataPropertyAssertion(skos:notation a:DatePartCode "DatePart"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:DifferenceInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:DifferenceInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DifferenceInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DifferenceInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DifferenceInterval a:DifferenceIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:DifferenceIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DifferenceIntervalCode a:DifferenceInterval)
DataPropertyAssertion(skos-ext:code a:DifferenceIntervalCode "Difference"^^xsd:string)
DataPropertyAssertion(skos:notation a:DifferenceIntervalCode "Difference"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:DifferenceList)
ObjectPropertyAssertion(ops:evaluatesAs a:DifferenceList ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DifferenceList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DifferenceList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DifferenceList a:DifferenceListCode)
ClassAssertion(ops:OperatorConceptCode a:DifferenceListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DifferenceListCode a:DifferenceList)
DataPropertyAssertion(skos-ext:code a:DifferenceListCode "Difference"^^xsd:string)
DataPropertyAssertion(skos:notation a:DifferenceListCode "Difference"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:DivideInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:DivideInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DivideInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DivideInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DivideInteger a:DivideIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:DivideIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DivideIntegerCode a:DivideInteger)
DataPropertyAssertion(skos-ext:code a:DivideIntegerCode "Divide"^^xsd:string)
DataPropertyAssertion(skos:notation a:DivideIntegerCode "Divide"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:DivideReal)
ObjectPropertyAssertion(ops:evaluatesAs a:DivideReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:DivideReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:DivideReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:DivideReal a:DivideRealCode)
ClassAssertion(ops:OperatorConceptCode a:DivideRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:DivideRealCode a:DivideReal)
DataPropertyAssertion(skos-ext:code a:DivideRealCode "Divide"^^xsd:string)
DataPropertyAssertion(skos:notation a:DivideRealCode "Divide"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Earliest)
ObjectPropertyAssertion(ops:evaluatesAs a:Earliest ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType a:Earliest ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Earliest a:EarliestCode)
ClassAssertion(ops:OperatorConceptCode a:EarliestCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EarliestCode a:Earliest)
DataPropertyAssertion(skos-ext:code a:EarliestCode "Earliest"^^xsd:string)
DataPropertyAssertion(skos:notation a:EarliestCode "Earliest"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:End)
ObjectPropertyAssertion(ops:evaluatesAs a:End ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:End ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:End a:EndCode)
ClassAssertion(ops:OperatorConceptCode a:EndCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EndCode a:End)
DataPropertyAssertion(skos-ext:code a:EndCode "End"^^xsd:string)
DataPropertyAssertion(skos:notation a:EndCode "End"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:EqualBoolean)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualBoolean ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:EqualBoolean ops:booleanType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:EqualBoolean ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:EqualBoolean a:EqualBooleanCode)
ClassAssertion(ops:OperatorConceptCode a:EqualBooleanCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EqualBooleanCode a:EqualBoolean)
DataPropertyAssertion(skos-ext:code a:EqualBooleanCode "Equal"^^xsd:string)
DataPropertyAssertion(skos:notation a:EqualBooleanCode "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:EqualInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:EqualInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:EqualInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:EqualInterval a:EqualIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:EqualIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EqualIntervalCode a:EqualInterval)
DataPropertyAssertion(skos-ext:code a:EqualIntervalCode "Equal"^^xsd:string)
DataPropertyAssertion(skos:notation a:EqualIntervalCode "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:EqualList)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualList ops:listType)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:EqualList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:EqualList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:EqualList a:EqualListCode)
ClassAssertion(ops:OperatorConceptCode a:EqualListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EqualListCode a:EqualList)
DataPropertyAssertion(skos-ext:code a:EqualListCode "Equal"^^xsd:string)
DataPropertyAssertion(skos:notation a:EqualListCode "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:EqualObject)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualObject ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:EqualObject ops:objectType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:EqualObject ops:objectType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:EqualObject a:EqualObjectCode)
ClassAssertion(ops:OperatorConceptCode a:EqualObjectCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EqualObjectCode a:EqualObject)
DataPropertyAssertion(skos-ext:code a:EqualObjectCode "Equal"^^xsd:string)
DataPropertyAssertion(skos:notation a:EqualObjectCode "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:EqualScalar)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualScalar ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:EqualScalar ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:EqualScalar ops:scalarType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:EqualScalar a:EqualScalarCode)
ClassAssertion(ops:OperatorConceptCode a:EqualScalarCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EqualScalarCode a:EqualScalar)
DataPropertyAssertion(skos-ext:code a:EqualScalarCode "Equal"^^xsd:string)
DataPropertyAssertion(skos:notation a:EqualScalarCode "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:EqualString)
ObjectPropertyAssertion(ops:evaluatesAs a:EqualString ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:EqualString ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:EqualString ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:EqualString a:EqualStringCode)
ClassAssertion(ops:OperatorConceptCode a:EqualStringCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:EqualStringCode a:EqualString)
DataPropertyAssertion(skos-ext:code a:EqualStringCode "Equal"^^xsd:string)
DataPropertyAssertion(skos:notation a:EqualStringCode "Equal"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Exist)
ObjectPropertyAssertion(ops:evaluatesAs a:Exist ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:Exist ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Exist a:ExistCode)
ClassAssertion(ops:OperatorConceptCode a:ExistCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ExistCode a:Exist)
DataPropertyAssertion(skos-ext:code a:ExistCode "Exist"^^xsd:string)
DataPropertyAssertion(skos:notation a:ExistCode "Exist"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:ExpInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:ExpInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ExpInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ExpInteger a:ExpIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:ExpIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ExpIntegerCode a:ExpInteger)
DataPropertyAssertion(skos-ext:code a:ExpIntegerCode "Exp"^^xsd:string)
DataPropertyAssertion(skos:notation a:ExpIntegerCode "Exp"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:ExpReal)
ObjectPropertyAssertion(ops:evaluatesAs a:ExpReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ExpReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ExpReal a:ExpRealCode)
ClassAssertion(ops:OperatorConceptCode a:ExpRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ExpRealCode a:ExpReal)
DataPropertyAssertion(skos-ext:code a:ExpRealCode "Exp"^^xsd:string)
DataPropertyAssertion(skos:notation a:ExpRealCode "Exp"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:ExtractCharacters)
ObjectPropertyAssertion(ops:evaluatesAs a:ExtractCharacters ops:listType)
ObjectPropertyAssertion(ops:hasOperandType a:ExtractCharacters ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ExtractCharacters a:ExtractCharactersCode)
ClassAssertion(ops:OperatorConceptCode a:ExtractCharactersCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ExtractCharactersCode a:ExtractCharacters)
DataPropertyAssertion(skos-ext:code a:ExtractCharactersCode "ExtractCharacters"^^xsd:string)
DataPropertyAssertion(skos:notation a:ExtractCharactersCode "ExtractCharacters"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Filter)
ObjectPropertyAssertion(ops:evaluatesAs a:Filter ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Filter ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Filter ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Filter a:FilterCode)
ClassAssertion(ops:OperatorConceptCode a:FilterCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:FilterCode a:Filter)
DataPropertyAssertion(skos-ext:code a:FilterCode "Filter"^^xsd:string)
DataPropertyAssertion(skos:notation a:FilterCode "Filter"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:First)
ObjectPropertyAssertion(ops:evaluatesAs a:First ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:First ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:First a:FirstCode)
ClassAssertion(ops:OperatorConceptCode a:FirstCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:FirstCode a:First)
DataPropertyAssertion(skos-ext:code a:FirstCode "First"^^xsd:string)
DataPropertyAssertion(skos:notation a:FirstCode "First"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Flatten)
ObjectPropertyAssertion(ops:evaluatesAs a:Flatten ops:listType)
ObjectPropertyAssertion(ops:hasOperandType a:Flatten ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Flatten a:FlattenCode)
ClassAssertion(ops:OperatorConceptCode a:FlattenCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:FlattenCode a:Flatten)
DataPropertyAssertion(skos-ext:code a:FlattenCode "Flatten"^^xsd:string)
DataPropertyAssertion(skos:notation a:FlattenCode "Flatten"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Floor)
ObjectPropertyAssertion(ops:evaluatesAs a:Floor ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Floor ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Floor a:FloorCode)
ClassAssertion(ops:OperatorConceptCode a:FloorCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:FloorCode a:Floor)
DataPropertyAssertion(skos-ext:code a:FloorCode "Floor"^^xsd:string)
DataPropertyAssertion(skos:notation a:FloorCode "Floor"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ForEach)
ObjectPropertyAssertion(ops:evaluatesAs a:ForEach ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ForEach ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ForEach ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ForEach a:ForEachCode)
ClassAssertion(ops:OperatorConceptCode a:ForEachCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ForEachCode a:ForEach)
DataPropertyAssertion(skos-ext:code a:ForEachCode "ForEach"^^xsd:string)
DataPropertyAssertion(skos:notation a:ForEachCode "ForEach"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Greater)
ObjectPropertyAssertion(ops:evaluatesAs a:Greater ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Greater ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Greater ops:scalarType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Greater a:GreaterCode)
ClassAssertion(ops:OperatorConceptCode a:GreaterCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:GreaterCode a:Greater)
DataPropertyAssertion(skos-ext:code a:GreaterCode "Greater"^^xsd:string)
DataPropertyAssertion(skos:notation a:GreaterCode "Greater"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:GreaterOrEqual)
ObjectPropertyAssertion(ops:evaluatesAs a:GreaterOrEqual ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:GreaterOrEqual ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:GreaterOrEqual ops:scalarType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:GreaterOrEqual a:GreaterOrEqualCode)
ClassAssertion(ops:OperatorConceptCode a:GreaterOrEqualCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:GreaterOrEqualCode a:GreaterOrEqual)
DataPropertyAssertion(skos-ext:code a:GreaterOrEqualCode "GreaterOrEqual"^^xsd:string)
DataPropertyAssertion(skos:notation a:GreaterOrEqualCode "GreaterOrEqual"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:IfNull)
ObjectPropertyAssertion(ops:evaluatesAs a:IfNull ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IfNull ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:IfNull ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IfNull a:IfNullCode)
ClassAssertion(ops:OperatorConceptCode a:IfNullCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IfNullCode a:IfNull)
DataPropertyAssertion(skos-ext:code a:IfNullCode "IfNull"^^xsd:string)
DataPropertyAssertion(skos:notation a:IfNullCode "IfNull"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:InAny)
ObjectPropertyAssertion(ops:evaluatesAs a:InAny ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:InAny ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:InAny ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:InAny a:InAnyCode)
ClassAssertion(ops:OperatorConceptCode a:InAnyCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:InAnyCode a:InAny)
DataPropertyAssertion(skos-ext:code a:InAnyCode "In"^^xsd:string)
DataPropertyAssertion(skos:notation a:InAnyCode "In"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:InList)
ObjectPropertyAssertion(ops:evaluatesAs a:InList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:InList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:InList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:InList a:InListCode)
ClassAssertion(ops:OperatorConceptCode a:InListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:InListCode a:InList)
DataPropertyAssertion(skos-ext:code a:InListCode "In"^^xsd:string)
DataPropertyAssertion(skos:notation a:InListCode "In"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:IndexEarliest)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexEarliest ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:IndexEarliest ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexEarliest a:IndexEarliestCode)
ClassAssertion(ops:OperatorConceptCode a:IndexEarliestCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexEarliestCode a:IndexEarliest)
DataPropertyAssertion(skos-ext:code a:IndexEarliestCode "IndexEarliest"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexEarliestCode "IndexEarliest"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:IndexLatest)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexLatest ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:IndexLatest ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexLatest a:IndexLatestCode)
ClassAssertion(ops:OperatorConceptCode a:IndexLatestCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexLatestCode a:IndexLatest)
DataPropertyAssertion(skos-ext:code a:IndexLatestCode "IndexLatest"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexLatestCode "IndexLatest"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:IndexMax)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexMax ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:IndexMax ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexMax a:IndexMaxCode)
ClassAssertion(ops:OperatorConceptCode a:IndexMaxCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexMaxCode a:IndexMax)
DataPropertyAssertion(skos-ext:code a:IndexMaxCode "IndexMax"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexMaxCode "IndexMax"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:IndexMin)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexMin ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:IndexMin ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexMin a:IndexMinCode)
ClassAssertion(ops:OperatorConceptCode a:IndexMinCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexMinCode a:IndexMin)
DataPropertyAssertion(skos-ext:code a:IndexMinCode "IndexMin"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexMinCode "IndexMin"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:IndexOf)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexOf ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IndexOf ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:IndexOf ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexOf a:IndexOfCode)
ClassAssertion(ops:OperatorConceptCode a:IndexOfCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexOfCode a:IndexOf)
DataPropertyAssertion(skos-ext:code a:IndexOfCode "IndexOf"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexOfCode "IndexOf"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:IndexerList)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexerList ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IndexerList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:IndexerList ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexerList a:IndexerListCode)
ClassAssertion(ops:OperatorConceptCode a:IndexerListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexerListCode a:IndexerList)
DataPropertyAssertion(skos-ext:code a:IndexerListCode "Indexer"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexerListCode "Indexer"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:IndexerString)
ObjectPropertyAssertion(ops:evaluatesAs a:IndexerString ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IndexerString ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:IndexerString ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IndexerString a:IndexerStringCode)
ClassAssertion(ops:OperatorConceptCode a:IndexerStringCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IndexerStringCode a:IndexerString)
DataPropertyAssertion(skos-ext:code a:IndexerStringCode "Indexer"^^xsd:string)
DataPropertyAssertion(skos:notation a:IndexerStringCode "Indexer"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:IntersectInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:IntersectInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IntersectInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:IntersectInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IntersectInterval a:IntersectIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:IntersectIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IntersectIntervalCode a:IntersectInterval)
DataPropertyAssertion(skos-ext:code a:IntersectIntervalCode "Intersect"^^xsd:string)
DataPropertyAssertion(skos:notation a:IntersectIntervalCode "Intersect"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:IntersectList)
ObjectPropertyAssertion(ops:evaluatesAs a:IntersectList ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IntersectList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:IntersectList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IntersectList a:IntersectListCode)
ClassAssertion(ops:OperatorConceptCode a:IntersectListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IntersectListCode a:IntersectList)
DataPropertyAssertion(skos-ext:code a:IntersectListCode "Intersect"^^xsd:string)
DataPropertyAssertion(skos:notation a:IntersectListCode "Intersect"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Interval)
ObjectPropertyAssertion(ops:evaluatesAs a:Interval ops:intervalType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Interval ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Interval ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Interval a:IntervalCode)
ClassAssertion(ops:OperatorConceptCode a:IntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IntervalCode a:Interval)
DataPropertyAssertion(skos-ext:code a:IntervalCode "Interval"^^xsd:string)
DataPropertyAssertion(skos:notation a:IntervalCode "Interval"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:IsEmptyCollection)
ObjectPropertyAssertion(ops:evaluatesAs a:IsEmptyCollection ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IsEmptyCollection ops:collectionType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IsEmptyCollection a:IsEmptyCollectionCode)
ClassAssertion(ops:OperatorConceptCode a:IsEmptyCollectionCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IsEmptyCollectionCode a:IsEmptyCollection)
DataPropertyAssertion(skos-ext:code a:IsEmptyCollectionCode "IsEmpty"^^xsd:string)
DataPropertyAssertion(skos:notation a:IsEmptyCollectionCode "IsEmpty"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:IsEmptyList)
ObjectPropertyAssertion(ops:evaluatesAs a:IsEmptyList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IsEmptyList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IsEmptyList a:IsEmptyListCode)
ClassAssertion(ops:OperatorConceptCode a:IsEmptyListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IsEmptyListCode a:IsEmptyList)
DataPropertyAssertion(skos-ext:code a:IsEmptyListCode "IsEmpty"^^xsd:string)
DataPropertyAssertion(skos:notation a:IsEmptyListCode "IsEmpty"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:IsNotEmpty)
ObjectPropertyAssertion(ops:evaluatesAs a:IsNotEmpty ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IsNotEmpty ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IsNotEmpty a:IsNotEmptyCode)
ClassAssertion(ops:OperatorConceptCode a:IsNotEmptyCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IsNotEmptyCode a:IsNotEmpty)
DataPropertyAssertion(skos-ext:code a:IsNotEmptyCode "IsNotEmpty"^^xsd:string)
DataPropertyAssertion(skos:notation a:IsNotEmptyCode "IsNotEmpty"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:IsNull)
ObjectPropertyAssertion(ops:evaluatesAs a:IsNull ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:IsNull ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:IsNull a:IsNullCode)
ClassAssertion(ops:OperatorConceptCode a:IsNullCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:IsNullCode a:IsNull)
DataPropertyAssertion(skos-ext:code a:IsNullCode "IsNull"^^xsd:string)
DataPropertyAssertion(skos:notation a:IsNullCode "IsNull"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Last)
ObjectPropertyAssertion(ops:evaluatesAs a:Last ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Last ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Last a:LastCode)
ClassAssertion(ops:OperatorConceptCode a:LastCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LastCode a:Last)
DataPropertyAssertion(skos-ext:code a:LastCode "Last"^^xsd:string)
DataPropertyAssertion(skos:notation a:LastCode "Last"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Latest)
ObjectPropertyAssertion(ops:evaluatesAs a:Latest ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType a:Latest ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Latest a:LatestCode)
ClassAssertion(ops:OperatorConceptCode a:LatestCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LatestCode a:Latest)
DataPropertyAssertion(skos-ext:code a:LatestCode "Latest"^^xsd:string)
DataPropertyAssertion(skos:notation a:LatestCode "Latest"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:LengthInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:LengthInterval ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:LengthInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:LengthInterval a:LengthIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:LengthIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LengthIntervalCode a:LengthInterval)
DataPropertyAssertion(skos-ext:code a:LengthIntervalCode "Length"^^xsd:string)
DataPropertyAssertion(skos:notation a:LengthIntervalCode "Length"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:LengthString)
ObjectPropertyAssertion(ops:evaluatesAs a:LengthString ops:realType)
ObjectPropertyAssertion(ops:evaluatesAs a:LengthString ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:LengthString ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:LengthString a:LengthStringCode)
ClassAssertion(ops:OperatorConceptCode a:LengthStringCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LengthStringCode a:LengthString)
DataPropertyAssertion(skos-ext:code a:LengthStringCode "Length"^^xsd:string)
DataPropertyAssertion(skos:notation a:LengthStringCode "Length"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Less)
ObjectPropertyAssertion(ops:evaluatesAs a:Less ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Less ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Less ops:scalarType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Less a:LessCode)
ClassAssertion(ops:OperatorConceptCode a:LessCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LessCode a:Less)
DataPropertyAssertion(skos-ext:code a:LessCode "Less"^^xsd:string)
DataPropertyAssertion(skos:notation a:LessCode "Less"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:LessOrEqual)
ObjectPropertyAssertion(ops:evaluatesAs a:LessOrEqual ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:LessOrEqual ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:LessOrEqual ops:scalarType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:LessOrEqual a:LessOrEqualCode)
ClassAssertion(ops:OperatorConceptCode a:LessOrEqualCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LessOrEqualCode a:LessOrEqual)
DataPropertyAssertion(skos-ext:code a:LessOrEqualCode "LessOrEqual"^^xsd:string)
DataPropertyAssertion(skos:notation a:LessOrEqualCode "LessOrEqual"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:List)
ObjectPropertyAssertion(ops:evaluatesAs a:List ops:listType)
ObjectPropertyAssertion(ops:hasOperandType a:List ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:List a:ListCode)
ClassAssertion(ops:OperatorConceptCode a:ListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ListCode a:List)
DataPropertyAssertion(skos-ext:code a:ListCode "List"^^xsd:string)
DataPropertyAssertion(skos:notation a:ListCode "List"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Ln)
ObjectPropertyAssertion(ops:evaluatesAs a:Ln ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Ln ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Ln a:LnCode)
ClassAssertion(ops:OperatorConceptCode a:LnCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LnCode a:Ln)
DataPropertyAssertion(skos-ext:code a:LnCode "Ln"^^xsd:string)
DataPropertyAssertion(skos:notation a:LnCode "Ln"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Log)
ObjectPropertyAssertion(ops:evaluatesAs a:Log ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Log ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Log ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Log a:LogCode)
ClassAssertion(ops:BinaryOperatorConcept a:Log10)
ObjectPropertyAssertion(ops:evaluatesAs a:Log10 ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Log10 ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Log10 ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Log10 a:Log10Code)
ClassAssertion(ops:OperatorConceptCode a:Log10Code)
ObjectPropertyAssertion(skos-ext:denotesConcept a:Log10Code a:Log10)
DataPropertyAssertion(skos-ext:code a:Log10Code "Log10"^^xsd:string)
DataPropertyAssertion(skos:notation a:Log10Code "Log10"^^xsd:string)
ClassAssertion(ops:OperatorConceptCode a:LogCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LogCode a:Log)
DataPropertyAssertion(skos-ext:code a:LogCode "Log"^^xsd:string)
DataPropertyAssertion(skos:notation a:LogCode "Log"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Lower)
ObjectPropertyAssertion(ops:evaluatesAs a:Lower ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Lower ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Lower a:LowerCode)
ClassAssertion(ops:OperatorConceptCode a:LowerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:LowerCode a:Lower)
DataPropertyAssertion(skos-ext:code a:LowerCode "Lower"^^xsd:string)
DataPropertyAssertion(skos:notation a:LowerCode "Lower"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Max)
ObjectPropertyAssertion(ops:evaluatesAs a:Max ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType a:Max ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Max a:MaxCode)
ClassAssertion(ops:OperatorConceptCode a:MaxCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MaxCode a:Max)
DataPropertyAssertion(skos-ext:code a:MaxCode "Max"^^xsd:string)
DataPropertyAssertion(skos:notation a:MaxCode "Max"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:MaxInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:MaxInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:MaxInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:MaxInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:MaxInteger a:MaxIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:MaxIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MaxIntegerCode a:MaxInteger)
DataPropertyAssertion(skos-ext:code a:MaxIntegerCode "Max"^^xsd:string)
DataPropertyAssertion(skos:notation a:MaxIntegerCode "Max"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:MaxReal)
ObjectPropertyAssertion(ops:evaluatesAs a:MaxReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:MaxReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:MaxReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:MaxReal a:MaxRealCode)
ClassAssertion(ops:OperatorConceptCode a:MaxRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MaxRealCode a:MaxReal)
DataPropertyAssertion(skos-ext:code a:MaxRealCode "Max"^^xsd:string)
DataPropertyAssertion(skos:notation a:MaxRealCode "Max"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Median)
ObjectPropertyAssertion(ops:evaluatesAs a:Median ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:Median ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Median a:MedianCode)
ClassAssertion(ops:OperatorConceptCode a:MedianCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MedianCode a:Median)
DataPropertyAssertion(skos-ext:code a:MedianCode "Median"^^xsd:string)
DataPropertyAssertion(skos:notation a:MedianCode "Median"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Meets)
ObjectPropertyAssertion(ops:evaluatesAs a:Meets ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Meets ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Meets ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Meets a:MeetsCode)
ClassAssertion(ops:OperatorConceptCode a:MeetsCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MeetsCode a:Meets)
DataPropertyAssertion(skos-ext:code a:MeetsCode "Meets"^^xsd:string)
DataPropertyAssertion(skos:notation a:MeetsCode "Meets"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Min)
ObjectPropertyAssertion(ops:evaluatesAs a:Min ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType a:Min ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Min a:MinCode)
ClassAssertion(ops:OperatorConceptCode a:MinCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MinCode a:Min)
DataPropertyAssertion(skos-ext:code a:MinCode "Min"^^xsd:string)
DataPropertyAssertion(skos:notation a:MinCode "Min"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:MinInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:MinInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:MinInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:MinInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:MinInteger a:MinIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:MinIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MinIntegerCode a:MinInteger)
DataPropertyAssertion(skos-ext:code a:MinIntegerCode "Min"^^xsd:string)
DataPropertyAssertion(skos:notation a:MinIntegerCode "Min"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:MinReal)
ObjectPropertyAssertion(ops:evaluatesAs a:MinReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:MinReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:MinReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:MinReal a:MinRealCode)
ClassAssertion(ops:OperatorConceptCode a:MinRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MinRealCode a:MinReal)
DataPropertyAssertion(skos-ext:code a:MinRealCode "Min"^^xsd:string)
DataPropertyAssertion(skos:notation a:MinRealCode "Min"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ModuloInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:ModuloInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ModuloInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ModuloInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ModuloInteger a:ModuloIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:ModuloIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ModuloIntegerCode a:ModuloInteger)
DataPropertyAssertion(skos-ext:code a:ModuloIntegerCode "Modulo"^^xsd:string)
DataPropertyAssertion(skos:notation a:ModuloIntegerCode "Modulo"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ModuloReal)
ObjectPropertyAssertion(ops:evaluatesAs a:ModuloReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ModuloReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ModuloReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ModuloReal a:ModuloRealCode)
ClassAssertion(ops:OperatorConceptCode a:ModuloRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ModuloRealCode a:ModuloReal)
DataPropertyAssertion(skos-ext:code a:ModuloRealCode "Modulo"^^xsd:string)
DataPropertyAssertion(skos:notation a:ModuloRealCode "Modulo"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:MultiplyInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:MultiplyInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:MultiplyInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:MultiplyInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:MultiplyInteger a:MultiplyIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:MultiplyIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MultiplyIntegerCode a:MultiplyInteger)
DataPropertyAssertion(skos-ext:code a:MultiplyIntegerCode "Multiply"^^xsd:string)
DataPropertyAssertion(skos:notation a:MultiplyIntegerCode "Multiply"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:MultiplyReal)
ObjectPropertyAssertion(ops:evaluatesAs a:MultiplyReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:MultiplyReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:MultiplyReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:MultiplyReal a:MultiplyRealCode)
ClassAssertion(ops:OperatorConceptCode a:MultiplyRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:MultiplyRealCode a:MultiplyReal)
DataPropertyAssertion(skos-ext:code a:MultiplyRealCode "Multiply"^^xsd:string)
DataPropertyAssertion(skos:notation a:MultiplyRealCode "Multiply"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:NegateInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:NegateInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:NegateInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:NegateInteger a:NegateIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:NegateIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:NegateIntegerCode a:NegateInteger)
DataPropertyAssertion(skos-ext:code a:NegateIntegerCode "Negate"^^xsd:string)
DataPropertyAssertion(skos:notation a:NegateIntegerCode "Negate"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:NegateReal)
ObjectPropertyAssertion(ops:evaluatesAs a:NegateReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:NegateReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:NegateReal a:NegateRealCode)
ClassAssertion(ops:OperatorConceptCode a:NegateRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:NegateRealCode a:NegateReal)
DataPropertyAssertion(skos-ext:code a:NegateRealCode "Negate"^^xsd:string)
DataPropertyAssertion(skos:notation a:NegateRealCode "Negate"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Not)
ObjectPropertyAssertion(ops:evaluatesAs a:Not ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Not ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Not a:NotCode)
ClassAssertion(ops:OperatorConceptCode a:NotCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:NotCode a:Not)
DataPropertyAssertion(skos-ext:code a:NotCode "Not"^^xsd:string)
DataPropertyAssertion(skos:notation a:NotCode "Not"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:NotEqual)
ObjectPropertyAssertion(ops:evaluatesAs a:NotEqual ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:NotEqual ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:NotEqual ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:NotEqual a:NotEqualCode)
ClassAssertion(ops:OperatorConceptCode a:NotEqualCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:NotEqualCode a:NotEqual)
DataPropertyAssertion(skos-ext:code a:NotEqualCode "NotEqual"^^xsd:string)
DataPropertyAssertion(skos:notation a:NotEqualCode "NotEqual"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:ObjectRedefine)
ObjectPropertyAssertion(ops:evaluatesAs a:ObjectRedefine ops:objectType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ObjectRedefine ops:objectType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ObjectRedefine a:ObjectRedefineCode)
ClassAssertion(ops:OperatorConceptCode a:ObjectRedefineCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ObjectRedefineCode a:ObjectRedefine)
DataPropertyAssertion(skos-ext:code a:ObjectRedefineCode "ObjectRedefine"^^xsd:string)
DataPropertyAssertion(skos:notation a:ObjectRedefineCode "ObjectRedefine"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Or)
ObjectPropertyAssertion(ops:evaluatesAs a:Or ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:Or ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Or a:OrCode)
ClassAssertion(ops:OperatorConceptCode a:OrCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:OrCode a:Or)
DataPropertyAssertion(skos-ext:code a:OrCode "Or"^^xsd:string)
DataPropertyAssertion(skos:notation a:OrCode "Or"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Overlaps)
ObjectPropertyAssertion(ops:evaluatesAs a:Overlaps ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Overlaps ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Overlaps ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Overlaps a:OverlapsCode)
ClassAssertion(ops:OperatorConceptCode a:OverlapsCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:OverlapsCode a:Overlaps)
DataPropertyAssertion(skos-ext:code a:OverlapsCode "Overlaps"^^xsd:string)
DataPropertyAssertion(skos:notation a:OverlapsCode "Overlaps"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Pos)
ObjectPropertyAssertion(ops:evaluatesAs a:Pos ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Pos ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Pos ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Pos a:PosCode)
ClassAssertion(ops:OperatorConceptCode a:PosCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:PosCode a:Pos)
DataPropertyAssertion(skos-ext:code a:PosCode "Pos"^^xsd:string)
DataPropertyAssertion(skos:notation a:PosCode "Pos"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:PowerInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:PowerInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:PowerInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:PowerInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:PowerInteger a:PowerIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:PowerIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:PowerIntegerCode a:PowerInteger)
DataPropertyAssertion(skos-ext:code a:PowerIntegerCode "Power"^^xsd:string)
DataPropertyAssertion(skos:notation a:PowerIntegerCode "Power"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:PowerReal)
ObjectPropertyAssertion(ops:evaluatesAs a:PowerReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:PowerReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:PowerReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:PowerReal a:PowerRealCode)
ClassAssertion(ops:OperatorConceptCode a:PowerRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:PowerRealCode a:PowerReal)
DataPropertyAssertion(skos-ext:code a:PowerRealCode "Power"^^xsd:string)
DataPropertyAssertion(skos:notation a:PowerRealCode "Power"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Pred)
ObjectPropertyAssertion(ops:evaluatesAs a:Pred ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Pred ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Pred a:PredCode)
ClassAssertion(ops:OperatorConceptCode a:PredCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:PredCode a:Pred)
DataPropertyAssertion(skos-ext:code a:PredCode "Pred"^^xsd:string)
DataPropertyAssertion(skos:notation a:PredCode "Pred"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ProperContainsInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:ProperContainsInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ProperContainsInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ProperContainsInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ProperContainsInterval a:ProperContainsIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:ProperContainsIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ProperContainsIntervalCode a:ProperContainsInterval)
DataPropertyAssertion(skos-ext:code a:ProperContainsIntervalCode "ProperContains"^^xsd:string)
DataPropertyAssertion(skos:notation a:ProperContainsIntervalCode "ProperContains"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ProperContainsList)
ObjectPropertyAssertion(ops:evaluatesAs a:ProperContainsList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ProperContainsList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ProperContainsList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ProperContainsList a:ProperContainsListCode)
ClassAssertion(ops:OperatorConceptCode a:ProperContainsListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ProperContainsListCode a:ProperContainsList)
DataPropertyAssertion(skos-ext:code a:ProperContainsListCode "ProperContains"^^xsd:string)
DataPropertyAssertion(skos:notation a:ProperContainsListCode "ProperContains"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ProperInInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:ProperInInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ProperInInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ProperInInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ProperInInterval a:ProperInIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:ProperInIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ProperInIntervalCode a:ProperInInterval)
DataPropertyAssertion(skos-ext:code a:ProperInIntervalCode "ProperIn"^^xsd:string)
DataPropertyAssertion(skos:notation a:ProperInIntervalCode "ProperIn"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:ProperInList)
ObjectPropertyAssertion(ops:evaluatesAs a:ProperInList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ProperInList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:ProperInList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ProperInList a:ProperInListCode)
ClassAssertion(ops:OperatorConceptCode a:ProperInListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ProperInListCode a:ProperInList)
DataPropertyAssertion(skos-ext:code a:ProperInListCode "ProperIn"^^xsd:string)
DataPropertyAssertion(skos:notation a:ProperInListCode "ProperIn"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Reverse)
ObjectPropertyAssertion(ops:evaluatesAs a:Reverse ops:listType)
ObjectPropertyAssertion(ops:hasOperandType a:Reverse ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Reverse a:ReverseCode)
ClassAssertion(ops:OperatorConceptCode a:ReverseCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ReverseCode a:Reverse)
DataPropertyAssertion(skos-ext:code a:ReverseCode "Reverse"^^xsd:string)
DataPropertyAssertion(skos:notation a:ReverseCode "Reverse"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Round)
ObjectPropertyAssertion(ops:evaluatesAs a:Round ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Round ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Round ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Round a:RoundCode)
ClassAssertion(ops:OperatorConceptCode a:RoundCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:RoundCode a:Round)
DataPropertyAssertion(skos-ext:code a:RoundCode "Round"^^xsd:string)
DataPropertyAssertion(skos:notation a:RoundCode "Round"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:RoundReal)
ObjectPropertyAssertion(ops:evaluatesAs a:RoundReal ops:realType)
ObjectPropertyAssertion(ops:evaluatesAs a:RoundReal ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:RoundReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:RoundReal a:RoundRealCode)
ClassAssertion(ops:OperatorConceptCode a:RoundRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:RoundRealCode a:RoundReal)
DataPropertyAssertion(skos-ext:code a:RoundRealCode "Round"^^xsd:string)
DataPropertyAssertion(skos:notation a:RoundRealCode "Round"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:SeqTo)
ObjectPropertyAssertion(ops:evaluatesAs a:SeqTo ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SeqTo ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:SeqTo ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SeqTo a:SeqToCode)
ClassAssertion(ops:OperatorConceptCode a:SeqToCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SeqToCode a:SeqTo)
DataPropertyAssertion(skos-ext:code a:SeqToCode "SeqTo"^^xsd:string)
DataPropertyAssertion(skos:notation a:SeqToCode "SeqTo"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:SinInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:SinInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SinInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SinInteger a:SinIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:SinIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SinIntegerCode a:SinInteger)
DataPropertyAssertion(skos-ext:code a:SinIntegerCode "Sin"^^xsd:string)
DataPropertyAssertion(skos:notation a:SinIntegerCode "Sin"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:SinReal)
ObjectPropertyAssertion(ops:evaluatesAs a:SinReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SinReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SinReal a:SinRealCode)
ClassAssertion(ops:OperatorConceptCode a:SinRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SinRealCode a:SinReal)
DataPropertyAssertion(skos-ext:code a:SinRealCode "Sin"^^xsd:string)
DataPropertyAssertion(skos:notation a:SinRealCode "Sin"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Sort)
ObjectPropertyAssertion(ops:evaluatesAs a:Sort ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Sort ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Sort a:SortCode)
ClassAssertion(ops:OperatorConceptCode a:SortCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SortCode a:Sort)
DataPropertyAssertion(skos-ext:code a:SortCode "Sort"^^xsd:string)
DataPropertyAssertion(skos:notation a:SortCode "Sort"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:Split)
ObjectPropertyAssertion(ops:evaluatesAs a:Split ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Split ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Split ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Split a:SplitCode)
ClassAssertion(ops:OperatorConceptCode a:SplitCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SplitCode a:Split)
DataPropertyAssertion(skos-ext:code a:SplitCode "Split"^^xsd:string)
DataPropertyAssertion(skos:notation a:SplitCode "Split"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:SqrtInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:SqrtInteger ops:realType)
ObjectPropertyAssertion(ops:evaluatesAs a:SqrtInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SqrtInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SqrtInteger a:SqrtIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:SqrtIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SqrtIntegerCode a:SqrtInteger)
DataPropertyAssertion(skos-ext:code a:SqrtIntegerCode "Sqrt"^^xsd:string)
DataPropertyAssertion(skos:notation a:SqrtIntegerCode "Sqrt"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:SqrtReal)
ObjectPropertyAssertion(ops:evaluatesAs a:SqrtReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SqrtReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SqrtReal a:SqrtRealCode)
ClassAssertion(ops:OperatorConceptCode a:SqrtRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SqrtRealCode a:SqrtReal)
DataPropertyAssertion(skos-ext:code a:SqrtRealCode "Sqrt"^^xsd:string)
DataPropertyAssertion(skos:notation a:SqrtRealCode "Sqrt"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:StdDev)
ObjectPropertyAssertion(ops:evaluatesAs a:StdDev ops:numberType)
ObjectPropertyAssertion(ops:hasOperandType a:StdDev ops:numberType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:StdDev a:StdDevCode)
ClassAssertion(ops:OperatorConceptCode a:StdDevCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:StdDevCode a:StdDev)
DataPropertyAssertion(skos-ext:code a:StdDevCode "StdDev"^^xsd:string)
DataPropertyAssertion(skos:notation a:StdDevCode "StdDev"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:String)
ObjectPropertyAssertion(ops:evaluatesAs a:String ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:String ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:String a:StringCode)
ClassAssertion(ops:OperatorConceptCode a:StringCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:StringCode a:String)
DataPropertyAssertion(skos-ext:code a:StringCode "String"^^xsd:string)
DataPropertyAssertion(skos:notation a:StringCode "String"^^xsd:string)
ClassAssertion(ops:TernaryOperatorConcept a:Substring)
ObjectPropertyAssertion(ops:evaluatesAs a:Substring ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Substring ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:Substring ops:intType)
ObjectPropertyAssertion(ops:hasThirdOperandType a:Substring ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Substring a:SubstringCode)
ClassAssertion(ops:OperatorConceptCode a:SubstringCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SubstringCode a:Substring)
DataPropertyAssertion(skos-ext:code a:SubstringCode "Substring"^^xsd:string)
DataPropertyAssertion(skos:notation a:SubstringCode "Substring"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:SubtractInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:SubtractInteger ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SubtractInteger ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:SubtractInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SubtractInteger a:SubtractIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:SubtractIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SubtractIntegerCode a:SubtractInteger)
DataPropertyAssertion(skos-ext:code a:SubtractIntegerCode "Subtract"^^xsd:string)
DataPropertyAssertion(skos:notation a:SubtractIntegerCode "Subtract"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:SubtractReal)
ObjectPropertyAssertion(ops:evaluatesAs a:SubtractReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:SubtractReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:SubtractReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SubtractReal a:SubtractRealCode)
ClassAssertion(ops:OperatorConceptCode a:SubtractRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SubtractRealCode a:SubtractReal)
DataPropertyAssertion(skos-ext:code a:SubtractRealCode "Subtract"^^xsd:string)
DataPropertyAssertion(skos:notation a:SubtractRealCode "Subtract"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Succ)
ObjectPropertyAssertion(ops:evaluatesAs a:Succ ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Succ ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Succ a:SuccCode)
ClassAssertion(ops:OperatorConceptCode a:SuccCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SuccCode a:Succ)
DataPropertyAssertion(skos-ext:code a:SuccCode "Succ"^^xsd:string)
DataPropertyAssertion(skos:notation a:SuccCode "Succ"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:SumInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:SumInteger ops:intType)
ObjectPropertyAssertion(ops:hasOperandType a:SumInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SumInteger a:SumIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:SumIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SumIntegerCode a:SumInteger)
DataPropertyAssertion(skos-ext:code a:SumIntegerCode "Sum"^^xsd:string)
DataPropertyAssertion(skos:notation a:SumIntegerCode "Sum"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:SumReal)
ObjectPropertyAssertion(ops:evaluatesAs a:SumReal ops:realType)
ObjectPropertyAssertion(ops:hasOperandType a:SumReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:SumReal a:SumRealCode)
ClassAssertion(ops:OperatorConceptCode a:SumRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:SumRealCode a:SumReal)
DataPropertyAssertion(skos-ext:code a:SumRealCode "Sum"^^xsd:string)
DataPropertyAssertion(skos:notation a:SumRealCode "Sum"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:TanInteger)
ObjectPropertyAssertion(ops:evaluatesAs a:TanInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:TanInteger ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:TanInteger a:TanIntegerCode)
ClassAssertion(ops:OperatorConceptCode a:TanIntegerCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:TanIntegerCode a:TanInteger)
DataPropertyAssertion(skos-ext:code a:TanIntegerCode "Tan"^^xsd:string)
DataPropertyAssertion(skos:notation a:TanIntegerCode "Tan"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:TanReal)
ObjectPropertyAssertion(ops:evaluatesAs a:TanReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:TanReal ops:realType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:TanReal a:TanRealCode)
ClassAssertion(ops:OperatorConceptCode a:TanRealCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:TanRealCode a:TanReal)
DataPropertyAssertion(skos-ext:code a:TanRealCode "Tan"^^xsd:string)
DataPropertyAssertion(skos:notation a:TanRealCode "Tan"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:ToString)
ObjectPropertyAssertion(ops:evaluatesAs a:ToString ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:ToString ops:anyType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:ToString a:ToStringCode)
ClassAssertion(ops:OperatorConceptCode a:ToStringCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:ToStringCode a:ToString)
DataPropertyAssertion(skos-ext:code a:ToStringCode "ToString"^^xsd:string)
DataPropertyAssertion(skos:notation a:ToStringCode "ToString"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Trim)
ObjectPropertyAssertion(ops:evaluatesAs a:Trim ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Trim ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Trim a:TrimCode)
ClassAssertion(ops:OperatorConceptCode a:TrimCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:TrimCode a:Trim)
DataPropertyAssertion(skos-ext:code a:TrimCode "Trim"^^xsd:string)
DataPropertyAssertion(skos:notation a:TrimCode "Trim"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:TrimLeft)
ObjectPropertyAssertion(ops:evaluatesAs a:TrimLeft ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:TrimLeft ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:TrimLeft a:TrimLeftCode)
ClassAssertion(ops:OperatorConceptCode a:TrimLeftCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:TrimLeftCode a:TrimLeft)
DataPropertyAssertion(skos-ext:code a:TrimLeftCode "TrimLeft"^^xsd:string)
DataPropertyAssertion(skos:notation a:TrimLeftCode "TrimLeft"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:TrimRight)
ObjectPropertyAssertion(ops:evaluatesAs a:TrimRight ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:TrimRight ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:TrimRight a:TrimRightCode)
ClassAssertion(ops:OperatorConceptCode a:TrimRightCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:TrimRightCode a:TrimRight)
DataPropertyAssertion(skos-ext:code a:TrimRightCode "TrimRight"^^xsd:string)
DataPropertyAssertion(skos:notation a:TrimRightCode "TrimRight"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:TruncatedDivide)
ObjectPropertyAssertion(ops:evaluatesAs a:TruncatedDivide ops:intType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:TruncatedDivide ops:intType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:TruncatedDivide ops:intType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:TruncatedDivide a:TruncatedDivideCode)
ClassAssertion(ops:OperatorConceptCode a:TruncatedDivideCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:TruncatedDivideCode a:TruncatedDivide)
DataPropertyAssertion(skos-ext:code a:TruncatedDivideCode "TruncatedDivide"^^xsd:string)
DataPropertyAssertion(skos:notation a:TruncatedDivideCode "TruncatedDivide"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:UnionInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:UnionInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasOperandType a:UnionInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:UnionInterval a:UnionIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:UnionIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:UnionIntervalCode a:UnionInterval)
DataPropertyAssertion(skos-ext:code a:UnionIntervalCode "Union"^^xsd:string)
DataPropertyAssertion(skos:notation a:UnionIntervalCode "Union"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:UnionList)
ObjectPropertyAssertion(ops:evaluatesAs a:UnionList ops:listType)
ObjectPropertyAssertion(ops:hasOperandType a:UnionList ops:listType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:UnionList a:UnionListCode)
ClassAssertion(ops:OperatorConceptCode a:UnionListCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:UnionListCode a:UnionList)
DataPropertyAssertion(skos-ext:code a:UnionListCode "Union"^^xsd:string)
DataPropertyAssertion(skos:notation a:UnionListCode "Union"^^xsd:string)
ClassAssertion(ops:UnaryOperatorConcept a:Upper)
ObjectPropertyAssertion(ops:evaluatesAs a:Upper ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:Upper ops:stringType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Upper a:UpperCode)
ClassAssertion(ops:OperatorConceptCode a:UpperCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:UpperCode a:Upper)
DataPropertyAssertion(skos-ext:code a:UpperCode "Upper"^^xsd:string)
DataPropertyAssertion(skos:notation a:UpperCode "Upper"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Variance)
ObjectPropertyAssertion(ops:evaluatesAs a:Variance ops:numberType)
ObjectPropertyAssertion(ops:hasOperandType a:Variance ops:numberType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Variance a:VarianceCode)
ClassAssertion(ops:OperatorConceptCode a:VarianceCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:VarianceCode a:Variance)
DataPropertyAssertion(skos-ext:code a:VarianceCode "Variance"^^xsd:string)
DataPropertyAssertion(skos:notation a:VarianceCode "Variance"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:WithinAny)
ObjectPropertyAssertion(ops:evaluatesAs a:WithinAny ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:WithinAny ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:WithinAny ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:WithinAny a:WithinAnyCode)
ClassAssertion(ops:OperatorConceptCode a:WithinAnyCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:WithinAnyCode a:WithinAny)
DataPropertyAssertion(skos-ext:code a:WithinAnyCode "Within"^^xsd:string)
DataPropertyAssertion(skos:notation a:WithinAnyCode "Within"^^xsd:string)
ClassAssertion(ops:BinaryOperatorConcept a:WithinInterval)
ObjectPropertyAssertion(ops:evaluatesAs a:WithinInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType a:WithinInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType a:WithinInterval ops:intervalType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:WithinInterval a:WithinIntervalCode)
ClassAssertion(ops:OperatorConceptCode a:WithinIntervalCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:WithinIntervalCode a:WithinInterval)
DataPropertyAssertion(skos-ext:code a:WithinIntervalCode "Within"^^xsd:string)
DataPropertyAssertion(skos:notation a:WithinIntervalCode "Within"^^xsd:string)
ClassAssertion(ops:NAryOperatorConcept a:Xor)
ObjectPropertyAssertion(ops:evaluatesAs a:Xor ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType a:Xor ops:booleanType)
ObjectPropertyAssertion(skos-ext:conceptDenotedBy a:Xor a:XorCode)
ClassAssertion(ops:OperatorConceptCode a:XorCode)
ObjectPropertyAssertion(skos-ext:denotesConcept a:XorCode a:Xor)
DataPropertyAssertion(skos-ext:code a:XorCode "Xor"^^xsd:string)
DataPropertyAssertion(skos:notation a:XorCode "Xor"^^xsd:string)
DisjointClasses(ops:Variable a:TanIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IsEmptyListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ForEachExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ProperContainsListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AcosIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AvgTimeDurationExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EqualObjectExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ProperInListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DateAddExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EqualIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LastExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ContainsListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SubtractIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ObjectRedefineExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AddRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AvgIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ProperInIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SqrtRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ExtractCharactersExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ReverseExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexerStringExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SubtractRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:GreaterExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:StringExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ContainsIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:StdDevExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AcosRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AfterExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IntersectIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SuccExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:RoundRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:TrimExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SubstringExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ModuloIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DifferenceListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AsinIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SinIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DifferenceIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AllFalseExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:CeilingExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:UnionListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AbsIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:TruncatedDivideExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SinRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EqualBooleanExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ExistExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DatePartExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SeqToExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexLatestExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SortExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AllTrueExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MeetsExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IsNotEmptyExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EndExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MaxIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:FlattenExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AnyTrueExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AbsRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LengthIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:NegateRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:NegateIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SplitExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MaxExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:PosExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AtanIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:GreaterOrEqualExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:RoundExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ModuloRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:CosRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:TrimLeftExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AsinRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MinRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LatestExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IntersectListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SqrtIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MinExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:OrExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:WithinIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ConcatExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LessExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:PredExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LengthStringExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SumRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EqualStringExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ConvertExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:FirstExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LogExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:NotEqualExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:CombineExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:BeginExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MultiplyIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:InListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexMaxExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MaxRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ExpIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:BeforeExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IfNullExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ProperContainsIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:PowerRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:PowerIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ConditionalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LowerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:UpperExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:SumIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IsNullExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:TrimRightExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AndExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:OverlapsExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:VarianceExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AvgRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ToStringExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EqualScalarExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MinIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:FloorExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:ExpRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DateDiffExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LessOrEqualExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:InAnyExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:LnExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EqualListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:CoalesceExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:EarliestExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MedianExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexMinExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexerListExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexEarliestExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:NotExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:XorExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:TanRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DivideIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:DivideRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:MultiplyRealExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:UnionIntervalExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IndexOfExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:IsEmptyCollectionExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AddIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:FilterExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:WithinAnyExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:CountExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:CosIntegerExpression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:Log10Expression skos:Collection skos:Concept skos:ConceptScheme)
DisjointClasses(ops:Variable a:AtanRealExpression skos:Collection skos:Concept skos:ConceptScheme)
)