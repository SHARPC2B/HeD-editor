Prefix(:=<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#>)
Prefix(DUL:=<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(IOLite:=<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#>)
Prefix(owl2xml:=<http://www.w3.org/2006/12/owl2-xml#>)


Ontology(<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl>
Import(<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl>)
Annotation(owl:versionInfo "In 1.8, all object properties have been aligned to associatedWith, and some comments have been added.
In 1.7, the encodes object property has been modified in order to support any kind of information entity (purely social object or realization), and to give justice to computer science pragmatic equivalence between information objects that are fully encoded for computing, and the actual bits travelling in a machine or network, based on that encoding. The realizes property has been consequenctly declared as a subproperty of encodes.
Also removed redundant owl:someValuesFrom axioms
In 1.6, broadened range of hasRepresentationLanguage
In 1.5, some fixes added wrt to new plugins (Roles.owl, CollectionsLite.owl).
In 1.4, all elements have got English labels. Added the class LinguisticAct, useful to relate Agent(s) when use information objects to express meaning with some CommunicativeFunction (from the theory by Jakobson). Moreover, the relation between formal patterns and information patterns have been enriched. Some bugs fixed."^^xsd:string)
Annotation(owl:versionInfo "1.8"^^xsd:string)
Annotation(rdfs:label "Information Objects ontology"^^xsd:string)
Annotation(rdfs:comment "An ontology of information objects, encodings and realizations, as a plugin to DOLCE-Ultralite (reusing mainly the dul:expresses and dul:realizes relations from it). 
Several patterns are contained inside this ontology:
- encodings of information entities
- kinds of realizations (gestural motions, depictions, digital, multimedia, speech, etc.)
- combinatorial relations between information objects
- relations between formal expressions and generalized expressions (lexicalizations, formalizations)
- relations between formal expressions and their assignments in formal semantics
- relations between information objects and schemata (data structures, KOS, etc.)
- authorship
- kinds of linguistic objects
- copies, reproductions, etc.
- cultural combination of information objects (reuse, mixing, metaphorical blending)"^^xsd:string)

Declaration(Class(DUL:Action))
Declaration(Class(DUL:Agent))
Declaration(Class(DUL:Community))
Declaration(Class(DUL:Contract))
Declaration(Class(DUL:Description))
Declaration(Class(DUL:Entity))
Declaration(Class(DUL:FormalEntity))
SubClassOf(DUL:FormalEntity ObjectAllValuesFrom(:isAssignedTo :FormalExpression))
Declaration(Class(DUL:InformationEntity))
Declaration(Class(DUL:InformationObject))
Declaration(Class(DUL:InformationRealization))
Declaration(Class(DUL:PhysicalAgent))
Declaration(Class(DUL:PhysicalArtifact))
Declaration(Class(DUL:Plan))
Declaration(Class(DUL:PlanExecution))
Declaration(Class(DUL:Process))
Declaration(Class(DUL:Role))
Declaration(Class(DUL:Situation))
Declaration(Class(DUL:SocialObject))
Declaration(Class(DUL:Theory))
Declaration(Class(:BodilyMotion))
AnnotationAssertion(rdfs:label :BodilyMotion "Bodily motion"@en)
AnnotationAssertion(rdfs:label :BodilyMotion "Movimento corporeo"@it)
AnnotationAssertion(rdfs:comment :BodilyMotion "An information realization consisting of bodily movements."^^xsd:string)
SubClassOf(:BodilyMotion DUL:Action)
SubClassOf(:BodilyMotion DUL:InformationRealization)
SubClassOf(:BodilyMotion ObjectSomeValuesFrom(DUL:hasParticipant DUL:PhysicalAgent))
Declaration(Class(:Code))
AnnotationAssertion(rdfs:comment :Code "Any piece of information expressing computational operations, objects, markup, etc."^^xsd:string)
AnnotationAssertion(rdfs:label :Code "Code"@en)
AnnotationAssertion(rdfs:label :Code "Codice"@it)
SubClassOf(:Code DUL:InformationObject)
SubClassOf(:Code ObjectAllValuesFrom(DUL:isRealizedBy :DigitalResource))
Declaration(Class(:CommunicativeFunction))
AnnotationAssertion(rdfs:comment :CommunicativeFunction "The functions, e.g. defined by Jakobson and by Buhler, which define types of linguistic acts. Jakobson's ones include referential, conative, expressive, phatic, metalinguistic, poetic. Each function has typical roles and tasks that must be played during a linguistic act that achieves the function."^^xsd:string)
AnnotationAssertion(rdfs:label :CommunicativeFunction "Communicative function"@en)
AnnotationAssertion(rdfs:label :CommunicativeFunction "Funzione comunicativa"@it)
SubClassOf(:CommunicativeFunction DUL:Plan)
Declaration(Class(:ContractText))
AnnotationAssertion(rdfs:label :ContractText "Contract text"@en)
AnnotationAssertion(rdfs:label :ContractText "Testo di un contratto"@it)
AnnotationAssertion(rdfs:comment :ContractText "The text of a contract"^^xsd:string)
SubClassOf(:ContractText :Text)
SubClassOf(:ContractText ObjectSomeValuesFrom(DUL:expresses DUL:Contract))
Declaration(Class(:DBSchema))
AnnotationAssertion(rdfs:label :DBSchema "Database schema"@en)
AnnotationAssertion(rdfs:label :DBSchema "Schema di base di dati"@it)
AnnotationAssertion(rdfs:comment :DBSchema "Any conceptual, logical or physical schema for a database."^^xsd:string)
SubClassOf(:DBSchema :DataStructure)
Declaration(Class(:DataStructure))
AnnotationAssertion(rdfs:label :DataStructure "Data structure"@en)
AnnotationAssertion(rdfs:comment :DataStructure "Any data structure, including databases, schemas, lexica, knowledge organizations systems, etc."^^xsd:string)
AnnotationAssertion(rdfs:label :DataStructure "Struttura di dati"@it)
SubClassOf(:DataStructure DUL:InformationObject)
SubClassOf(:DataStructure ObjectAllValuesFrom(DUL:isRealizedBy :DigitalResource))
Declaration(Class(:Datum))
AnnotationAssertion(rdfs:label :Datum "Dato"@it)
AnnotationAssertion(rdfs:comment :Datum "From WordNet: 'an item of factual information derived from measurement or research'"^^xsd:string)
AnnotationAssertion(rdfs:label :Datum "Datum"@en)
SubClassOf(:Datum DUL:InformationObject)
Declaration(Class(:Depiction))
AnnotationAssertion(rdfs:label :Depiction "Realizzazione visiva"@it)
AnnotationAssertion(rdfs:label :Depiction "Depiction"@en)
AnnotationAssertion(rdfs:comment :Depiction "An information realization consisting of depicted images/signs of any sort (e.g. graffiti, drawings, inscriptions, pictures, sculptures, etc.), which are inscripted on a medium that lasts longer than the depicting act.
It also includes any early form of inscripted iconic expression, which can be considered as original bodily expressions."^^xsd:string)
SubClassOf(:Depiction DUL:InformationRealization)
SubClassOf(:Depiction DUL:PhysicalArtifact)
Declaration(Class(:DigitalPhoto))
AnnotationAssertion(rdfs:label :DigitalPhoto "Digital photo"@en)
SubClassOf(:DigitalPhoto :DigitalResource)
Declaration(Class(:DigitalResource))
AnnotationAssertion(rdfs:label :DigitalResource "Digital resource"@en)
AnnotationAssertion(rdfs:label :DigitalResource "Risorsa digitale"@it)
AnnotationAssertion(rdfs:comment :DigitalResource "Any resource that can be computed, e.g. a file, a piece of (implemented) software. This assumes an encoding allowing the computation (e.g. html+http protocol)."^^xsd:string)
SubClassOf(:DigitalResource DUL:InformationRealization)
Declaration(Class(:Drawing))
AnnotationAssertion(rdfs:label :Drawing "Disegno"@it)
AnnotationAssertion(rdfs:label :Drawing "Drawing"@en)
AnnotationAssertion(rdfs:comment :Drawing "wn noun: A representation of forms or objects on a surface by means of lines; \"drawings of abstract forms\"; \"he did complicated pen-and-ink drawings like medieval miniatures\""^^xsd:string)
SubClassOf(:Drawing :Depiction)
Declaration(Class(:FormalExpression))
AnnotationAssertion(rdfs:label :FormalExpression "Formal expression"@en)
AnnotationAssertion(rdfs:comment :FormalExpression "Any information object represented in a FormalLanguage, usually having a formal interpretation by a dul:FormalEntity, and used to formally represent any Entity"^^xsd:string)
AnnotationAssertion(rdfs:label :FormalExpression "Espressione formale"@it)
SubClassOf(:FormalExpression DUL:InformationObject)
SubClassOf(:FormalExpression ObjectSomeValuesFrom(:hasRepresentationLanguage :FormalLanguage))
SubClassOf(:FormalExpression ObjectSomeValuesFrom(:isFormalTermFor DUL:InformationObject))
DisjointClasses(:FormalExpression :KOS)
Declaration(Class(:FormalLanguage))
AnnotationAssertion(rdfs:label :FormalLanguage "Linguaggio formale"@it)
AnnotationAssertion(rdfs:comment :FormalLanguage "A formal language, created by some human, with a fixed grammar, and usually with an explicit formal semantics (i.e. any FormalExpression that is a wff or a valid element of a FormalLanguage has an interpretation wrt to formal entities such as sets, categories, etc.)."^^xsd:string)
AnnotationAssertion(rdfs:label :FormalLanguage "Formal language"@en)
SubClassOf(:FormalLanguage :Language)
SubClassOf(:FormalLanguage ObjectAllValuesFrom(DUL:hasPart :FormalExpression))
Declaration(Class(:Gesture))
AnnotationAssertion(rdfs:label :Gesture "Gesture"@en)
AnnotationAssertion(rdfs:label :Gesture "Gesto"@it)
SubClassOf(:Gesture :BodilyMotion)
Declaration(Class(:Grapheme))
AnnotationAssertion(rdfs:label :Grapheme "Grapheme"@en)
AnnotationAssertion(rdfs:comment :Grapheme "A part of a word as it can be realized by Writing
A spoken information realization can be 'about' a grapheme (as in reading), but it does not 'realize' it. Only Phoneme(s) are realized by spoken information (Voicing).
BTW, since spoken realizations are a 'primary' code of communication, the difference between direct and indirect spoken realizations (reading) should be considered relevant.
A grapheme is not necessarily able to express a meaning (a dul:SocialObject), although it can in principle (e.g. 'a' in English)."^^xsd:string)
AnnotationAssertion(rdfs:label :Grapheme "Grafema"@it)
SubClassOf(:Grapheme :LinguisticObject)
SubClassOf(:Grapheme ObjectAllValuesFrom(DUL:isRealizedBy :Writing))
Declaration(Class(:GraphicArt))
AnnotationAssertion(rdfs:comment :GraphicArt "wn noun: The arts of drawing or painting or printmaking"^^xsd:string)
AnnotationAssertion(rdfs:label :GraphicArt "Opera grafica"@it)
AnnotationAssertion(rdfs:label :GraphicArt "Graphic art"@en)
SubClassOf(:GraphicArt :Depiction)
Declaration(Class(:IconicLanguage))
AnnotationAssertion(rdfs:label :IconicLanguage "Linguaggio iconico"@it)
AnnotationAssertion(rdfs:label :IconicLanguage "Iconic language"@en)
AnnotationAssertion(rdfs:comment :IconicLanguage "A language made up of graphical elements. It can be natural, artificial, and even formal."^^xsd:string)
SubClassOf(:IconicLanguage :Language)
Declaration(Class(:IconicObject))
AnnotationAssertion(rdfs:label :IconicObject "Iconic object"@en)
AnnotationAssertion(rdfs:comment :IconicObject "An information object represented in an IconicLanguage"^^xsd:string)
AnnotationAssertion(rdfs:label :IconicObject "Oggetto iconico"@it)
SubClassOf(:IconicObject DUL:InformationObject)
SubClassOf(:IconicObject ObjectSomeValuesFrom(:hasRepresentationLanguage :IconicLanguage))
Declaration(Class(:KOS))
AnnotationAssertion(rdfs:label :KOS "Sistema di organizzazione della conoscenza"@it)
AnnotationAssertion(rdfs:label :KOS "Knowledge organization system"@en)
AnnotationAssertion(rdfs:comment :KOS "Knowledge Organization Systems: thesauri, terminologies, classification schemes, subject hierarchies, etc."^^xsd:string)
SubClassOf(:KOS :DataStructure)
DisjointClasses(:KOS :FormalExpression)
Declaration(Class(:Language))
AnnotationAssertion(rdfs:comment :Language "A natural or artificial language, provided with an alphabet (or vocabulary) and combinatorial rules. In the case of natural languages, their components are 'temporary' and 'reconstructed' out of actual usage. For example, a grammar for a natural language has the status of a theory for that language, and alternative ones can exist (e.g. generative vs. construction grammars).
Another distinction, between the general (systemic) rules for a language, and the local (contextual) rules for e.g. a certain context, speaker, place, etc., can be made separately.
The most comprehensive classification of languages ha probably been made by Umberto Eco, based on the production modes of the 'signs' that are represented in a certain language. It uses several semiotic dimensions, and will be modeled in a forthcoming ontology."^^xsd:string)
AnnotationAssertion(rdfs:label :Language "Language"@en)
AnnotationAssertion(rdfs:label :Language "Linguaggio"@it)
SubClassOf(:Language DUL:Description)
Declaration(Class(:Lexeme))
AnnotationAssertion(rdfs:label :Lexeme "Lessema"@it)
AnnotationAssertion(rdfs:comment :Lexeme "Lexical entries for dictionaries, lexica, etc. They are used to create reference forms of words."^^xsd:string)
AnnotationAssertion(rdfs:label :Lexeme "Lexeme"@en)
SubClassOf(:Lexeme :Term)
SubClassOf(:Lexeme ObjectUnionOf(:Word :Multiword))
SubClassOf(:Lexeme ObjectSomeValuesFrom(:hasSchema :Lexicon))
Declaration(Class(:Lexicon))
AnnotationAssertion(rdfs:label :Lexicon "Lexicon"@en)
AnnotationAssertion(rdfs:label :Lexicon "Lessico"@it)
AnnotationAssertion(rdfs:comment :Lexicon "A collection of lexical items (terms, entries, ...) that are witnessed to have a linguistic relevance."^^xsd:string)
SubClassOf(:Lexicon :KOS)
Declaration(Class(:LinguisticAct))
AnnotationAssertion(rdfs:comment :LinguisticAct "A communicative situation including linguistic objects, agents, and a set of contexts: physical (informational realizations), conceptual (social objects), and referential (entities).
A linguistic act has an associated CommunicativeFunction that it satisfies."^^xsd:string)
AnnotationAssertion(rdfs:label :LinguisticAct "Linguistic act"@en)
AnnotationAssertion(rdfs:label :LinguisticAct "Atto linguistico"@it)
SubClassOf(:LinguisticAct DUL:PlanExecution)
SubClassOf(:LinguisticAct ObjectSomeValuesFrom(DUL:includesObject DUL:Agent))
SubClassOf(:LinguisticAct ObjectSomeValuesFrom(DUL:includesObject DUL:SocialObject))
SubClassOf(:LinguisticAct ObjectSomeValuesFrom(DUL:includesObject :LinguisticObject))
SubClassOf(:LinguisticAct ObjectSomeValuesFrom(DUL:isSettingFor DUL:InformationRealization))
SubClassOf(:LinguisticAct ObjectSomeValuesFrom(DUL:satisfies :CommunicativeFunction))
SubClassOf(:LinguisticAct ObjectMinCardinality(5 DUL:isSettingFor DUL:Entity))
Declaration(Class(:LinguisticFunction))
AnnotationAssertion(rdfs:comment :LinguisticFunction "Any linguistic function that classifies words according to a LinguisticTheory. 
This class includes parts of speech, thematic roles, phrase structure components, verbal aspects, etc. e.g. Subject, Object, Instrument, Stative, etc.
Each linguistic function must be defined in a LinguisticTheory; e.g. a thematic role can be defined either in a generative grammar, or in construction-based theory."^^xsd:string)
AnnotationAssertion(rdfs:label :LinguisticFunction "Funzione linguistica"@it)
AnnotationAssertion(rdfs:label :LinguisticFunction "Linguistic function"@en)
SubClassOf(:LinguisticFunction DUL:Role)
SubClassOf(:LinguisticFunction ObjectSomeValuesFrom(DUL:isDefinedIn :LinguisticTheory))
Declaration(Class(:LinguisticObject))
AnnotationAssertion(rdfs:label :LinguisticObject "Oggetto linguistico"@it)
AnnotationAssertion(rdfs:comment :LinguisticObject "An information object represented in a NaturalLanguage"^^xsd:string)
AnnotationAssertion(rdfs:label :LinguisticObject "Linguistic object"@en)
SubClassOf(:LinguisticObject DUL:InformationObject)
SubClassOf(:LinguisticObject ObjectSomeValuesFrom(:hasRepresentationLanguage :NaturalLanguage))
Declaration(Class(:LinguisticTheory))
AnnotationAssertion(rdfs:label :LinguisticTheory "Linguistic theory"@en)
AnnotationAssertion(rdfs:label :LinguisticTheory "Teoria linguistica"@it)
AnnotationAssertion(rdfs:comment :LinguisticTheory "Any theory describing the structure and/or production and understanding of a natural language or a set of natural languages, or a component of one or more natural languages."^^xsd:string)
SubClassOf(:LinguisticTheory DUL:Theory)
SubClassOf(:LinguisticTheory ObjectSomeValuesFrom(DUL:describes ObjectSomeValuesFrom(DUL:isComponentOf :NaturalLanguage)))
Declaration(Class(:Morpheme))
AnnotationAssertion(rdfs:label :Morpheme "Morfema"@it)
AnnotationAssertion(rdfs:comment :Morpheme "A part of a word that can express a meaning, which is part of the meaning of the entire word."^^xsd:string)
AnnotationAssertion(rdfs:label :Morpheme "Morpheme"@en)
SubClassOf(:Morpheme :LinguisticObject)
SubClassOf(:Morpheme ObjectSomeValuesFrom(DUL:expresses ObjectExactCardinality(1 DUL:isComponentOf)))
SubClassOf(:Morpheme ObjectSomeValuesFrom(DUL:isComponentOf :Word))
Declaration(Class(:MultimediaObject))
AnnotationAssertion(rdfs:label :MultimediaObject "Oggetto multimediale"@it)
AnnotationAssertion(rdfs:label :MultimediaObject "Multimedia object"@en)
AnnotationAssertion(rdfs:comment :MultimediaObject "An information realization that realizes heterogeneous information objects. Examples include audiovisual performances, web pages, etc."^^xsd:string)
SubClassOf(:MultimediaObject DUL:InformationRealization)
SubClassOf(:MultimediaObject ObjectMinCardinality(2 DUL:realizes))
Declaration(Class(:Multiword))
AnnotationAssertion(rdfs:label :Multiword "Polyrhematic unit"@en)
AnnotationAssertion(rdfs:comment :Multiword "A LinguisticObject made up of more than one Word, but distinct from a Phrase, which is a higher syntactic unit."^^xsd:string)
AnnotationAssertion(rdfs:label :Multiword "Lemma polirematico"@it)
SubClassOf(:Multiword :LinguisticObject)
SubClassOf(:Multiword ObjectSomeValuesFrom(DUL:hasComponent :Word))
SubClassOf(:Multiword ObjectMinCardinality(2 DUL:hasComponent))
Declaration(Class(:NaturalLanguage))
AnnotationAssertion(rdfs:comment :NaturalLanguage "A natural language, evolved and used in a community across time.
Natural languages components are 'temporary' and 'reconstructed' out of actual usage. For example, a grammar for a (part of a) natural language has the status of a theory for that language, but alternative ones can exist (e.g. generative vs. construction grammars)."^^xsd:string)
AnnotationAssertion(rdfs:label :NaturalLanguage "Natural language"@en)
AnnotationAssertion(rdfs:label :NaturalLanguage "Linguaggio naturale"@it)
SubClassOf(:NaturalLanguage :Language)
SubClassOf(:NaturalLanguage ObjectSomeValuesFrom(DUL:isConceptualizedBy DUL:Community))
Declaration(Class(:Painting))
AnnotationAssertion(rdfs:label :Painting "Painting"@en)
AnnotationAssertion(rdfs:label :Painting "Dipinto"@it)
AnnotationAssertion(rdfs:comment :Painting "wn noun: Graphic art consisting of an artistic composition made by applying paints to a surface; \"a small painting by Picasso\"; \"he bought the painting as an investment\"; \"his pictures hang in the Louvre\""^^xsd:string)
SubClassOf(:Painting :GraphicArt)
Declaration(Class(:Phoneme))
AnnotationAssertion(rdfs:label :Phoneme "Fonema"@it)
AnnotationAssertion(rdfs:comment :Phoneme "A part of a word as it can be realized by Voicing
A written information realization can be 'about' a phoneme (as in the case of transcription systems), but it does not 'realize' it: only Grapheme(s) are realized by written information (Writing).
A phoneme is not necessarily able to express a meaning (any dul:SocialObject), although it can in principle (e.g. 'a' in English)."^^xsd:string)
AnnotationAssertion(rdfs:label :Phoneme "Phoneme"@en)
SubClassOf(:Phoneme :LinguisticObject)
SubClassOf(:Phoneme ObjectAllValuesFrom(DUL:isRealizedBy :Voicing))
Declaration(Class(:Phrase))
AnnotationAssertion(rdfs:comment :Phrase "A composition of Word(s) that can be considered a higher syntactic unit than a Word, and dul:isComponentOf a Sentence"^^xsd:string)
AnnotationAssertion(rdfs:label :Phrase "Phrase"@en)
AnnotationAssertion(rdfs:label :Phrase "Proposizione"@it)
SubClassOf(:Phrase :LinguisticObject)
SubClassOf(:Phrase ObjectSomeValuesFrom(DUL:hasComponent :Word))
SubClassOf(:Phrase ObjectSomeValuesFrom(DUL:isComponentOf :Sentence))
Declaration(Class(:PlasticArt))
AnnotationAssertion(rdfs:label :PlasticArt "Opera plastica"@it)
AnnotationAssertion(rdfs:label :PlasticArt "Plastic art"@en)
AnnotationAssertion(rdfs:comment :PlasticArt "wn noun: The arts of shaping or modeling; carving and sculpture"^^xsd:string)
SubClassOf(:PlasticArt :Depiction)
Declaration(Class(:Sculpture))
AnnotationAssertion(rdfs:label :Sculpture "Sculpture"@en)
AnnotationAssertion(rdfs:label :Sculpture "Scultura"@it)
AnnotationAssertion(rdfs:comment :Sculpture "wn noun: A three-dimensional work of plastic art"^^xsd:string)
SubClassOf(:Sculpture :PlasticArt)
Declaration(Class(:Sentence))
AnnotationAssertion(rdfs:label :Sentence "Sentence"@en)
AnnotationAssertion(rdfs:comment :Sentence "A composition of Phrase(s), assumed to express a state of affairs (here modelled as a dul:Situation). Graphically, a period is usually considered its boundary."^^xsd:string)
AnnotationAssertion(rdfs:label :Sentence "Frase"@it)
SubClassOf(:Sentence :LinguisticObject)
SubClassOf(:Sentence ObjectSomeValuesFrom(DUL:expresses DUL:Situation))
SubClassOf(:Sentence ObjectSomeValuesFrom(DUL:hasComponent :Phrase))
Declaration(Class(:Sound))
AnnotationAssertion(rdfs:comment :Sound "An information realization consisting of sound waves."^^xsd:string)
AnnotationAssertion(rdfs:label :Sound "Sound"@en)
SubClassOf(:Sound DUL:Process)
Declaration(Class(:Speech))
AnnotationAssertion(rdfs:label :Speech "Speech"@en)
AnnotationAssertion(rdfs:label :Speech "Discorso"@it)
AnnotationAssertion(rdfs:comment :Speech "Conventional sounds realizing explicit communication. Speech is a primary code of communication (primary means that is an original body expression, especially if first learnt)."^^xsd:string)
SubClassOf(:Speech DUL:InformationRealization)
SubClassOf(:Speech :Voicing)
SubClassOf(:Speech ObjectSomeValuesFrom(DUL:realizes :LinguisticObject))
Declaration(Class(:Statue))
AnnotationAssertion(rdfs:label :Statue "Statua"@it)
AnnotationAssertion(rdfs:label :Statue "Statue"@en)
AnnotationAssertion(rdfs:comment :Statue "wn noun: A sculpture representing a human or animal"^^xsd:string)
SubClassOf(:Statue :Sculpture)
Declaration(Class(:Term))
AnnotationAssertion(rdfs:label :Term "Termine"@it)
AnnotationAssertion(rdfs:label :Term "Term"@en)
AnnotationAssertion(rdfs:comment :Term "A word or multiword that is established in some terminology from a domain of discourse."^^xsd:string)
SubClassOf(:Term :LinguisticObject)
SubClassOf(:Term ObjectUnionOf(:Word :Multiword))
SubClassOf(:Term ObjectSomeValuesFrom(:hasSchema :KOS))
Declaration(Class(:Text))
AnnotationAssertion(rdfs:label :Text "Testo"@it)
AnnotationAssertion(rdfs:label :Text "Text"@en)
AnnotationAssertion(rdfs:comment :Text "A LinguisticObject composed of at least one Sentence, and assumed to be realized in written form."^^xsd:string)
SubClassOf(:Text :LinguisticObject)
SubClassOf(:Text ObjectSomeValuesFrom(DUL:hasComponent :Sentence))
SubClassOf(:Text ObjectSomeValuesFrom(DUL:isRealizedBy :Writing))
Declaration(Class(:Thesaurus))
AnnotationAssertion(rdfs:label :Thesaurus "Tesauro"@it)
AnnotationAssertion(rdfs:label :Thesaurus "Thesaurus"@en)
AnnotationAssertion(rdfs:comment :Thesaurus "A collection of categories organized according to a specified syntax, typically used to create a controlled terminology in a domain. A useful rdfs encoding of a typical thesaurus syntax is the SKOS schema."^^xsd:string)
SubClassOf(:Thesaurus :KOS)
Declaration(Class(:Voicing))
AnnotationAssertion(rdfs:comment :Voicing "An information realization consisting of uttered sounds. In natural agents, it always co-occurs with bodily movements."^^xsd:string)
AnnotationAssertion(rdfs:label :Voicing "Voicing"@en)
AnnotationAssertion(rdfs:label :Voicing "Vocalizzazione"@it)
SubClassOf(:Voicing :Sound)
SubClassOf(:Voicing ObjectSomeValuesFrom(DUL:hasParticipant DUL:PhysicalAgent))
Declaration(Class(:WebPage))
AnnotationAssertion(rdfs:label :WebPage "Web page"@en)
SubClassOf(:WebPage :DigitalResource)
SubClassOf(:WebPage :MultimediaObject)
Declaration(Class(:Word))
AnnotationAssertion(rdfs:comment :Word "A linguistic object consisting of a string (independently of its physical realization).
Its topological unity can change according to its physical realization: as a written realization, its boundaries are blank spaces, as a spoken realization, sometimes is silence, sometimes not, and higher order features intervene.
Grammatical notions, such as noun, verb, adjective, etc., are roles defined by a grammar, and words (or larger linguistic objects) can play those roles in a given language. E.g., the word 'share' can play both 'verb' and 'noun' roles in contemporary English, while the word 'come' can only play the 'verb' role in English, and the 'adverb' or 'conjunction' roles in Italian (but if we consider a word as only realized by phonemes, i.e. if we consider the oral realizations of 'come', there is no common word 'come' in the two languages)."^^xsd:string)
AnnotationAssertion(rdfs:label :Word "Parola"@it)
AnnotationAssertion(rdfs:label :Word "Word"@en)
SubClassOf(:Word :LinguisticObject)
SubClassOf(:Word ObjectAllValuesFrom(DUL:hasComponent ObjectComplementOf(:Word)))
Declaration(Class(:Writing))
AnnotationAssertion(rdfs:comment :Writing "An information realization based on conventional symbols.
It is a secondary code of communication (secondary means that it is about an original bodily expression, i.e. a primary code). Therefore, we are not considering here early forms of iconic expression, which could be considered primary."^^xsd:string)
AnnotationAssertion(rdfs:label :Writing "Realizzazione scritta"@it)
AnnotationAssertion(rdfs:label :Writing "Writing"@en)
SubClassOf(:Writing :Depiction)
SubClassOf(:Writing ObjectSomeValuesFrom(DUL:realizes :LinguisticObject))
Declaration(Class(owl:Thing))
Declaration(ObjectProperty(DUL:associatedWith))
Declaration(ObjectProperty(DUL:describes))
Declaration(ObjectProperty(DUL:expresses))
Declaration(ObjectProperty(DUL:hasComponent))
Declaration(ObjectProperty(DUL:hasPart))
Declaration(ObjectProperty(DUL:hasParticipant))
Declaration(ObjectProperty(DUL:includesObject))
Declaration(ObjectProperty(DUL:isAbout))
Declaration(ObjectProperty(DUL:isComponentOf))
Declaration(ObjectProperty(DUL:isConceptualizedBy))
Declaration(ObjectProperty(DUL:isDefinedIn))
Declaration(ObjectProperty(DUL:isExpressedBy))
Declaration(ObjectProperty(DUL:isRealizedBy))
SubObjectPropertyOf(DUL:isRealizedBy :isEncodedBy)
Declaration(ObjectProperty(DUL:isReferenceOf))
Declaration(ObjectProperty(DUL:isSettingFor))
Declaration(ObjectProperty(DUL:realizes))
SubObjectPropertyOf(DUL:realizes :encodes)
Declaration(ObjectProperty(DUL:satisfies))
Declaration(ObjectProperty(:combinatoriallyRelatedTo))
AnnotationAssertion(rdfs:comment :combinatoriallyRelatedTo "Any relation holding between two FormalExpression(s), e.g. a function over formal grammars, boolean operators, syntactic relations defined for the logical vocabulary of a formal language, etc.
Syntactic relations from logical languages have a correspondance to some formal relation."^^xsd:string)
SubObjectPropertyOf(:combinatoriallyRelatedTo DUL:associatedWith)
InverseObjectProperties(:combinatoriallyRelatedTo :combinatoriallyRelatedTo)
SymmetricObjectProperty(:combinatoriallyRelatedTo)
ObjectPropertyDomain(:combinatoriallyRelatedTo :FormalExpression)
ObjectPropertyRange(:combinatoriallyRelatedTo :FormalExpression)
Declaration(ObjectProperty(:digitallyReproduces))
AnnotationAssertion(rdfs:label :digitallyReproduces "riproduce digitalmente"@it)
AnnotationAssertion(rdfs:label :digitallyReproduces "digitally reproduces"@en)
SubObjectPropertyOf(:digitallyReproduces :reproduces)
InverseObjectProperties(:isDigitallyReproducedBy :digitallyReproduces)
ObjectPropertyDomain(:digitallyReproduces :DigitalResource)
ObjectPropertyRange(:digitallyReproduces DUL:InformationRealization)
Declaration(ObjectProperty(:encodes))
AnnotationAssertion(rdfs:comment :encodes "Any relation between two information entities, with the first used as an alternative encoding of the second. This encoding can preserve all or part of the informational structure. For example, an XML encoding of a plain text file, a digital scanning of a physical paper document, a reproduction of a painting, etc.
The encoding can be so precise and close to the medium of realization, that distinguishing the maximally encoded object from its realization is superfluous (as in many cases of computer science information entities). For this reason, the relation holds for either dul:InformationObject(s) or dul:InformationRealization(s).
Since the relation holds for either dul:InformationObject(s) or dul:InformationRealization(s), dul:realizes is a subproperty of it."^^xsd:string)
SubObjectPropertyOf(:encodes DUL:associatedWith)
InverseObjectProperties(:encodes :isEncodedBy)
ObjectPropertyDomain(:encodes DUL:InformationEntity)
ObjectPropertyRange(:encodes DUL:InformationEntity)
Declaration(ObjectProperty(:formallyRepresents))
AnnotationAssertion(rdfs:comment :formallyRepresents "The relation between formal expressions, and anything that they are supposed to represent.
E.g., 'the predicate 'MariachiInTijuana' formallyRepresents the dul:Collection of all mariachis in Tijuana'; 'the equivalence relation '<=>' formallyRepresents the Concept of two entities having the same properties', 'the constant 'John' formallyRepresents the dul:NaturalPerson 'John'.
Notice that a FormalExpression isAssignmentOf (is formally interpreted by) instances of dul:FormalEntity.

formallyRepresents is a particular case of 'dul:isAbout', holding only for formal expressions. 
Anyway, a formal expression that  dul:expresses a dul:SocialObject is also possible, but treats formal expressions as any other kind of dul:InformationObject that express a 'social' or 'cognitive' semantics, not a formal one."^^xsd:string)
AnnotationAssertion(rdfs:label :formallyRepresents "rappresenta formalmente"@it)
AnnotationAssertion(rdfs:label :formallyRepresents "formally represents"@en)
SubObjectPropertyOf(:formallyRepresents DUL:isAbout)
InverseObjectProperties(:isFormallyRepresentedIn :formallyRepresents)
ObjectPropertyDomain(:formallyRepresents :FormalExpression)
ObjectPropertyRange(:formallyRepresents DUL:Entity)
Declaration(ObjectProperty(:hasAuthor))
AnnotationAssertion(rdfs:label :hasAuthor "has author"@en)
AnnotationAssertion(rdfs:label :hasAuthor "ha come autore"@it)
SubObjectPropertyOf(:hasAuthor DUL:associatedWith)
InverseObjectProperties(:hasAuthor :isAuthorOf)
ObjectPropertyDomain(:hasAuthor DUL:InformationEntity)
ObjectPropertyRange(:hasAuthor DUL:Agent)
Declaration(ObjectProperty(:hasCulturalGrounding))
AnnotationAssertion(rdfs:label :hasCulturalGrounding "has cultural grounding"@en)
AnnotationAssertion(rdfs:label :hasCulturalGrounding "ha sorgente culturale"@it)
SubObjectPropertyOf(:hasCulturalGrounding DUL:associatedWith)
InverseObjectProperties(:hasCulturalGrounding :isCulturalGroundingFor)
ObjectPropertyDomain(:hasCulturalGrounding DUL:SocialObject)
ObjectPropertyRange(:hasCulturalGrounding DUL:SocialObject)
Declaration(ObjectProperty(:hasCulturalMixingWith))
AnnotationAssertion(rdfs:label :hasCulturalMixingWith "ha una fusione culturale con"@it)
AnnotationAssertion(rdfs:label :hasCulturalMixingWith "has cultural mixing with"@en)
SubObjectPropertyOf(:hasCulturalMixingWith DUL:associatedWith)
InverseObjectProperties(:hasCulturalMixingWith :hasCulturalMixingWith)
SymmetricObjectProperty(:hasCulturalMixingWith)
ObjectPropertyDomain(:hasCulturalMixingWith DUL:SocialObject)
ObjectPropertyRange(:hasCulturalMixingWith DUL:SocialObject)
Declaration(ObjectProperty(:hasFormalTerm))
AnnotationAssertion(rdfs:comment :hasFormalTerm "The relation between an InformationObject and a FormalExpression (constant, formula, term, sentence, proposition, axiom, etc.) that it is supposed to be given formal interpretation to formalize the InformationObject.
Notice that FormalExpression(s) only are formal terms for InformationObject(s), not for Concept(s) or other for SocialObject(s). On their turn, information object can 'express' (see) SocialObject(s).
E.g., the predicate (FormalExpression) 'TijuanaMariachi' isFormalTermFor the Term 'the mariachis in Tijuana' (that expresses the Collection of all mariachis in Tijuana); the Term 'equivalence relation' (that expresses the Concept of 'two entities having the same properties') hasFormalTerm the '<=>' symbol."^^xsd:string)
AnnotationAssertion(rdfs:label :hasFormalTerm "has formal term"@en)
AnnotationAssertion(rdfs:label :hasFormalTerm "ha termine formale"@it)
SubObjectPropertyOf(:hasFormalTerm DUL:isExpressedBy)
SubObjectPropertyOf(:hasFormalTerm :isEncodedBy)
InverseObjectProperties(:hasFormalTerm :isFormalTermFor)
ObjectPropertyDomain(:hasFormalTerm DUL:InformationObject)
ObjectPropertyRange(:hasFormalTerm :FormalExpression)
Declaration(ObjectProperty(:hasGrounding))
AnnotationAssertion(rdfs:label :hasGrounding "has grounding"@en)
AnnotationAssertion(rdfs:comment :hasGrounding "A formal entity is grounded in some other entity when it is assumed as the (formal, extensional) interpretation of it, for example, the set Dog can be grounded in the collection of all actual dogs (or in some of them that the modeller intends).")
SubObjectPropertyOf(:hasGrounding DUL:associatedWith)
InverseObjectProperties(:hasGrounding :isGroundingFor)
ObjectPropertyDomain(:hasGrounding DUL:FormalEntity)
ObjectPropertyRange(:hasGrounding DUL:Entity)
Declaration(ObjectProperty(:hasRepresentationLanguage))
AnnotationAssertion(rdfs:label :hasRepresentationLanguage "has representation language"@en)
AnnotationAssertion(rdfs:label :hasRepresentationLanguage "ha linguaggio di rappresentazione"@it)
SubObjectPropertyOf(:hasRepresentationLanguage DUL:associatedWith)
InverseObjectProperties(:isRepresentationLanguageOf :hasRepresentationLanguage)
ObjectPropertyDomain(:hasRepresentationLanguage DUL:InformationEntity)
ObjectPropertyRange(:hasRepresentationLanguage :Language)
Declaration(ObjectProperty(:hasSchema))
AnnotationAssertion(rdfs:label :hasSchema "has schema"@en)
AnnotationAssertion(rdfs:comment :hasSchema "A relation between social objects and schemata that organize them. For example, a Tag hasSchema a Folksonomy, a Lexeme hasSchema a Lexicon, etc."^^xsd:string)
AnnotationAssertion(rdfs:label :hasSchema "ha schema"@it)
SubObjectPropertyOf(:hasSchema DUL:associatedWith)
InverseObjectProperties(:hasSchema :isSchemaOf)
ObjectPropertyDomain(:hasSchema DUL:SocialObject)
ObjectPropertyRange(:hasSchema :DataStructure)
Declaration(ObjectProperty(:isAssignedTo))
AnnotationAssertion(rdfs:label :isAssignedTo "è assegnata a"@it)
AnnotationAssertion(rdfs:label :isAssignedTo "formally interprets {@en}"^^xsd:string)
AnnotationAssertion(rdfs:label :isAssignedTo "interpreta formalmente {@it}"^^xsd:string)
AnnotationAssertion(rdfs:comment :isAssignedTo "The relation between a FormalExpression, and an Entity (a FormalEntity in case of classes, relations, etc.) that it is supposed to be the reference of the symbol (FormalExpression) that the Entity is an intepretation of. 
In other words, this is the 'formal interpretation' function, by which a logician 'assigns' an Entity to a FormalExpression.
For each type of formal expressions defined in a logical language, an assignment assumption should be indicated, for example, owl:Class should be restricted to: isAssignmentOf allValuesFrom Class. In addition, differently from the general relation formallyRepresents, isAssignmentOf is functional (and its inverse is inverse functional), in order to encode the Tarskian correspondence assumption.
E.g., the Set of 'all mariachis in Tijuana' isAssignedTo the predicate (FormalExpression) 'TijuanaMariachi' (that isFormalTermFor a Term e.g. 'the mariachis in Tijuana')."^^xsd:string)
SubObjectPropertyOf(:isAssignedTo :isFormallyRepresentedIn)
InverseObjectProperties(:isAssignmentOf :isAssignedTo)
InverseFunctionalObjectProperty(:isAssignedTo)
ObjectPropertyDomain(:isAssignedTo DUL:Entity)
ObjectPropertyRange(:isAssignedTo :FormalExpression)
Declaration(ObjectProperty(:isAssignmentOf))
AnnotationAssertion(rdfs:label :isAssignmentOf "is formally interpreted as"@en)
AnnotationAssertion(rdfs:comment :isAssignmentOf "The relation between a FormalExpression, and an Entity (a FormalEntity in case of classes, relations, etc.) that it is supposed to be the reference of the symbol (FormalExpression) that the Entity is an intepretation of. 
In other words, this property expresses the 'formal interpretation' function, by which a logician 'assigns' an Entity to a FormalExpression. 
For each type of formal expressions defined in a logical language, an assignment assumption should be indicated, for example, owl:Class should be restricted to: isAssignmentOf allValuesFrom Class. In addition, differently from the general relation formallyRepresents, isAssignmentOf is functional (and its inverse is inverse functional), in order to encode the Tarskian correspondence assumption.
E.g., the Set of 'all mariachis in Tijuana' isAssignedTo the predicate (FormalExpression) 'TijuanaMariachi' (that isFormalTermFor a Term e.g. 'the mariachis in Tijuana')."^^xsd:string)
AnnotationAssertion(rdfs:label :isAssignmentOf "è interpretata formalmente come"@it)
AnnotationAssertion(rdfs:label :isAssignmentOf "è assegnazione di"@it)
SubObjectPropertyOf(:isAssignmentOf :formallyRepresents)
InverseObjectProperties(:isAssignmentOf :isAssignedTo)
FunctionalObjectProperty(:isAssignmentOf)
ObjectPropertyDomain(:isAssignmentOf :FormalExpression)
ObjectPropertyRange(:isAssignmentOf DUL:Entity)
Declaration(ObjectProperty(:isAuthorOf))
AnnotationAssertion(rdfs:label :isAuthorOf "è autore di"@it)
AnnotationAssertion(rdfs:label :isAuthorOf "is author of"@en)
SubObjectPropertyOf(:isAuthorOf DUL:associatedWith)
InverseObjectProperties(:hasAuthor :isAuthorOf)
ObjectPropertyDomain(:isAuthorOf DUL:Agent)
ObjectPropertyRange(:isAuthorOf DUL:InformationEntity)
Declaration(ObjectProperty(:isCopyOf))
AnnotationAssertion(rdfs:label :isCopyOf "è copia di"@it)
AnnotationAssertion(rdfs:label :isCopyOf "is copy of"@en)
AnnotationAssertion(rdfs:comment :isCopyOf "The original information realization of some copy. Differently from reproductions, copies are not planned to have notable differences from the original. Master copies, author-signed paintings, etc. are examples of originals."^^xsd:string)
SubObjectPropertyOf(:isCopyOf DUL:associatedWith)
InverseObjectProperties(:isOriginalOf :isCopyOf)
ObjectPropertyDomain(:isCopyOf DUL:InformationRealization)
ObjectPropertyRange(:isCopyOf DUL:InformationRealization)
Declaration(ObjectProperty(:isCulturalGroundingFor))
AnnotationAssertion(rdfs:label :isCulturalGroundingFor "is cultural grounding for"@en)
AnnotationAssertion(rdfs:label :isCulturalGroundingFor "è una sorgente culturale per"@it)
SubObjectPropertyOf(:isCulturalGroundingFor DUL:associatedWith)
InverseObjectProperties(:hasCulturalGrounding :isCulturalGroundingFor)
ObjectPropertyDomain(:isCulturalGroundingFor DUL:SocialObject)
ObjectPropertyRange(:isCulturalGroundingFor DUL:SocialObject)
Declaration(ObjectProperty(:isDigitallyReproducedBy))
AnnotationAssertion(rdfs:label :isDigitallyReproducedBy "is digitally reproduced by"@en)
AnnotationAssertion(rdfs:label :isDigitallyReproducedBy "è digitalmente riprodotto da"@it)
SubObjectPropertyOf(:isDigitallyReproducedBy :isReproducedBy)
InverseObjectProperties(:isDigitallyReproducedBy :digitallyReproduces)
ObjectPropertyDomain(:isDigitallyReproducedBy DUL:InformationRealization)
ObjectPropertyRange(:isDigitallyReproducedBy :DigitalResource)
Declaration(ObjectProperty(:isEncodedBy))
AnnotationAssertion(rdfs:comment :isEncodedBy "Any relation between two information entities, with the first used as an alternative encoding of the second. This encoding can preserve all or part of the informational structure. For example, an XML encoding of a plain text file, a digital scanning of a physical paper document, a reproduction of a painting, etc.
The encoding can be so precise and close to the medium of realization, that distinguishing the maximally encoded object from its realization is superfluous (as in many cases of computer science information entities). For this reason, the relation holds for either dul:InformationObject(s) or dul:InformationRealization(s).
Since the relation holds for either dul:InformationObject(s) or dul:InformationRealization(s), dul:realizes is a subproperty of it."^^xsd:string)
SubObjectPropertyOf(:isEncodedBy DUL:associatedWith)
InverseObjectProperties(:encodes :isEncodedBy)
Declaration(ObjectProperty(:isFormalTermFor))
AnnotationAssertion(rdfs:label :isFormalTermFor "è termine formale per"@it)
AnnotationAssertion(rdfs:comment :isFormalTermFor "The relation between an InformationObject and a FormalExpression (constant, formula, term, sentence, proposition, axiom, etc.) that it is supposed to be given formal interpretation to formalize the InformationObject.
Notice that FormalExpression(s) only are formal terms for InformationObject(s), not for Concept(s) or for other SocialObject(s). On their turn, information object can 'express' (see) SocialObject(s).
E.g., the predicate (FormalExpression) 'TijuanaMariachi' isFormalTermFor the Term 'the mariachis in Tijuana' (that expresses the Collection of all mariachis in Tijuana); the Term 'equivalence relation' (that expresses the Concept of 'two entities having the same properties') hasFormalTerm the '<=>' symbol."^^xsd:string)
AnnotationAssertion(rdfs:label :isFormalTermFor "is formal term for"@en)
SubObjectPropertyOf(:isFormalTermFor DUL:expresses)
SubObjectPropertyOf(:isFormalTermFor :encodes)
InverseObjectProperties(:hasFormalTerm :isFormalTermFor)
ObjectPropertyDomain(:isFormalTermFor :FormalExpression)
ObjectPropertyRange(:isFormalTermFor DUL:InformationObject)
Declaration(ObjectProperty(:isFormallyRepresentedIn))
AnnotationAssertion(rdfs:label :isFormallyRepresentedIn "è rappresentato formalmente in"@it)
AnnotationAssertion(rdfs:label :isFormallyRepresentedIn "is formally represented in"@en)
AnnotationAssertion(rdfs:comment :isFormallyRepresentedIn "The relation between formal expressions, and anything that they are supposed to represent.
E.g., 'the predicate 'MariachiInTijuana' formallyRepresents the dul:Collection of all mariachis in Tijuana'; 'the equivalence relation '<=>' formallyRepresents the concept of two entities having the same properties', 'the constant 'John' formallyRepresents the dul:NaturalPerson John.
Notice that formal expressions are formally interpreted by instances of dul:FormalEntity"^^xsd:string)
SubObjectPropertyOf(:isFormallyRepresentedIn DUL:isReferenceOf)
InverseObjectProperties(:isFormallyRepresentedIn :formallyRepresents)
ObjectPropertyDomain(:isFormallyRepresentedIn DUL:Entity)
ObjectPropertyRange(:isFormallyRepresentedIn :FormalExpression)
Declaration(ObjectProperty(:isGroundingFor))
AnnotationAssertion(rdfs:label :isGroundingFor "is grounding for"@en)
SubObjectPropertyOf(:isGroundingFor DUL:associatedWith)
InverseObjectProperties(:hasGrounding :isGroundingFor)
ObjectPropertyDomain(:isGroundingFor DUL:Entity)
ObjectPropertyRange(:isGroundingFor DUL:FormalEntity)
Declaration(ObjectProperty(:isLexicalizedBy))
AnnotationAssertion(rdfs:comment :isLexicalizedBy "A relation between linguistic objects and other information objects (including other linguistic objects).
For example, 'dog' can lexicalize a picture of a dog, a linguistic description of a dog, or the logical class: 'Dog'.
This relation is a subPropertyOf encodes .
In case of FormalExpression(s), it is not the inverse of isFormalTermFor: formal expressions can be said to 'be formal terms' for a LinguisticObject(s), while, independently, linguistic objects can be said to 'lexicalize' formal expressions. The difference is mainly pragmatic: one can take e.g. the word Dog, and decide to have a logical class 'Dog' for it. Someone else can see the logical class 'Dog', and decide to lexicalize it with the words dog, chien, cane, etc. While the relation seems similar, the pragmatic of using them is very different."^^xsd:string)
AnnotationAssertion(rdfs:label :isLexicalizedBy "è lessicalizzato da"@it)
AnnotationAssertion(rdfs:label :isLexicalizedBy "is lexicalized by"@en)
SubObjectPropertyOf(:isLexicalizedBy DUL:isExpressedBy)
SubObjectPropertyOf(:isLexicalizedBy :isEncodedBy)
InverseObjectProperties(:isLexicalizedBy :lexicalizes)
ObjectPropertyDomain(:isLexicalizedBy DUL:InformationObject)
ObjectPropertyRange(:isLexicalizedBy :LinguisticObject)
Declaration(ObjectProperty(:isOriginalOf))
AnnotationAssertion(rdfs:label :isOriginalOf "is original of"@en)
AnnotationAssertion(rdfs:label :isOriginalOf "è l'originale di"@it)
SubObjectPropertyOf(:isOriginalOf DUL:associatedWith)
InverseObjectProperties(:isOriginalOf :isCopyOf)
ObjectPropertyDomain(:isOriginalOf DUL:InformationRealization)
ObjectPropertyRange(:isOriginalOf DUL:InformationRealization)
Declaration(ObjectProperty(:isRepresentationLanguageOf))
AnnotationAssertion(rdfs:label :isRepresentationLanguageOf "is representation language of"@en)
AnnotationAssertion(rdfs:label :isRepresentationLanguageOf "è il linguaggio di rappresentazione di"@it)
SubObjectPropertyOf(:isRepresentationLanguageOf DUL:associatedWith)
InverseObjectProperties(:isRepresentationLanguageOf :hasRepresentationLanguage)
ObjectPropertyDomain(:isRepresentationLanguageOf :Language)
ObjectPropertyRange(:isRepresentationLanguageOf DUL:InformationEntity)
Declaration(ObjectProperty(:isReproducedBy))
AnnotationAssertion(rdfs:label :isReproducedBy "is reproduced by"@en)
AnnotationAssertion(rdfs:label :isReproducedBy "è riprodotto da"@it)
SubObjectPropertyOf(:isReproducedBy :isEncodedBy)
InverseObjectProperties(:isReproducedBy :reproduces)
ObjectPropertyDomain(:isReproducedBy DUL:InformationRealization)
ObjectPropertyRange(:isReproducedBy DUL:InformationRealization)
Declaration(ObjectProperty(:isReusedBy))
SubObjectPropertyOf(:isReusedBy DUL:associatedWith)
InverseObjectProperties(:reuses :isReusedBy)
ObjectPropertyDomain(:isReusedBy DUL:InformationEntity)
ObjectPropertyRange(:isReusedBy DUL:InformationEntity)
Declaration(ObjectProperty(:isSchemaOf))
AnnotationAssertion(rdfs:label :isSchemaOf "è schema di"@it)
AnnotationAssertion(rdfs:label :isSchemaOf "is schema of"@en)
AnnotationAssertion(rdfs:comment :isSchemaOf "A relation between social objects and schemata that organize them. For example, a Tag hasSchema a Folksonomy, a Lexeme hasSchema a Lexicon, etc."^^xsd:string)
SubObjectPropertyOf(:isSchemaOf DUL:associatedWith)
InverseObjectProperties(:hasSchema :isSchemaOf)
ObjectPropertyDomain(:isSchemaOf :DataStructure)
ObjectPropertyRange(:isSchemaOf DUL:SocialObject)
Declaration(ObjectProperty(:lexicalizes))
AnnotationAssertion(rdfs:comment :lexicalizes "A relation between linguistic objects and other information objects (including other linguistic objects).
For example, 'dog' can lexicalize a picture of a dog, a linguistic description of a dog, or the logical class: 'Dog'.
This relation is a subPropertyOf encodes .
In case of FormalExpression(s), it is not the inverse of isFormalTermFor: formal expressions can be said to 'be formal terms' for a LinguisticObject(s), while, independently, linguistic objects can be said to 'lexicalize' formal expressions. The difference is mainly pragmatic: one can take e.g. the word Dog, and decide to have a logical class 'Dog' for it. Someone else can see the logical class 'Dog', and decide to lexicalize it with the words dog, chien, cane, etc. While the relation seems similar, the pragmatic of using them is very different."^^xsd:string)
AnnotationAssertion(rdfs:label :lexicalizes "lessicalizza"@it)
AnnotationAssertion(rdfs:label :lexicalizes "lexicalizes"@en)
SubObjectPropertyOf(:lexicalizes DUL:expresses)
SubObjectPropertyOf(:lexicalizes :encodes)
InverseObjectProperties(:isLexicalizedBy :lexicalizes)
ObjectPropertyDomain(:lexicalizes :LinguisticObject)
ObjectPropertyRange(:lexicalizes DUL:InformationObject)
Declaration(ObjectProperty(:metaphoricallyBlendsWith))
AnnotationAssertion(rdfs:label :metaphoricallyBlendsWith "fusoMetaforicamenteCon"@it)
AnnotationAssertion(rdfs:label :metaphoricallyBlendsWith "metaphorically blends with"@en)
AnnotationAssertion(rdfs:comment :metaphoricallyBlendsWith "This property can be used to relate two social objects that are associated by means of a metaphorical blending, e.g. Greek and Aegyptian sphinges.")
SubObjectPropertyOf(:metaphoricallyBlendsWith DUL:associatedWith)
InverseObjectProperties(:metaphoricallyBlendsWith :metaphoricallyBlendsWith)
SymmetricObjectProperty(:metaphoricallyBlendsWith)
ObjectPropertyDomain(:metaphoricallyBlendsWith DUL:SocialObject)
ObjectPropertyRange(:metaphoricallyBlendsWith DUL:SocialObject)
Declaration(ObjectProperty(:reproduces))
AnnotationAssertion(rdfs:label :reproduces "reproduces"@en)
AnnotationAssertion(rdfs:label :reproduces "riproduce"@it)
SubObjectPropertyOf(:reproduces :encodes)
InverseObjectProperties(:isReproducedBy :reproduces)
ObjectPropertyDomain(:reproduces DUL:InformationRealization)
ObjectPropertyRange(:reproduces DUL:InformationRealization)
Declaration(ObjectProperty(:reuses))
AnnotationAssertion(rdfs:comment :reuses "Any relation between information entities, where the first one reuses (includes, transforms, reengineers, etc.) the second one."^^xsd:string)
SubObjectPropertyOf(:reuses DUL:associatedWith)
InverseObjectProperties(:reuses :isReusedBy)
ObjectPropertyDomain(:reuses DUL:InformationEntity)
ObjectPropertyRange(:reuses DUL:InformationEntity)
)
