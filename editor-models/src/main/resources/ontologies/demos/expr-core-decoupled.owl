Prefix(:=<http://asu.edu/sharpc2b/opsd#>)
Prefix(ops:=<http://asu.edu/sharpc2b/opsd#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://asu.edu/sharpc2b/opsd>
Import(<http://asu.edu/sharpc2b/skos-ext>)
Import(<http://www.w3.org/2004/02/skos/core>)

Declaration(Class(:Any))
EquivalentClasses(:Any ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :anyType))
SubClassOf(:Any :TypeConcept)
Declaration(Class(:Bag))
EquivalentClasses(:Bag ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :bagType))
SubClassOf(:Bag :CollectionType)
Declaration(Class(:Boolean))
EquivalentClasses(:Boolean ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :booleanType))
SubClassOf(:Boolean :Primitive)
Declaration(Class(:BooleanExpression))
EquivalentClasses(:BooleanExpression ObjectSomeValuesFrom(:returns :Boolean))
SubClassOf(:BooleanExpression :TypedExpression)
Declaration(Class(:BooleanLiteral))
SubClassOf(:BooleanLiteral :LiteralExpression)
SubClassOf(:BooleanLiteral ObjectSomeValuesFrom(:returns :Boolean))
Declaration(Class(:ClassExpression))
EquivalentClasses(:ClassExpression ObjectSomeValuesFrom(:returns :ClassType))
SubClassOf(:ClassExpression :TypedExpression)
Declaration(Class(:ClassType))
EquivalentClasses(:ClassType ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :classType))
SubClassOf(:ClassType :TypeConcept)
Declaration(Class(:CollectionExpression))
EquivalentClasses(:CollectionExpression ObjectSomeValuesFrom(:returns :CollectionType))
SubClassOf(:CollectionExpression :TypedExpression)
Declaration(Class(:CollectionType))
EquivalentClasses(:CollectionType ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :collectionType))
SubClassOf(:CollectionType :DataType)
Declaration(Class(:DataType))
EquivalentClasses(:DataType ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :dataType))
SubClassOf(:DataType :TypeConcept)
Declaration(Class(:Date))
EquivalentClasses(:Date ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :dateType))
SubClassOf(:Date :Primitive)
Declaration(Class(:DateExpression))
EquivalentClasses(:DateExpression ObjectSomeValuesFrom(:returns :Date))
SubClassOf(:DateExpression :TypedExpression)
Declaration(Class(:DateLiteral))
SubClassOf(:DateLiteral :LiteralExpression)
SubClassOf(:DateLiteral ObjectSomeValuesFrom(:returns :Date))
Declaration(Class(:DomainClass))
SubClassOf(:DomainClass :DomainConcept)
SubClassOf(:DomainClass :ObjectType)
SubClassOf(:DomainClass ObjectSomeValuesFrom(:evaluatesAs :ObjectType))
Declaration(Class(:DomainConcept))
SubClassOf(:DomainConcept <http://asu.edu/sharpc2b/skos-ext#CodedConcept>)
DisjointClasses(:DomainConcept :OperatorConcept)
Declaration(Class(:DomainProperty))
SubClassOf(:DomainProperty :DomainConcept)
Declaration(Class(:IntExpression))
EquivalentClasses(:IntExpression ObjectSomeValuesFrom(:returns :Integer))
SubClassOf(:IntExpression :RealExpression)
Declaration(Class(:IntLiteral))
SubClassOf(:IntLiteral :LiteralExpression)
SubClassOf(:IntLiteral ObjectSomeValuesFrom(:returns :Integer))
Declaration(Class(:IntSumExpression))
EquivalentClasses(:IntSumExpression ObjectIntersectionOf(:SumExpression ObjectSomeValuesFrom(:hasOperand :IntExpression) ObjectSomeValuesFrom(:hasOperator :SumOperator)))
SubClassOf(:IntSumExpression :SumExpression)
SubClassOf(:IntSumExpression ObjectSomeValuesFrom(:returns :Integer))
SubClassOf(:IntSumExpression ObjectAllValuesFrom(:hasOperand :IntExpression))
SubClassOf(:IntSumExpression ObjectAllValuesFrom(:hasOperator :SumOperator))
Declaration(Class(:Integer))
EquivalentClasses(:Integer ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :intType))
SubClassOf(:Integer :Real)
Declaration(Class(:List))
EquivalentClasses(:List ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :listType))
SubClassOf(:List :Sequence)
Declaration(Class(:LiteralExpression))
SubClassOf(:LiteralExpression :MockExpression)
DisjointClasses(:LiteralExpression :OperatorExpression)
Declaration(Class(:Map))
EquivalentClasses(:Map ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :mapType))
SubClassOf(:Map :CollectionType)
Declaration(Class(:MockExpression))
Declaration(Class(:MockHasNameRel))
EquivalentClasses(:MockHasNameRel ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "mock:hasName")))
EquivalentClasses(:MockHasNameRel DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "mock:hasName"))
SubClassOf(:MockHasNameRel :DomainProperty)
SubClassOf(:MockHasNameRel ObjectSomeValuesFrom(:evaluatesAs :String))
Declaration(Class(:MockHasProblemRel))
EquivalentClasses(:MockHasProblemRel ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "mock:hasProblem")))
EquivalentClasses(:MockHasProblemRel DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "mock:hasProblem"))
SubClassOf(:MockHasProblemRel :DomainProperty)
SubClassOf(:MockHasProblemRel ObjectSomeValuesFrom(:evaluatesAs :ObjectType))
Declaration(Class(:MockNewPatientExpression))
EquivalentClasses(:MockNewPatientExpression ObjectIntersectionOf(ObjectSomeValuesFrom(:typeCode ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotes> :MockPatientClass)) :NewExpression))
SubClassOf(:MockNewPatientExpression :NewExpression)
Declaration(Class(:MockPatientClass))
EquivalentClasses(:MockPatientClass ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "mock:patient")))
EquivalentClasses(:MockPatientClass DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "mock:patient"))
SubClassOf(:MockPatientClass :DomainClass)
Declaration(Class(:MockPersonClass))
EquivalentClasses(:MockPersonClass ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "mock:person")))
EquivalentClasses(:MockPersonClass DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "mock:person"))
SubClassOf(:MockPersonClass :DomainClass)
Declaration(Class(:MockProblemClass))
EquivalentClasses(:MockProblemClass ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "mock:problem")))
EquivalentClasses(:MockProblemClass DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "mock:problem"))
SubClassOf(:MockProblemClass :DomainClass)
Declaration(Class(:NewExpression))
EquivalentClasses(:NewExpression ObjectIntersectionOf(ObjectSomeValuesFrom(:hasOperator :NewOperator) :MockExpression))
SubClassOf(:NewExpression :MockExpression)
SubClassOf(:NewExpression ObjectExactCardinality(1 :typeCode))
Declaration(Class(:NewOperator))
EquivalentClasses(:NewOperator ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "new")))
EquivalentClasses(:NewOperator DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "new"))
SubClassOf(:NewOperator :OperatorConcept)
Declaration(Class(:Number))
EquivalentClasses(:Number ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :numberType))
SubClassOf(:Number :Primitive)
Declaration(Class(:NumericExpression))
EquivalentClasses(:NumericExpression ObjectSomeValuesFrom(:returns :Number))
SubClassOf(:NumericExpression :TypedExpression)
Declaration(Class(:ObjectExpression))
EquivalentClasses(:ObjectExpression ObjectSomeValuesFrom(:returns :ObjectType))
SubClassOf(:ObjectExpression :TypedExpression)
Declaration(Class(:ObjectType))
EquivalentClasses(:ObjectType ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :objectType))
SubClassOf(:ObjectType :TypeConcept)
Declaration(Class(:OperatorConcept))
SubClassOf(:OperatorConcept <http://asu.edu/sharpc2b/skos-ext#CodedConcept>)
DisjointClasses(:OperatorConcept :DomainConcept)
Declaration(Class(:OperatorConceptCode))
SubClassOf(:OperatorConceptCode <http://asu.edu/sharpc2b/skos-ext#ConceptCode>)
Declaration(Class(:OperatorExpression))
SubClassOf(:OperatorExpression :MockExpression)
DisjointClasses(:OperatorExpression :LiteralExpression)
Declaration(Class(:OrderedSet))
EquivalentClasses(:OrderedSet ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :orderedSetType))
SubClassOf(:OrderedSet :Set)
Declaration(Class(:Primitive))
EquivalentClasses(:Primitive ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :primitiveType))
SubClassOf(:Primitive :DataType)
Declaration(Class(:PropertyExpression))
SubClassOf(:PropertyExpression :MockExpression)
SubClassOf(:PropertyExpression ObjectExactCardinality(1 :propCode))
Declaration(Class(:Real))
EquivalentClasses(:Real ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :realType))
SubClassOf(:Real :Number)
Declaration(Class(:RealExpression))
EquivalentClasses(:RealExpression ObjectSomeValuesFrom(:returns :Real))
SubClassOf(:RealExpression :NumericExpression)
Declaration(Class(:RealLiteral))
SubClassOf(:RealLiteral :LiteralExpression)
SubClassOf(:RealLiteral ObjectSomeValuesFrom(:returns :Real))
Declaration(Class(:Sequence))
EquivalentClasses(:Sequence ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :sequenceType))
SubClassOf(:Sequence :CollectionType)
Declaration(Class(:Set))
EquivalentClasses(:Set ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :setType))
SubClassOf(:Set :CollectionType)
Declaration(Class(:String))
EquivalentClasses(:String ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :stringType))
SubClassOf(:String :Primitive)
Declaration(Class(:StringExpression))
EquivalentClasses(:StringExpression ObjectSomeValuesFrom(:returns :String))
SubClassOf(:StringExpression :TypedExpression)
Declaration(Class(:StringLiteral))
SubClassOf(:StringLiteral :LiteralExpression)
SubClassOf(:StringLiteral ObjectSomeValuesFrom(:returns :String))
Declaration(Class(:SumExpression))
EquivalentClasses(:SumExpression ObjectIntersectionOf(ObjectSomeValuesFrom(:hasOperator :SumOperator) :MockExpression))
SubClassOf(:SumExpression :OperatorExpression)
Declaration(Class(:SumOperator))
EquivalentClasses(:SumOperator ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotedBy> DataHasValue(<http://asu.edu/sharpc2b/skos-ext#code> "+")))
EquivalentClasses(:SumOperator DataHasValue(<http://www.w3.org/2004/02/skos/core#notation> "+"))
SubClassOf(:SumOperator :OperatorConcept)
Declaration(Class(:TypeConcept))
SubClassOf(:TypeConcept <http://www.w3.org/2004/02/skos/core#Concept>)
Declaration(Class(:TypedExpression))
SubClassOf(:TypedExpression :MockExpression)
Declaration(Class(:Void))
EquivalentClasses(:Void ObjectHasValue(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :voidType))
SubClassOf(:Void :TypeConcept)
Declaration(Class(<http://asu.edu/sharpc2b/skos-ext#CodedConcept>))
SubClassOf(<http://asu.edu/sharpc2b/skos-ext#CodedConcept> <http://www.w3.org/2004/02/skos/core#Concept>)
SubClassOf(<http://asu.edu/sharpc2b/skos-ext#CodedConcept> DataSomeValuesFrom(<http://www.w3.org/2004/02/skos/core#notation> xsd:string))
Declaration(Class(<http://asu.edu/sharpc2b/skos-ext#ConceptCode>))
SubClassOf(<http://asu.edu/sharpc2b/skos-ext#ConceptCode> :LiteralExpression)
SubClassOf(<http://asu.edu/sharpc2b/skos-ext#ConceptCode> ObjectIntersectionOf(ObjectAllValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotes> <http://asu.edu/sharpc2b/skos-ext#CodedConcept>) ObjectSomeValuesFrom(<http://asu.edu/sharpc2b/skos-ext#denotes> <http://asu.edu/sharpc2b/skos-ext#CodedConcept>)))
Declaration(ObjectProperty(:evaluatesAs))
ObjectPropertyDomain(:evaluatesAs <http://www.w3.org/2004/02/skos/core#Concept>)
ObjectPropertyRange(:evaluatesAs :TypeConcept)
Declaration(ObjectProperty(:hasCode))
ObjectPropertyDomain(:hasCode :MockExpression)
ObjectPropertyRange(:hasCode <http://asu.edu/sharpc2b/skos-ext#ConceptCode>)
Declaration(ObjectProperty(:hasOperand))
AsymmetricObjectProperty(:hasOperand)
IrreflexiveObjectProperty(:hasOperand)
ObjectPropertyDomain(:hasOperand :OperatorExpression)
ObjectPropertyRange(:hasOperand :MockExpression)
Declaration(ObjectProperty(:hasOperator))
ObjectPropertyDomain(:hasOperator :OperatorExpression)
ObjectPropertyRange(:hasOperator :OperatorConcept)
Declaration(ObjectProperty(:opCode))
SubObjectPropertyOf(:opCode :hasCode)
ObjectPropertyDomain(:opCode :OperatorExpression)
ObjectPropertyRange(:opCode <http://asu.edu/sharpc2b/skos-ext#ConceptCode>)
Declaration(ObjectProperty(:propCode))
SubObjectPropertyOf(:propCode :hasCode)
ObjectPropertyDomain(:propCode :PropertyExpression)
ObjectPropertyRange(:propCode <http://asu.edu/sharpc2b/skos-ext#ConceptCode>)
Declaration(ObjectProperty(:returns))
ObjectPropertyDomain(:returns :MockExpression)
ObjectPropertyRange(:returns :TypeConcept)
Declaration(ObjectProperty(:typeCode))
SubObjectPropertyOf(:typeCode :hasCode)
ObjectPropertyDomain(:typeCode :NewExpression)
ObjectPropertyRange(:typeCode <http://asu.edu/sharpc2b/skos-ext#ConceptCode>)
Declaration(DataProperty(:representation))
DataPropertyDomain(:representation :MockExpression)
DataPropertyRange(:representation xsd:string)
Declaration(NamedIndividual(:anyType))
ClassAssertion(:Any :anyType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :anyType "ANY")
Declaration(NamedIndividual(:bagType))
ClassAssertion(:Bag :bagType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :bagType :collectionType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :bagType "BAG")
Declaration(NamedIndividual(:booleanType))
ClassAssertion(:Boolean :booleanType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :booleanType :primitiveType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :booleanType "BOOL")
Declaration(NamedIndividual(:classType))
ClassAssertion(:ClassType :classType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :classType "CLASS")
Declaration(NamedIndividual(:collectionType))
ClassAssertion(:CollectionType :collectionType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :collectionType :dataType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :collectionType "COLLECTION")
Declaration(NamedIndividual(:dataType))
ClassAssertion(:DataType :dataType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :dataType "DATATYPE")
Declaration(NamedIndividual(:dateType))
ClassAssertion(:Date :dateType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :dateType :primitiveType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :dateType "DATETIME")
Declaration(NamedIndividual(:intType))
ClassAssertion(:Integer :intType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :intType :realType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :intType "INT")
Declaration(NamedIndividual(:listType))
ClassAssertion(:List :listType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :listType :sequenceType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :listType "LIST")
Declaration(NamedIndividual(:mapType))
ClassAssertion(:Map :mapType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :mapType :collectionType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :mapType "MAP")
Declaration(NamedIndividual(:mock3))
ClassAssertion(:IntLiteral :mock3)
DataPropertyAssertion(:representation :mock3 "3")
Declaration(NamedIndividual(:mock5))
ClassAssertion(:IntLiteral :mock5)
DataPropertyAssertion(:representation :mock5 "5")
Declaration(NamedIndividual(:mockExp1))
ObjectPropertyAssertion(:hasOperand :mockExp1 :mock5)
ObjectPropertyAssertion(:hasOperand :mockExp1 :mock3)
ObjectPropertyAssertion(:opCode :mockExp1 :op_plusCode)
Declaration(NamedIndividual(:mockExp2))
ObjectPropertyAssertion(:opCode :mockExp2 :op_newCode)
ObjectPropertyAssertion(:typeCode :mockExp2 :mp_mockPatientCode)
Declaration(NamedIndividual(:mockExp3))
ClassAssertion(:PropertyExpression :mockExp3)
ObjectPropertyAssertion(:propCode :mockExp3 :mp_mockHasNameCode)
Declaration(NamedIndividual(:mockExp4))
ObjectPropertyAssertion(:propCode :mockExp4 :mp_mockPatientCode)
Declaration(NamedIndividual(:mockHello))
ClassAssertion(:StringLiteral :mockHello)
DataPropertyAssertion(:representation :mockHello "hello")
Declaration(NamedIndividual(:mp_mockHasNameCode))
DataPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#code> :mp_mockHasNameCode "mock:hasName")
Declaration(NamedIndividual(:mp_mockPatientCode))
DataPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#code> :mp_mockPatientCode "mock:patient")
Declaration(NamedIndividual(:numberType))
ClassAssertion(:Number :numberType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :numberType :primitiveType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :numberType "NUMBER")
Declaration(NamedIndividual(:objectType))
ClassAssertion(:TypeConcept :objectType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :objectType "OBJECT")
Declaration(NamedIndividual(:op_newCode))
ClassAssertion(:OperatorConceptCode :op_newCode)
DataPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#code> :op_newCode "new")
Declaration(NamedIndividual(:op_plusCode))
ClassAssertion(:OperatorConceptCode :op_plusCode)
DataPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#code> :op_plusCode "+")
Declaration(NamedIndividual(:orderedSetType))
ClassAssertion(:OrderedSet :orderedSetType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :orderedSetType :setType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :orderedSetType "ORDSET")
Declaration(NamedIndividual(:primitiveType))
ClassAssertion(:Primitive :primitiveType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :primitiveType :dataType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :primitiveType "PRIM")
Declaration(NamedIndividual(:realType))
ClassAssertion(:Real :realType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :realType :numberType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :realType "REAL")
Declaration(NamedIndividual(:sequenceType))
ClassAssertion(:Sequence :sequenceType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :sequenceType :collectionType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :sequenceType "SEQ")
Declaration(NamedIndividual(:setType))
ClassAssertion(:Set :setType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :setType :collectionType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :setType "SET")
Declaration(NamedIndividual(:stringType))
ClassAssertion(:String :stringType)
ObjectPropertyAssertion(<http://asu.edu/sharpc2b/skos-ext#subConceptOf> :stringType :primitiveType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :stringType "STRING")
Declaration(NamedIndividual(:voidType))
ClassAssertion(:Void :voidType)
DataPropertyAssertion(<http://www.w3.org/2004/02/skos/core#notation> :voidType "VOID")
SubObjectPropertyOf(ObjectPropertyChain(:typeCode <http://asu.edu/sharpc2b/skos-ext#denotes> :evaluatesAs) :returns)
DisjointClasses(:ClassExpression :CollectionExpression :DateExpression :NumericExpression :ObjectExpression :StringExpression)
SubObjectPropertyOf(ObjectPropertyChain(:opCode <http://asu.edu/sharpc2b/skos-ext#denotes>) :hasOperator)
SubObjectPropertyOf(ObjectPropertyChain(:propCode <http://asu.edu/sharpc2b/skos-ext#denotes> :evaluatesAs) :returns)
DisjointClasses(:BooleanLiteral :DateLiteral :IntLiteral :RealLiteral :StringLiteral <http://asu.edu/sharpc2b/skos-ext#ConceptCode>)
)
