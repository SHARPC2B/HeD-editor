Prefix(dc2:=<http://purl.org/NET/dc_owl2dl#>)
Prefix(dul:=<http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#>)
Prefix(lmm:=<http://www.ontologydesignpatterns.org/ont/lmm/LMM_L1.owl#>)
Prefix(ops:=<http://asu.edu/sharpc2b/ops#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(prr:=<http://asu.edu/sharpc2b/prr#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(opsb:=<http://asu.edu/sharpc2b/opsb#>)
Prefix(opsc:=<http://asu.edu/sharpc2b/opsc#>)
Prefix(opsd:=<http://asu.edu/sharpc2b/opsd#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(shops:=<http://asu.edu/sharpc2b/shops#>)
Prefix(IOLite:=<http://www.ontologydesignpatterns.org/ont/dul/IOLite.owl#>)
Prefix(dc2dul:=<http://asu.edu/sharpc2b/dc2dul#>)
Prefix(actions:=<http://asu.edu/sharpc2b/actions#>)
Prefix(skoslmm:=<http://asu.edu/sharpc2b/skoslmm#>)
Prefix(metadata:=<http://asu.edu/sharpc2b/metadata#>)
Prefix(skos-ext:=<http://asu.edu/sharpc2b/skos-ext#>)
Prefix(prr-sharp:=<http://asu.edu/sharpc2b/prr-sharp#>)
Prefix(sharp-master:=<http://asu.edu/sharpc2b/sharp-master#>)


Ontology(<http://asu.edu/sharpc2b/test/SharpOperators>
Import(<http://asu.edu/sharpc2b/ops>)

SubClassOf(ops:AggregateOperator ops:Operator)
SubClassOf(ops:BinaryOperator ops:Operator)
SubClassOf(ops:NAryOperator ops:Operator)
SubClassOf(ops:TernaryOperator ops:Operator)
SubClassOf(ops:UnaryOperator ops:Operator)
EquivalentClasses(shops:AbsIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Abs"^^xsd:string))))
SubClassOf(shops:AbsIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:AbsRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Abs"^^xsd:string))))
SubClassOf(shops:AbsRealExpression ops:RealExpression)
EquivalentClasses(shops:AcosIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Acos"^^xsd:string))))
SubClassOf(shops:AcosIntegerExpression ops:RealExpression)
EquivalentClasses(shops:AcosRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Acos"^^xsd:string))))
SubClassOf(shops:AcosRealExpression ops:RealExpression)
EquivalentClasses(shops:AddIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Add"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:AddIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:AddRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Add"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:AddRealExpression ops:RealExpression)
EquivalentClasses(shops:AfterExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "After"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:AfterExpression ops:BooleanExpression)
EquivalentClasses(shops:AllFalseExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "AllFalse"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:AllFalseExpression ops:BooleanExpression)
EquivalentClasses(shops:AllTrueExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "AllTrue"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:AllTrueExpression ops:BooleanExpression)
EquivalentClasses(shops:AndExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "And"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:BooleanExpression)))
SubClassOf(shops:AndExpression ops:BooleanExpression)
EquivalentClasses(shops:AnyTrueExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "AnyTrue"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:AnyTrueExpression ops:BooleanExpression)
EquivalentClasses(shops:AsinIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Asin"^^xsd:string))))
SubClassOf(shops:AsinIntegerExpression ops:RealExpression)
EquivalentClasses(shops:AsinRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Asin"^^xsd:string))))
SubClassOf(shops:AsinRealExpression ops:RealExpression)
EquivalentClasses(shops:AtanIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Atan"^^xsd:string))))
SubClassOf(shops:AtanIntegerExpression ops:RealExpression)
EquivalentClasses(shops:AtanRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Atan"^^xsd:string))))
SubClassOf(shops:AtanRealExpression ops:RealExpression)
EquivalentClasses(shops:AvgIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Avg"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:AvgIntegerExpression ops:RealExpression)
EquivalentClasses(shops:AvgRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Avg"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:AvgRealExpression ops:RealExpression)
EquivalentClasses(shops:AvgTimeDurationExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Avg"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:AvgTimeDurationExpression ops:TimeDurationExpression)
EquivalentClasses(shops:BeforeExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Before"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:BeforeExpression ops:BooleanExpression)
EquivalentClasses(shops:BeginExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Begin"^^xsd:string))))
SubClassOf(shops:BeginExpression ops:Expression)
EquivalentClasses(shops:CeilingExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Ceiling"^^xsd:string))))
SubClassOf(shops:CeilingExpression ops:IntegerExpression)
EquivalentClasses(shops:CoalesceExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Coalesce"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:Expression)))
SubClassOf(shops:CoalesceExpression ops:Expression)
EquivalentClasses(shops:CombineExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Combine"^^xsd:string))))
EquivalentClasses(shops:CombineExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Combine"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(shops:CombineExpression ops:StringExpression)
EquivalentClasses(shops:ConcatExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Concat"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:StringExpression)))
SubClassOf(shops:ConcatExpression ops:StringExpression)
EquivalentClasses(shops:ConditionalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Conditional"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression) ObjectSomeValuesFrom(ops:thirdOperand ops:Expression)))
SubClassOf(shops:ConditionalExpression ops:Expression)
EquivalentClasses(shops:ContainsIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Contains"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression)))
EquivalentClasses(shops:ContainsIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Contains"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:ContainsIntervalExpression ops:BooleanExpression)
EquivalentClasses(shops:ContainsListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Contains"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression)))
EquivalentClasses(shops:ContainsListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Contains"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:ContainsListExpression ops:BooleanExpression)
SubClassOf(shops:ContainsListExpression ops:ListExpression)
EquivalentClasses(shops:ConvertExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Convert"^^xsd:string))))
SubClassOf(shops:ConvertExpression ops:Expression)
EquivalentClasses(shops:CosIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Cos"^^xsd:string))))
SubClassOf(shops:CosIntegerExpression ops:RealExpression)
EquivalentClasses(shops:CosRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Cos"^^xsd:string))))
SubClassOf(shops:CosRealExpression ops:RealExpression)
EquivalentClasses(shops:CountExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Count"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:CountExpression ops:IntegerExpression)
EquivalentClasses(shops:DateAddExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "DateAdd"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:DateGranularityExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:RealExpression)))
SubClassOf(shops:DateAddExpression ops:TimestampExpression)
EquivalentClasses(shops:DateDiffExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "DateDiff"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:DateGranularityExpression)))
SubClassOf(shops:DateDiffExpression ops:RealExpression)
EquivalentClasses(shops:DatePartExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:TimestampExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "DatePart"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:DateGranularityExpression)))
SubClassOf(shops:DatePartExpression ops:RealExpression)
EquivalentClasses(shops:DifferenceIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Difference"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:DifferenceIntervalExpression ops:IntervalExpression)
EquivalentClasses(shops:DifferenceListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Difference"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:DifferenceListExpression ops:ListExpression)
EquivalentClasses(shops:DivideIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Divide"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:DivideIntegerExpression ops:RealExpression)
EquivalentClasses(shops:DivideRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Divide"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:DivideRealExpression ops:RealExpression)
EquivalentClasses(shops:EarliestExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Earliest"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:EarliestExpression ops:Expression)
EquivalentClasses(shops:EndExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "End"^^xsd:string))))
SubClassOf(shops:EndExpression ops:Expression)
EquivalentClasses(shops:EqualBooleanExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Equal"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:BooleanExpression)))
SubClassOf(shops:EqualBooleanExpression ops:BooleanExpression)
EquivalentClasses(shops:EqualIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Equal"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:EqualIntervalExpression ops:BooleanExpression)
EquivalentClasses(shops:EqualListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Equal"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:EqualListExpression ops:BooleanExpression)
SubClassOf(shops:EqualListExpression ops:ListExpression)
EquivalentClasses(shops:EqualObjectExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ObjectExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Equal"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ObjectExpression)))
SubClassOf(shops:EqualObjectExpression ops:BooleanExpression)
EquivalentClasses(shops:EqualScalarExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Equal"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(shops:EqualScalarExpression ops:BooleanExpression)
EquivalentClasses(shops:EqualStringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Equal"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(shops:EqualStringExpression ops:BooleanExpression)
EquivalentClasses(shops:ExistExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Exist"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:ExistExpression ops:BooleanExpression)
EquivalentClasses(shops:ExpIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Exp"^^xsd:string))))
SubClassOf(shops:ExpIntegerExpression ops:RealExpression)
EquivalentClasses(shops:ExpRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Exp"^^xsd:string))))
SubClassOf(shops:ExpRealExpression ops:RealExpression)
EquivalentClasses(shops:ExtractCharactersExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ExtractCharacters"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:ExtractCharactersExpression ops:ListExpression)
EquivalentClasses(shops:FilterExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Filter"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:BooleanExpression)))
SubClassOf(shops:FilterExpression ops:ListExpression)
EquivalentClasses(shops:FirstExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "First"^^xsd:string))))
SubClassOf(shops:FirstExpression ops:Expression)
EquivalentClasses(shops:FlattenExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Flatten"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:FlattenExpression ops:ListExpression)
EquivalentClasses(shops:FloorExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Floor"^^xsd:string))))
SubClassOf(shops:FloorExpression ops:IntegerExpression)
EquivalentClasses(shops:ForEachExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ForEach"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ExpressionExpression)))
SubClassOf(shops:ForEachExpression ops:ListExpression)
EquivalentClasses(shops:GreaterExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Greater"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(shops:GreaterExpression ops:BooleanExpression)
EquivalentClasses(shops:GreaterOrEqualExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "GreaterOrEqual"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(shops:GreaterOrEqualExpression ops:BooleanExpression)
EquivalentClasses(shops:IfNullExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IfNull"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression)))
SubClassOf(shops:IfNullExpression ops:Expression)
EquivalentClasses(shops:InAnyExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "In"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:InAnyExpression ops:BooleanExpression)
EquivalentClasses(shops:InListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "In"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:InListExpression ops:BooleanExpression)
EquivalentClasses(shops:IndexEarliestExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IndexEarliest"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:IndexEarliestExpression ops:RealExpression)
EquivalentClasses(shops:IndexLatestExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IndexLatest"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:IndexLatestExpression ops:RealExpression)
EquivalentClasses(shops:IndexMaxExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IndexMax"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:IndexMaxExpression ops:RealExpression)
EquivalentClasses(shops:IndexMinExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IndexMin"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:IndexMinExpression ops:RealExpression)
EquivalentClasses(shops:IndexOfExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IndexOf"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression)))
SubClassOf(shops:IndexOfExpression ops:IntegerExpression)
EquivalentClasses(shops:IndexerListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Indexer"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:IndexerListExpression ops:Expression)
EquivalentClasses(shops:IndexerStringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Indexer"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:IndexerStringExpression ops:StringExpression)
EquivalentClasses(shops:IntersectIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Intersect"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:IntersectIntervalExpression ops:IntervalExpression)
EquivalentClasses(shops:IntersectListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Intersect"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:IntersectListExpression ops:ListExpression)
EquivalentClasses(shops:IntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Interval"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression)))
SubClassOf(shops:IntervalExpression ops:IntervalExpression)
EquivalentClasses(shops:IsEmptyCollectionExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:CollectionExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IsEmpty"^^xsd:string))))
SubClassOf(shops:IsEmptyCollectionExpression ops:BooleanExpression)
EquivalentClasses(shops:IsEmptyListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IsEmpty"^^xsd:string))))
SubClassOf(shops:IsEmptyListExpression ops:BooleanExpression)
EquivalentClasses(shops:IsNotEmptyExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IsNotEmpty"^^xsd:string))))
SubClassOf(shops:IsNotEmptyExpression ops:BooleanExpression)
EquivalentClasses(shops:IsNullExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "IsNull"^^xsd:string))))
SubClassOf(shops:IsNullExpression ops:BooleanExpression)
EquivalentClasses(shops:LastExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Last"^^xsd:string))))
SubClassOf(shops:LastExpression ops:Expression)
EquivalentClasses(shops:LatestExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Latest"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:LatestExpression ops:Expression)
EquivalentClasses(shops:LengthIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Length"^^xsd:string))))
SubClassOf(shops:LengthIntervalExpression ops:IntegerExpression)
EquivalentClasses(shops:LengthStringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Length"^^xsd:string))))
SubClassOf(shops:LengthStringExpression ops:IntegerExpression)
SubClassOf(shops:LengthStringExpression ops:RealExpression)
EquivalentClasses(shops:LessExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Less"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(shops:LessExpression ops:BooleanExpression)
EquivalentClasses(shops:LessOrEqualExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ScalarExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "LessOrEqual"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ScalarExpression)))
SubClassOf(shops:LessOrEqualExpression ops:BooleanExpression)
EquivalentClasses(shops:ListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "List"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:Expression)))
SubClassOf(shops:ListExpression ops:ListExpression)
EquivalentClasses(shops:LnExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Ln"^^xsd:string))))
SubClassOf(shops:LnExpression ops:RealExpression)
EquivalentClasses(shops:Log10Expression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Log10"^^xsd:string))))
EquivalentClasses(shops:Log10Expression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Log10"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:Log10Expression ops:RealExpression)
EquivalentClasses(shops:LogExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Log"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:LogExpression ops:RealExpression)
EquivalentClasses(shops:LowerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Lower"^^xsd:string))))
SubClassOf(shops:LowerExpression ops:StringExpression)
EquivalentClasses(shops:MaxExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Max"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:MaxExpression ops:Expression)
EquivalentClasses(shops:MaxIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Max"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:MaxIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:MaxRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Max"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:MaxRealExpression ops:RealExpression)
EquivalentClasses(shops:MedianExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Median"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:MedianExpression ops:RealExpression)
EquivalentClasses(shops:MeetsExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Meets"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:MeetsExpression ops:BooleanExpression)
EquivalentClasses(shops:MinExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Min"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:MinExpression ops:Expression)
EquivalentClasses(shops:MinIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Min"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:MinIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:MinRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Min"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:MinRealExpression ops:RealExpression)
EquivalentClasses(shops:ModuloIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Modulo"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:ModuloIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:ModuloRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Modulo"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:ModuloRealExpression ops:RealExpression)
EquivalentClasses(shops:MultiplyIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Multiply"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:MultiplyIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:MultiplyRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Multiply"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:MultiplyRealExpression ops:RealExpression)
EquivalentClasses(shops:NegateIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Negate"^^xsd:string))))
SubClassOf(shops:NegateIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:NegateRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Negate"^^xsd:string))))
SubClassOf(shops:NegateRealExpression ops:RealExpression)
EquivalentClasses(shops:NotEqualExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "NotEqual"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:Expression)))
SubClassOf(shops:NotEqualExpression ops:BooleanExpression)
EquivalentClasses(shops:NotExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Not"^^xsd:string))))
SubClassOf(shops:NotExpression ops:BooleanExpression)
EquivalentClasses(shops:ObjectRedefineExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ObjectExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ObjectRedefine"^^xsd:string))))
SubClassOf(shops:ObjectRedefineExpression ops:ObjectExpression)
EquivalentClasses(shops:OrExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Or"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:BooleanExpression)))
SubClassOf(shops:OrExpression ops:BooleanExpression)
EquivalentClasses(shops:OverlapsExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Overlaps"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:OverlapsExpression ops:BooleanExpression)
EquivalentClasses(shops:PosExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Pos"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(shops:PosExpression ops:IntegerExpression)
EquivalentClasses(shops:PowerIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Power"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:PowerIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:PowerRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Power"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:PowerRealExpression ops:RealExpression)
EquivalentClasses(shops:PredExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Pred"^^xsd:string))))
SubClassOf(shops:PredExpression ops:IntegerExpression)
EquivalentClasses(shops:ProperContainsIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ProperContains"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:ProperContainsIntervalExpression ops:BooleanExpression)
EquivalentClasses(shops:ProperContainsListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ProperContains"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:ProperContainsListExpression ops:BooleanExpression)
EquivalentClasses(shops:ProperInIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ProperIn"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:ProperInIntervalExpression ops:BooleanExpression)
EquivalentClasses(shops:ProperInListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ProperIn"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:ListExpression)))
SubClassOf(shops:ProperInListExpression ops:BooleanExpression)
EquivalentClasses(shops:PropertyExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ObjectExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Property"^^xsd:string))))
SubClassOf(shops:PropertyExpression ops:Expression)
EquivalentClasses(shops:ReverseExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Reverse"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:ReverseExpression ops:ListExpression)
EquivalentClasses(shops:RoundExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Round"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:RoundExpression ops:RealExpression)
EquivalentClasses(shops:RoundRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Round"^^xsd:string))))
SubClassOf(shops:RoundRealExpression ops:IntegerExpression)
SubClassOf(shops:RoundRealExpression ops:RealExpression)
EquivalentClasses(shops:SeqToExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "SeqTo"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:SeqToExpression ops:ListExpression)
EquivalentClasses(shops:SinIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sin"^^xsd:string))))
SubClassOf(shops:SinIntegerExpression ops:RealExpression)
EquivalentClasses(shops:SinRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sin"^^xsd:string))))
SubClassOf(shops:SinRealExpression ops:RealExpression)
EquivalentClasses(shops:SortExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sort"^^xsd:string))))
SubClassOf(shops:SortExpression ops:ListExpression)
EquivalentClasses(shops:SplitExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Split"^^xsd:string))))
EquivalentClasses(shops:SplitExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Split"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:StringExpression)))
SubClassOf(shops:SplitExpression ops:ListExpression)
EquivalentClasses(shops:SqrtIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sqrt"^^xsd:string))))
SubClassOf(shops:SqrtIntegerExpression ops:IntegerExpression)
SubClassOf(shops:SqrtIntegerExpression ops:RealExpression)
EquivalentClasses(shops:SqrtRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sqrt"^^xsd:string))))
SubClassOf(shops:SqrtRealExpression ops:RealExpression)
EquivalentClasses(shops:StdDevExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "StdDev"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:StdDevExpression ops:NumberExpression)
EquivalentClasses(shops:StringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "String"^^xsd:string))))
SubClassOf(shops:StringExpression ops:StringExpression)
EquivalentClasses(shops:SubstringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Substring"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
EquivalentClasses(shops:SubstringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Substring"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:thirdOperand ops:IntegerExpression)))
SubClassOf(shops:SubstringExpression ops:StringExpression)
EquivalentClasses(shops:SubtractIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Subtract"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:SubtractIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:SubtractRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Subtract"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:RealExpression)))
SubClassOf(shops:SubtractRealExpression ops:RealExpression)
EquivalentClasses(shops:SuccExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Succ"^^xsd:string))))
SubClassOf(shops:SuccExpression ops:IntegerExpression)
EquivalentClasses(shops:SumIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sum"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:SumIntegerExpression ops:IntegerExpression)
EquivalentClasses(shops:SumRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Sum"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:SumRealExpression ops:RealExpression)
EquivalentClasses(shops:TanIntegerExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Tan"^^xsd:string))))
SubClassOf(shops:TanIntegerExpression ops:RealExpression)
EquivalentClasses(shops:TanRealExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:RealExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Tan"^^xsd:string))))
SubClassOf(shops:TanRealExpression ops:RealExpression)
EquivalentClasses(shops:ToStringExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "ToString"^^xsd:string))))
SubClassOf(shops:ToStringExpression ops:StringExpression)
EquivalentClasses(shops:TrimExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Trim"^^xsd:string))))
SubClassOf(shops:TrimExpression ops:StringExpression)
EquivalentClasses(shops:TrimLeftExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "TrimLeft"^^xsd:string))))
SubClassOf(shops:TrimLeftExpression ops:StringExpression)
EquivalentClasses(shops:TrimRightExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "TrimRight"^^xsd:string))))
SubClassOf(shops:TrimRightExpression ops:StringExpression)
EquivalentClasses(shops:TruncatedDivideExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntegerExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "TruncatedDivide"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntegerExpression)))
SubClassOf(shops:TruncatedDivideExpression ops:IntegerExpression)
EquivalentClasses(shops:UnionIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Union"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:IntervalExpression)))
SubClassOf(shops:UnionIntervalExpression ops:IntervalExpression)
EquivalentClasses(shops:UnionListExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Union"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:ListExpression)))
SubClassOf(shops:UnionListExpression ops:ListExpression)
EquivalentClasses(shops:UpperExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:StringExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Upper"^^xsd:string))))
SubClassOf(shops:UpperExpression ops:StringExpression)
EquivalentClasses(shops:VarianceExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:ListExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Variance"^^xsd:string)) ObjectExactCardinality(1 ops:hasOperand)))
SubClassOf(shops:VarianceExpression ops:NumberExpression)
EquivalentClasses(shops:WithinAnyExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:Expression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Within"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:WithinAnyExpression ops:BooleanExpression)
EquivalentClasses(shops:WithinIntervalExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:firstOperand ops:IntervalExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Within"^^xsd:string)) ObjectSomeValuesFrom(ops:secondOperand ops:IntervalExpression)))
SubClassOf(shops:WithinIntervalExpression ops:BooleanExpression)
EquivalentClasses(shops:XorExpression ObjectIntersectionOf(ops:Expression ObjectSomeValuesFrom(ops:hasOperand ops:BooleanExpression) ObjectSomeValuesFrom(ops:hasOperator DataHasValue(skos:notation "Xor"^^xsd:string)) ObjectAllValuesFrom(ops:hasOperand ops:BooleanExpression)))
SubClassOf(shops:XorExpression ops:BooleanExpression)
SubObjectPropertyOf(ops:firstOperand ops:hasOperand)
SubObjectPropertyOf(ops:hasFirstOperandType ops:hasOperandType)
SubObjectPropertyOf(ops:hasSecondOperandType ops:hasOperandType)
SubObjectPropertyOf(ops:hasThirdOperandType ops:hasOperandType)
SubObjectPropertyOf(ops:secondOperand ops:hasOperand)
SubObjectPropertyOf(ops:thirdOperand ops:hasOperand)
ClassAssertion(ops:UnaryOperator shops:AbsInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:AbsInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AbsInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:AbsInteger "Abs"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AbsReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:AbsReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AbsReal ops:realType)
DataPropertyAssertion(skos:notation shops:AbsReal "Abs"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AcosInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:AcosInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AcosInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:AcosInteger "Acos"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AcosReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:AcosReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AcosReal ops:realType)
DataPropertyAssertion(skos:notation shops:AcosReal "Acos"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:AddInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:AddInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AddInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:AddInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:AddInteger "Add"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:AddReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:AddReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AddReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:AddReal ops:realType)
DataPropertyAssertion(skos:notation shops:AddReal "Add"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:After)
ObjectPropertyAssertion(ops:evaluatesAs shops:After ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:After ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:After ops:intervalType)
DataPropertyAssertion(skos:notation shops:After "After"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:AllFalse)
ObjectPropertyAssertion(ops:evaluatesAs shops:AllFalse ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:AllFalse ops:booleanType)
DataPropertyAssertion(skos:notation shops:AllFalse "AllFalse"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:AllTrue)
ObjectPropertyAssertion(ops:evaluatesAs shops:AllTrue ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:AllTrue ops:booleanType)
DataPropertyAssertion(skos:notation shops:AllTrue "AllTrue"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:And)
ObjectPropertyAssertion(ops:evaluatesAs shops:And ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:And ops:booleanType)
DataPropertyAssertion(skos:notation shops:And "And"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:AnyTrue)
ObjectPropertyAssertion(ops:evaluatesAs shops:AnyTrue ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:AnyTrue ops:booleanType)
DataPropertyAssertion(skos:notation shops:AnyTrue "AnyTrue"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AsinInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:AsinInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AsinInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:AsinInteger "Asin"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AsinReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:AsinReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AsinReal ops:realType)
DataPropertyAssertion(skos:notation shops:AsinReal "Asin"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AtanInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:AtanInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AtanInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:AtanInteger "Atan"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:AtanReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:AtanReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:AtanReal ops:realType)
DataPropertyAssertion(skos:notation shops:AtanReal "Atan"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:AvgInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:AvgInteger ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:AvgInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:AvgInteger "Avg"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:AvgReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:AvgReal ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:AvgReal ops:realType)
DataPropertyAssertion(skos:notation shops:AvgReal "Avg"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:AvgTimeDuration)
ObjectPropertyAssertion(ops:evaluatesAs shops:AvgTimeDuration ops:timeDurationType)
ObjectPropertyAssertion(ops:hasOperandType shops:AvgTimeDuration ops:timeDurationType)
DataPropertyAssertion(skos:notation shops:AvgTimeDuration "Avg"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Before)
ObjectPropertyAssertion(ops:evaluatesAs shops:Before ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Before ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Before ops:intervalType)
DataPropertyAssertion(skos:notation shops:Before "Before"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Begin)
ObjectPropertyAssertion(ops:evaluatesAs shops:Begin ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Begin ops:intervalType)
DataPropertyAssertion(skos:notation shops:Begin "Begin"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Ceiling)
ObjectPropertyAssertion(ops:evaluatesAs shops:Ceiling ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Ceiling ops:realType)
DataPropertyAssertion(skos:notation shops:Ceiling "Ceiling"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:Coalesce)
ObjectPropertyAssertion(ops:evaluatesAs shops:Coalesce ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType shops:Coalesce ops:anyType)
DataPropertyAssertion(skos:notation shops:Coalesce "Coalesce"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Combine)
ClassAssertion(ops:UnaryOperator shops:Combine)
ObjectPropertyAssertion(ops:evaluatesAs shops:Combine ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Combine ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Combine ops:stringType)
DataPropertyAssertion(skos:notation shops:Combine "Combine"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:Concat)
ObjectPropertyAssertion(ops:evaluatesAs shops:Concat ops:stringType)
ObjectPropertyAssertion(ops:hasOperandType shops:Concat ops:stringType)
DataPropertyAssertion(skos:notation shops:Concat "Concat"^^xsd:string)
ClassAssertion(ops:TernaryOperator shops:Conditional)
ObjectPropertyAssertion(ops:evaluatesAs shops:Conditional ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Conditional ops:booleanType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Conditional ops:anyType)
ObjectPropertyAssertion(ops:hasThirdOperandType shops:Conditional ops:anyType)
DataPropertyAssertion(skos:notation shops:Conditional "Conditional"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ContainsInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:ContainsInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ContainsInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ContainsInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ContainsInterval ops:anyType)
DataPropertyAssertion(skos:notation shops:ContainsInterval "Contains"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ContainsList)
ObjectPropertyAssertion(ops:evaluatesAs shops:ContainsList ops:booleanType)
ObjectPropertyAssertion(ops:evaluatesAs shops:ContainsList ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ContainsList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ContainsList ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ContainsList ops:listType)
DataPropertyAssertion(skos:notation shops:ContainsList "Contains"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Convert)
ObjectPropertyAssertion(ops:evaluatesAs shops:Convert ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Convert ops:anyType)
DataPropertyAssertion(skos:notation shops:Convert "Convert"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:CosInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:CosInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:CosInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:CosInteger "Cos"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:CosReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:CosReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:CosReal ops:realType)
DataPropertyAssertion(skos:notation shops:CosReal "Cos"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Count)
ObjectPropertyAssertion(ops:evaluatesAs shops:Count ops:integerType)
ObjectPropertyAssertion(ops:hasOperandType shops:Count ops:anyType)
DataPropertyAssertion(skos:notation shops:Count "Count"^^xsd:string)
ClassAssertion(ops:TernaryOperator shops:DateAdd)
ObjectPropertyAssertion(ops:evaluatesAs shops:DateAdd ops:timestampType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DateAdd ops:timestampType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DateAdd ops:dateGranularityType)
ObjectPropertyAssertion(ops:hasThirdOperandType shops:DateAdd ops:realType)
DataPropertyAssertion(skos:notation shops:DateAdd "DateAdd"^^xsd:string)
ClassAssertion(ops:TernaryOperator shops:DateDiff)
ObjectPropertyAssertion(ops:evaluatesAs shops:DateDiff ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DateDiff ops:timestampType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DateDiff ops:timestampType)
ObjectPropertyAssertion(ops:hasThirdOperandType shops:DateDiff ops:dateGranularityType)
DataPropertyAssertion(skos:notation shops:DateDiff "DateDiff"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:DatePart)
ObjectPropertyAssertion(ops:evaluatesAs shops:DatePart ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DatePart ops:timestampType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DatePart ops:dateGranularityType)
DataPropertyAssertion(skos:notation shops:DatePart "DatePart"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:DifferenceInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:DifferenceInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DifferenceInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DifferenceInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:DifferenceInterval "Difference"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:DifferenceList)
ObjectPropertyAssertion(ops:evaluatesAs shops:DifferenceList ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DifferenceList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DifferenceList ops:listType)
DataPropertyAssertion(skos:notation shops:DifferenceList "Difference"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:DivideInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:DivideInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DivideInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DivideInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:DivideInteger "Divide"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:DivideReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:DivideReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:DivideReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:DivideReal ops:realType)
DataPropertyAssertion(skos:notation shops:DivideReal "Divide"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Earliest)
ObjectPropertyAssertion(ops:evaluatesAs shops:Earliest ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType shops:Earliest ops:anyType)
DataPropertyAssertion(skos:notation shops:Earliest "Earliest"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:End)
ObjectPropertyAssertion(ops:evaluatesAs shops:End ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:End ops:intervalType)
DataPropertyAssertion(skos:notation shops:End "End"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:EqualBoolean)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualBoolean ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:EqualBoolean ops:booleanType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:EqualBoolean ops:booleanType)
DataPropertyAssertion(skos:notation shops:EqualBoolean "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:EqualInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:EqualInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:EqualInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:EqualInterval "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:EqualList)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualList ops:listType)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:EqualList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:EqualList ops:listType)
DataPropertyAssertion(skos:notation shops:EqualList "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:EqualObject)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualObject ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:EqualObject ops:objectType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:EqualObject ops:objectType)
DataPropertyAssertion(skos:notation shops:EqualObject "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:EqualScalar)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualScalar ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:EqualScalar ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:EqualScalar ops:scalarType)
DataPropertyAssertion(skos:notation shops:EqualScalar "Equal"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:EqualString)
ObjectPropertyAssertion(ops:evaluatesAs shops:EqualString ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:EqualString ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:EqualString ops:stringType)
DataPropertyAssertion(skos:notation shops:EqualString "Equal"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Exist)
ObjectPropertyAssertion(ops:evaluatesAs shops:Exist ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:Exist ops:anyType)
DataPropertyAssertion(skos:notation shops:Exist "Exist"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:ExpInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:ExpInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ExpInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:ExpInteger "Exp"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:ExpReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:ExpReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ExpReal ops:realType)
DataPropertyAssertion(skos:notation shops:ExpReal "Exp"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:ExtractCharacters)
ObjectPropertyAssertion(ops:evaluatesAs shops:ExtractCharacters ops:listType)
ObjectPropertyAssertion(ops:hasOperandType shops:ExtractCharacters ops:stringType)
DataPropertyAssertion(skos:notation shops:ExtractCharacters "ExtractCharacters"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Filter)
ObjectPropertyAssertion(ops:evaluatesAs shops:Filter ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Filter ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Filter ops:booleanType)
DataPropertyAssertion(skos:notation shops:Filter "Filter"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:First)
ObjectPropertyAssertion(ops:evaluatesAs shops:First ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:First ops:listType)
DataPropertyAssertion(skos:notation shops:First "First"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Flatten)
ObjectPropertyAssertion(ops:evaluatesAs shops:Flatten ops:listType)
ObjectPropertyAssertion(ops:hasOperandType shops:Flatten ops:anyType)
DataPropertyAssertion(skos:notation shops:Flatten "Flatten"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Floor)
ObjectPropertyAssertion(ops:evaluatesAs shops:Floor ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Floor ops:realType)
DataPropertyAssertion(skos:notation shops:Floor "Floor"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ForEach)
ObjectPropertyAssertion(ops:evaluatesAs shops:ForEach ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ForEach ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ForEach ops:expressionType)
DataPropertyAssertion(skos:notation shops:ForEach "ForEach"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Greater)
ObjectPropertyAssertion(ops:evaluatesAs shops:Greater ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Greater ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Greater ops:scalarType)
DataPropertyAssertion(skos:notation shops:Greater "Greater"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:GreaterOrEqual)
ObjectPropertyAssertion(ops:evaluatesAs shops:GreaterOrEqual ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:GreaterOrEqual ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:GreaterOrEqual ops:scalarType)
DataPropertyAssertion(skos:notation shops:GreaterOrEqual "GreaterOrEqual"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:IfNull)
ObjectPropertyAssertion(ops:evaluatesAs shops:IfNull ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IfNull ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:IfNull ops:anyType)
DataPropertyAssertion(skos:notation shops:IfNull "IfNull"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:InAny)
ObjectPropertyAssertion(ops:evaluatesAs shops:InAny ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:InAny ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:InAny ops:listType)
DataPropertyAssertion(skos:notation shops:InAny "In"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:InList)
ObjectPropertyAssertion(ops:evaluatesAs shops:InList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:InList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:InList ops:listType)
DataPropertyAssertion(skos:notation shops:InList "In"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:IndexEarliest)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexEarliest ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:IndexEarliest ops:anyType)
DataPropertyAssertion(skos:notation shops:IndexEarliest "IndexEarliest"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:IndexLatest)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexLatest ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:IndexLatest ops:anyType)
DataPropertyAssertion(skos:notation shops:IndexLatest "IndexLatest"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:IndexMax)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexMax ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:IndexMax ops:orderedType)
DataPropertyAssertion(skos:notation shops:IndexMax "IndexMax"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:IndexMin)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexMin ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:IndexMin ops:orderedType)
DataPropertyAssertion(skos:notation shops:IndexMin "IndexMin"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:IndexOf)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexOf ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IndexOf ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:IndexOf ops:anyType)
DataPropertyAssertion(skos:notation shops:IndexOf "IndexOf"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:IndexerList)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexerList ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IndexerList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:IndexerList ops:integerType)
DataPropertyAssertion(skos:notation shops:IndexerList "Indexer"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:IndexerString)
ObjectPropertyAssertion(ops:evaluatesAs shops:IndexerString ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IndexerString ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:IndexerString ops:integerType)
DataPropertyAssertion(skos:notation shops:IndexerString "Indexer"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:IntersectInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:IntersectInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IntersectInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:IntersectInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:IntersectInterval "Intersect"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:IntersectList)
ObjectPropertyAssertion(ops:evaluatesAs shops:IntersectList ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IntersectList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:IntersectList ops:listType)
DataPropertyAssertion(skos:notation shops:IntersectList "Intersect"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Interval)
ObjectPropertyAssertion(ops:evaluatesAs shops:Interval ops:intervalType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Interval ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Interval ops:anyType)
DataPropertyAssertion(skos:notation shops:Interval "Interval"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:IsEmptyCollection)
ObjectPropertyAssertion(ops:evaluatesAs shops:IsEmptyCollection ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IsEmptyCollection ops:collectionType)
DataPropertyAssertion(skos:notation shops:IsEmptyCollection "IsEmpty"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:IsEmptyList)
ObjectPropertyAssertion(ops:evaluatesAs shops:IsEmptyList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IsEmptyList ops:listType)
DataPropertyAssertion(skos:notation shops:IsEmptyList "IsEmpty"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:IsNotEmpty)
ObjectPropertyAssertion(ops:evaluatesAs shops:IsNotEmpty ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IsNotEmpty ops:listType)
DataPropertyAssertion(skos:notation shops:IsNotEmpty "IsNotEmpty"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:IsNull)
ObjectPropertyAssertion(ops:evaluatesAs shops:IsNull ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:IsNull ops:anyType)
DataPropertyAssertion(skos:notation shops:IsNull "IsNull"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Last)
ObjectPropertyAssertion(ops:evaluatesAs shops:Last ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Last ops:listType)
DataPropertyAssertion(skos:notation shops:Last "Last"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Latest)
ObjectPropertyAssertion(ops:evaluatesAs shops:Latest ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType shops:Latest ops:anyType)
DataPropertyAssertion(skos:notation shops:Latest "Latest"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:LengthInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:LengthInterval ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:LengthInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:LengthInterval "Length"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:LengthString)
ObjectPropertyAssertion(ops:evaluatesAs shops:LengthString ops:integerType)
ObjectPropertyAssertion(ops:evaluatesAs shops:LengthString ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:LengthString ops:stringType)
DataPropertyAssertion(skos:notation shops:LengthString "Length"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Less)
ObjectPropertyAssertion(ops:evaluatesAs shops:Less ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Less ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Less ops:scalarType)
DataPropertyAssertion(skos:notation shops:Less "Less"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:LessOrEqual)
ObjectPropertyAssertion(ops:evaluatesAs shops:LessOrEqual ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:LessOrEqual ops:scalarType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:LessOrEqual ops:scalarType)
DataPropertyAssertion(skos:notation shops:LessOrEqual "LessOrEqual"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:List)
ObjectPropertyAssertion(ops:evaluatesAs shops:List ops:listType)
ObjectPropertyAssertion(ops:hasOperandType shops:List ops:anyType)
DataPropertyAssertion(skos:notation shops:List "List"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Ln)
ObjectPropertyAssertion(ops:evaluatesAs shops:Ln ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Ln ops:realType)
DataPropertyAssertion(skos:notation shops:Ln "Ln"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Log)
ObjectPropertyAssertion(ops:evaluatesAs shops:Log ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Log ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Log ops:realType)
DataPropertyAssertion(skos:notation shops:Log "Log"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Log10)
ClassAssertion(ops:UnaryOperator shops:Log10)
ObjectPropertyAssertion(ops:evaluatesAs shops:Log10 ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Log10 ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Log10 ops:realType)
DataPropertyAssertion(skos:notation shops:Log10 "Log10"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Lower)
ObjectPropertyAssertion(ops:evaluatesAs shops:Lower ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Lower ops:stringType)
DataPropertyAssertion(skos:notation shops:Lower "Lower"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Max)
ObjectPropertyAssertion(ops:evaluatesAs shops:Max ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType shops:Max ops:anyType)
DataPropertyAssertion(skos:notation shops:Max "Max"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:MaxInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:MaxInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:MaxInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:MaxInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:MaxInteger "Max"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:MaxReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:MaxReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:MaxReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:MaxReal ops:realType)
DataPropertyAssertion(skos:notation shops:MaxReal "Max"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Median)
ObjectPropertyAssertion(ops:evaluatesAs shops:Median ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:Median ops:realType)
DataPropertyAssertion(skos:notation shops:Median "Median"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Meets)
ObjectPropertyAssertion(ops:evaluatesAs shops:Meets ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Meets ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Meets ops:intervalType)
DataPropertyAssertion(skos:notation shops:Meets "Meets"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Min)
ObjectPropertyAssertion(ops:evaluatesAs shops:Min ops:anyType)
ObjectPropertyAssertion(ops:hasOperandType shops:Min ops:anyType)
DataPropertyAssertion(skos:notation shops:Min "Min"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:MinInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:MinInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:MinInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:MinInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:MinInteger "Min"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:MinReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:MinReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:MinReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:MinReal ops:realType)
DataPropertyAssertion(skos:notation shops:MinReal "Min"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ModuloInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:ModuloInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ModuloInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ModuloInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:ModuloInteger "Modulo"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ModuloReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:ModuloReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ModuloReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ModuloReal ops:realType)
DataPropertyAssertion(skos:notation shops:ModuloReal "Modulo"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:MultiplyInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:MultiplyInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:MultiplyInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:MultiplyInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:MultiplyInteger "Multiply"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:MultiplyReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:MultiplyReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:MultiplyReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:MultiplyReal ops:realType)
DataPropertyAssertion(skos:notation shops:MultiplyReal "Multiply"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:NegateInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:NegateInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:NegateInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:NegateInteger "Negate"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:NegateReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:NegateReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:NegateReal ops:realType)
DataPropertyAssertion(skos:notation shops:NegateReal "Negate"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Not)
ObjectPropertyAssertion(ops:evaluatesAs shops:Not ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Not ops:booleanType)
DataPropertyAssertion(skos:notation shops:Not "Not"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:NotEqual)
ObjectPropertyAssertion(ops:evaluatesAs shops:NotEqual ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:NotEqual ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:NotEqual ops:anyType)
DataPropertyAssertion(skos:notation shops:NotEqual "NotEqual"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:ObjectRedefine)
ObjectPropertyAssertion(ops:evaluatesAs shops:ObjectRedefine ops:objectType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ObjectRedefine ops:objectType)
DataPropertyAssertion(skos:notation shops:ObjectRedefine "ObjectRedefine"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:Or)
ObjectPropertyAssertion(ops:evaluatesAs shops:Or ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:Or ops:booleanType)
DataPropertyAssertion(skos:notation shops:Or "Or"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Overlaps)
ObjectPropertyAssertion(ops:evaluatesAs shops:Overlaps ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Overlaps ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Overlaps ops:intervalType)
DataPropertyAssertion(skos:notation shops:Overlaps "Overlaps"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Pos)
ObjectPropertyAssertion(ops:evaluatesAs shops:Pos ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Pos ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Pos ops:stringType)
DataPropertyAssertion(skos:notation shops:Pos "Pos"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:PowerInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:PowerInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:PowerInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:PowerInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:PowerInteger "Power"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:PowerReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:PowerReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:PowerReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:PowerReal ops:realType)
DataPropertyAssertion(skos:notation shops:PowerReal "Power"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Pred)
ObjectPropertyAssertion(ops:evaluatesAs shops:Pred ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Pred ops:integerType)
DataPropertyAssertion(skos:notation shops:Pred "Pred"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ProperContainsInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:ProperContainsInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ProperContainsInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ProperContainsInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:ProperContainsInterval "ProperContains"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ProperContainsList)
ObjectPropertyAssertion(ops:evaluatesAs shops:ProperContainsList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ProperContainsList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ProperContainsList ops:listType)
DataPropertyAssertion(skos:notation shops:ProperContainsList "ProperContains"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ProperInInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:ProperInInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ProperInInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ProperInInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:ProperInInterval "ProperIn"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:ProperInList)
ObjectPropertyAssertion(ops:evaluatesAs shops:ProperInList ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ProperInList ops:listType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:ProperInList ops:listType)
DataPropertyAssertion(skos:notation shops:ProperInList "ProperIn"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Property)
ObjectPropertyAssertion(ops:evaluatesAs shops:Property ops:anyType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Property ops:objectType)
DataPropertyAssertion(skos:notation shops:Property "Property"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Reverse)
ObjectPropertyAssertion(ops:evaluatesAs shops:Reverse ops:listType)
ObjectPropertyAssertion(ops:hasOperandType shops:Reverse ops:anyType)
DataPropertyAssertion(skos:notation shops:Reverse "Reverse"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Round)
ObjectPropertyAssertion(ops:evaluatesAs shops:Round ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Round ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Round ops:integerType)
DataPropertyAssertion(skos:notation shops:Round "Round"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:RoundReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:RoundReal ops:realType)
ObjectPropertyAssertion(ops:evaluatesAs shops:RoundReal ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:RoundReal ops:realType)
DataPropertyAssertion(skos:notation shops:RoundReal "Round"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:SeqTo)
ObjectPropertyAssertion(ops:evaluatesAs shops:SeqTo ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SeqTo ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:SeqTo ops:realType)
DataPropertyAssertion(skos:notation shops:SeqTo "SeqTo"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:SinInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:SinInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SinInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:SinInteger "Sin"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:SinReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:SinReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SinReal ops:realType)
DataPropertyAssertion(skos:notation shops:SinReal "Sin"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Sort)
ObjectPropertyAssertion(ops:evaluatesAs shops:Sort ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Sort ops:listType)
DataPropertyAssertion(skos:notation shops:Sort "Sort"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Split)
ClassAssertion(ops:UnaryOperator shops:Split)
ObjectPropertyAssertion(ops:evaluatesAs shops:Split ops:listType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Split ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Split ops:stringType)
DataPropertyAssertion(skos:notation shops:Split "Split"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:SqrtInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:SqrtInteger ops:integerType)
ObjectPropertyAssertion(ops:evaluatesAs shops:SqrtInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SqrtInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:SqrtInteger "Sqrt"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:SqrtReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:SqrtReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SqrtReal ops:realType)
DataPropertyAssertion(skos:notation shops:SqrtReal "Sqrt"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:StdDev)
ObjectPropertyAssertion(ops:evaluatesAs shops:StdDev ops:numberType)
ObjectPropertyAssertion(ops:hasOperandType shops:StdDev ops:numberType)
DataPropertyAssertion(skos:notation shops:StdDev "StdDev"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:String)
ObjectPropertyAssertion(ops:evaluatesAs shops:String ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:String ops:listType)
DataPropertyAssertion(skos:notation shops:String "String"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:Substring)
ClassAssertion(ops:TernaryOperator shops:Substring)
ObjectPropertyAssertion(ops:evaluatesAs shops:Substring ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Substring ops:stringType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:Substring ops:integerType)
ObjectPropertyAssertion(ops:hasThirdOperandType shops:Substring ops:integerType)
DataPropertyAssertion(skos:notation shops:Substring "Substring"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:SubtractInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:SubtractInteger ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SubtractInteger ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:SubtractInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:SubtractInteger "Subtract"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:SubtractReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:SubtractReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:SubtractReal ops:realType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:SubtractReal ops:realType)
DataPropertyAssertion(skos:notation shops:SubtractReal "Subtract"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Succ)
ObjectPropertyAssertion(ops:evaluatesAs shops:Succ ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Succ ops:integerType)
DataPropertyAssertion(skos:notation shops:Succ "Succ"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:SumInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:SumInteger ops:integerType)
ObjectPropertyAssertion(ops:hasOperandType shops:SumInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:SumInteger "Sum"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:SumReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:SumReal ops:realType)
ObjectPropertyAssertion(ops:hasOperandType shops:SumReal ops:realType)
DataPropertyAssertion(skos:notation shops:SumReal "Sum"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:TanInteger)
ObjectPropertyAssertion(ops:evaluatesAs shops:TanInteger ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:TanInteger ops:integerType)
DataPropertyAssertion(skos:notation shops:TanInteger "Tan"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:TanReal)
ObjectPropertyAssertion(ops:evaluatesAs shops:TanReal ops:realType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:TanReal ops:realType)
DataPropertyAssertion(skos:notation shops:TanReal "Tan"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:ToString)
ObjectPropertyAssertion(ops:evaluatesAs shops:ToString ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:ToString ops:anyType)
DataPropertyAssertion(skos:notation shops:ToString "ToString"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Trim)
ObjectPropertyAssertion(ops:evaluatesAs shops:Trim ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Trim ops:stringType)
DataPropertyAssertion(skos:notation shops:Trim "Trim"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:TrimLeft)
ObjectPropertyAssertion(ops:evaluatesAs shops:TrimLeft ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:TrimLeft ops:stringType)
DataPropertyAssertion(skos:notation shops:TrimLeft "TrimLeft"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:TrimRight)
ObjectPropertyAssertion(ops:evaluatesAs shops:TrimRight ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:TrimRight ops:stringType)
DataPropertyAssertion(skos:notation shops:TrimRight "TrimRight"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:TruncatedDivide)
ObjectPropertyAssertion(ops:evaluatesAs shops:TruncatedDivide ops:integerType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:TruncatedDivide ops:integerType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:TruncatedDivide ops:integerType)
DataPropertyAssertion(skos:notation shops:TruncatedDivide "TruncatedDivide"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:UnionInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:UnionInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasOperandType shops:UnionInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:UnionInterval "Union"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:UnionList)
ObjectPropertyAssertion(ops:evaluatesAs shops:UnionList ops:listType)
ObjectPropertyAssertion(ops:hasOperandType shops:UnionList ops:listType)
DataPropertyAssertion(skos:notation shops:UnionList "Union"^^xsd:string)
ClassAssertion(ops:UnaryOperator shops:Upper)
ObjectPropertyAssertion(ops:evaluatesAs shops:Upper ops:stringType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:Upper ops:stringType)
DataPropertyAssertion(skos:notation shops:Upper "Upper"^^xsd:string)
ClassAssertion(ops:AggregateOperator shops:Variance)
ObjectPropertyAssertion(ops:evaluatesAs shops:Variance ops:numberType)
ObjectPropertyAssertion(ops:hasOperandType shops:Variance ops:numberType)
DataPropertyAssertion(skos:notation shops:Variance "Variance"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:WithinAny)
ObjectPropertyAssertion(ops:evaluatesAs shops:WithinAny ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:WithinAny ops:anyType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:WithinAny ops:intervalType)
DataPropertyAssertion(skos:notation shops:WithinAny "Within"^^xsd:string)
ClassAssertion(ops:BinaryOperator shops:WithinInterval)
ObjectPropertyAssertion(ops:evaluatesAs shops:WithinInterval ops:booleanType)
ObjectPropertyAssertion(ops:hasFirstOperandType shops:WithinInterval ops:intervalType)
ObjectPropertyAssertion(ops:hasSecondOperandType shops:WithinInterval ops:intervalType)
DataPropertyAssertion(skos:notation shops:WithinInterval "Within"^^xsd:string)
ClassAssertion(ops:NAryOperator shops:Xor)
ObjectPropertyAssertion(ops:evaluatesAs shops:Xor ops:booleanType)
ObjectPropertyAssertion(ops:hasOperandType shops:Xor ops:booleanType)
DataPropertyAssertion(skos:notation shops:Xor "Xor"^^xsd:string)
)
