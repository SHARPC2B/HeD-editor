@declare{"blocky"}
Blockly.Blocks['@{iri}'] = {
  init: function() {
    this.setHelpUrl( 'https://code.google.com/p/health-e-decisions/source/browse/#svn' );

    this.setColour( @{ color } );

    this.appendDummyInput().appendField('@{name}');

    @foreach{ arg : arguments }
        @includeNamed{ "argument"; arg=arg }
    @end{}

    this.setOutput( true, @if{returnType == null || returnType.empty}null@else{}[@foreach{ret : returnType}'@{ret.IRI.toString()}'@end{','}]@end{} );

    this.setInputsInline( false );

    this.setTooltip( '@includeNamed{ "inlineHelp" }' );
  }
  @if{ multipleArg != null },
        @includeNamed{ "mutatorCode"; arg=multipleArg }
  @end{}
};
@end{}


@declare{"argument"}
    this.appendValueInput( '@{arg.id}@if{arg.multiple}_0@end{}' )
                         .setCheck( @if{arg.allowedTypes == null || arg.allowedTypes.empty}null@else{}[ @foreach{ a : arg.allowedTypes}'@{a}'@end{','} ]@end{} )
                         .setAlign( Blockly.ALIGN_RIGHT )
                         .appendField( '@{arg.name}' );
    @if{ arg.multiple }
        this.setMutator( new Blockly.Mutator( ['argument_group_item'] ) );
        this.itemCount_ = 1;
    @end{}
@end{}


@declare{"inlineHelp"} @{tooltip} \n Return type : @{returnTypeNames} \n Allowed types : \n @foreach{ arg : arguments } @{arg.name} : @{arg.allowedTypeNames} \n @end{} @end{}


@declare{"mutatorCode"}

  mutationToDom: function(workspace) {
    var container = document.createElement( '@{name}_mutation' );
    container.setAttribute( 'items', this.itemCount_ );
    return container;
  },

  domToMutation: function(container) {
    for (var x = 0; x < this.itemCount_; x++) {
      this.removeInput('@{arg.id}_' + x);
    }
    this.itemCount_ = parseInt(container.getAttribute('items'), 10);
    for (var x = 0; x < this.itemCount_; x++) {
      var input = this.appendValueInput('@{arg.id}_' + x)
                         .setCheck( @if{arg.allowedTypes == null || arg.allowedTypes.empty}null@else{}[ @foreach{ a : arg.allowedTypes}'@{a}'@end{','} ]@end{} )
                         .setAlign( Blockly.ALIGN_RIGHT )
                         .appendField( '@{arg.name} @{arg.allowedTypeNames}' );
    }
    if (this.itemCount_ == 0) {
        this.appendDummyInput('EMPTY');
    }
  },

  decompose: function(workspace) {
      var containerBlock = new Blockly.Block(workspace,
                                             'argument_group_container');
      containerBlock.initSvg();
      var connection = containerBlock.getInput('STACK').connection;
      for (var x = 0; x < this.itemCount_; x++) {
        var itemBlock = new Blockly.Block(workspace, 'argument_group_item');
        itemBlock.initSvg();
        connection.connect(itemBlock.previousConnection);
        connection = itemBlock.nextConnection;
      }
      return containerBlock;
    },

  compose: function(containerBlock) {
      for (var x = this.itemCount_ - 1; x >= 0; x--) {
           this.removeInput('@{arg.id}_' + x);
         }
       this.itemCount_ = 0;
       // Rebuild the block's inputs.
       var itemBlock = containerBlock.getInputTargetBlock('STACK');
       while (itemBlock) {
         var input = this.appendValueInput('@{arg.id}_' + this.itemCount_)
                         .setCheck( @if{arg.allowedTypes == null || arg.allowedTypes.empty}null@else{}[ @foreach{ a : arg.allowedTypes}'@{a}'@end{','} ]@end{} )
                         .setAlign( Blockly.ALIGN_RIGHT )
                         .appendField( '@{arg.name} @{arg.allowedTypeNames}' );

         // Reconnect any child blocks.
         if (itemBlock.valueConnection_) {
          input.connection.connect(itemBlock.valueConnection_);
         }
         this.itemCount_++;
         itemBlock = itemBlock.nextConnection &&
             itemBlock.nextConnection.targetBlock();
       }

    },
    
  saveConnections: function(containerBlock) {
    var itemBlock = containerBlock.getInputTargetBlock('STACK');
    var x = 0;
    while (itemBlock) {
      var input = this.getInput('@{arg.id}_' + x);
      itemBlock.valueConnection_ = input && input.connection.targetConnection;
      x++;
      itemBlock = itemBlock.nextConnection &&
          itemBlock.nextConnection.targetBlock();
    }
  }

@end{}




@declare{"basicBlocks"}

Blockly.Blocks['xsd:string'] = {
  init: function() {
    this.setColour(152);
    var textInput = new Blockly.FieldTextInput('');
    this.appendDummyInput().appendField( '[string]' ).appendField( textInput, 'VALUE' );
    this.setOutput( true, 'xsd:string' );
  }
};

Blockly.Blocks['xsd:anyURI'] = {
  init: function() {
    this.setColour(152);
    var textInput = new Blockly.FieldTextInput('');
    this.appendDummyInput().appendField( '[URI]' ).appendField( textInput, 'VALUE' );
    this.setOutput( true, 'xsd:anyURI' );
  }
};

Blockly.Blocks['xsd:dateTime'] = {
  init: function() {
    this.setColour(152);
    var textInput = new Blockly.FieldTextInput('');
    this.appendDummyInput().appendField( '[dateTime]' ).appendField( textInput, 'VALUE' );
    this.setOutput( true, 'xsd:dateTimeStamp' );
  }
};

Blockly.Blocks['xsd:int'] = {
  init: function() {
    this.setColour(152);
    var numInput = new Blockly.FieldTextInput();
    this.appendDummyInput().appendField( '[int]' ).appendField( numInput, 'VALUE' );
    this.setOutput( true, 'xsd:int' );
  }
};

Blockly.Blocks['xsd:boolean'] = {
  init: function() {
    this.setColour(152);
    var boolInput = new Blockly.FieldCheckbox('TRUE');
    this.appendDummyInput().appendField( '[bool]' ).appendField( boolInput, 'VALUE' );
    this.setOutput( true, 'xsd:boolean' );
  }
};

Blockly.Blocks['xsd:double'] = {
  init: function() {
    this.setColour(152);
    var numInput = new Blockly.FieldTextInput();
    this.appendDummyInput().appendField( '[double]' ).appendField( numInput, 'VALUE' );
    this.setOutput( true, 'xsd:double' );
  }
};


        Blockly.Blocks['xsd:text'] = {
        	init : function() {
        		// Assign 'this' to a variable for use in the tooltip closure.
        	    var thisBlock = this;
        		this.setColour(152);
        		this.appendDummyInput().appendField( '[text]' ).appendField(new Blockly.FieldExternalInput("Click to edit the text", openExternalInput), "TEXT");
        		this.setOutput(true, 'xsd:string');
        		this.setTooltip(function() {
        			return thisBlock.getFieldValue('TEXT');
        		});
        	}
        };


@end{}

@declare{"blockyCommon"}
Blockly.Blocks.argument_group_container = {
    init: function() {
        this.setColour(230);
        this.appendDummyInput().appendField('Add arguments');
        this.appendStatementInput('STACK');
        this.setTooltip('Add, or remove arguments');
        this.contextMenu = false;
    }
};

Blockly.Blocks.argument_group_item = {
    init: function() {
        this.setColour(230);
        this.appendDummyInput().appendField('Argument');
        this.setPreviousStatement(true);
        this.setNextStatement(true);
        this.setTooltip('Add a new argument');
        this.contextMenu = false;
    }
};
@end{}

